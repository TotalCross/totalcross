apply plugin: 'com.android.application'

 repositories { 
     jcenter()
     maven {
         url "http://maven.totalcross.com/artifactory/build"
         credentials {
             username = "$System.env.TC_REPO_USERNAME"
             password = "$System.env.TC_REPO_PASSWORD"
         }
     }
 }

def buildType // stores build type, debug or release

android {
    compileSdkVersion 28
    compileOptions {
    	// compile with Java 8 to allow using try-with-resources without raising the API level to 19
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "deploy"
    productFlavors {
        standard { dimension "deploy" }
        singleApk { dimension "deploy" }
        includeSms { dimension "deploy" }
    }

    defaultConfig {
        applicationId "totalcross.android"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 305419896
        versionName "!1.0!"
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a', 'arm64-v8a'
                arguments "-DANDROID_TOOLCHAIN=clang", "-DANDROID_LIBS_DIR="+sourceSets.getByName("main").jniLibs.srcDirs[0]
                cppFlags "-std=c++14"
                targets "tcvm"
            }
        }
    }
    
    signingConfigs {
        config {
            keyAlias 'tcandroidkey'
            keyPassword "$System.env.TC_KEY_PASSWORD"
            storeFile file("$System.env.TC_PATH_TO_KEY_STORE")
            storePassword "$System.env.TC_STORE_PASSWORD"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config\
        }
        debug {}
    }
    
    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(assembleRelease)) {
            buildType = 'release'
        } else if (taskGraph.hasTask(assembleDebug)) {
            buildType = 'debug'
        }
    }
    
    externalNativeBuild {
        cmake {
            path "../../CMakeLists.txt"
        }
    }
    task assembleAssets(type:Zip) {
        // outputs.upToDateWhen { false }
        from ('../../../TotalCrossSDK/dist/vm') {
            include 'TCBase.tcz'
            include 'TCUI.tcz'
        }
        from ('../../../TotalCrossSDK/etc/fonts') {
            include 'TCFont.tcz'
        }
        from ('../../../LitebaseSDK/dist/lib/') {
            include 'LitebaseLib.tcz'
        }
        entryCompression ZipEntryCompression.STORED
        baseName 'tcfiles'
        destinationDir file('src/standard/assets') // directory that you want your archive to be placed in
    }

    task copyApk {
        doLast {
            copy {
                from fileTree('build/outputs/apk').files
                into "../../../output/${buildType}/TotalCrossSDK/dist/vm/android"
                include "**/app-standard-${buildType}.apk"
                rename { String fileName ->
                    fileName.replace("app-standard-${buildType}", 'TotalCross')
                }
                eachFile { println it.file }
            }
            copy {
                from zipTree("build/outputs/apk/singleApk/${buildType}/app-singleApk-${buildType}.apk").files
                into "../../../output/${buildType}/TotalCrossSDK/etc/tools/android"
                include 'AndroidManifest.xml', 'resources.arsc'
                rename { String fileName ->
                    fileName.replace('.', '_singleapk.')
                }
                eachFile { println it.file }
            }
            copy {
                from zipTree("build/outputs/apk/includeSms/${buildType}/app-includeSms-${buildType}.apk").files
                into "../../../output/${buildType}/TotalCrossSDK/etc/tools/android"
                include 'AndroidManifest.xml', 'resources.arsc'
                rename { String fileName ->
                    fileName.replace('.', '_includeSms.')
                }
                eachFile { println it.file }
            }
            copy {
                from fileTree('build/intermediates/res/standard/' + buildType).files
                into '../../../output/' + buildType + '/TotalCrossSDK/etc/launchers/android'
                include 'resources-standard' + buildType.capitalize() + '.ap_'
                rename { String fileName ->
                    fileName.replace('-standard' + buildType.capitalize(), '')
                }
                eachFile { println it.file }
            }
            copy {
                from fileTree('build/intermediates/res/standard/' + buildType).files
                into '../../../TotalCrossSDK/etc/launchers/android'
                include 'resources-standard' + buildType.capitalize() + '.ap_'
                rename { String fileName ->
                    fileName.replace('-standard' + buildType.capitalize(), '')
                }
                eachFile { println it.file }
            }
        }
    }

	assemble.mustRunAfter assembleAssets
	assemble.finalizedBy copyApk
    project.afterEvaluate{
	    applicationVariants.all { com.android.build.gradle.api.ApplicationVariant variant ->
		    	variant.assemble.dependsOn(['assembleAssets'])
		}
	}
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.android.support:appcompat-v7:26.0.2'

    implementation 'com.google.android.gms:play-services-ads:' + googleGmsVersion
    implementation 'com.google.android.gms:play-services-maps:' + googleGmsVersion
    implementation 'com.google.android.gms:play-services-location:' + googleGmsVersion
    implementation 'com.google.firebase:firebase-core:' + googleGmsVersion
    implementation 'com.google.firebase:firebase-messaging:' + googleGmsVersion

    implementation 'com.github.cliftonlabs:json-simple:2.1.2'

    // Supports Android 4.0.3 and later (API level 15)
    implementation 'com.journeyapps:zxing-android-embedded:2.3.0@aar'

    // Supports Android 2.1 and later (API level 7), but not optimal for later Android versions.
    // If you only plan on supporting Android 4.0.3 and up, you don't need to include this.
    implementation 'com.journeyapps:zxing-android-legacy:2.3.0@aar'

    // Convenience library to launch the scanning Activities.
    // It automatically picks the best scanning library from the above two, depending on the
    // Android version and what is available.
    implementation 'com.journeyapps:zxing-android-integration:2.3.0@aar'

    // Version 3.0.x of zxing core contains some code that is not compatible on Android 2.2 and earlier.
    // This mostly affects encoding, but you should test if you plan to support these versions.
    // Older versions e.g. 2.2 may also work if you need support for older Android versions.
    implementation 'com.google.zxing:core:3.2.0'

    // Enables MultiDex. This allows the app to have more than 64k methods
    implementation 'com.android.support:multidex:1.0.1'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    
    implementation 'com.android.support:customtabs:25.1.0'
    
    // https://mvnrepository.com/artifact/cielo.printer.client/printer-manager
	//compile group: 'cielo.printer.client', name: 'printer-manager', version: '2.3.1'
	
	// https://mvnrepository.com/artifact/com.cielo.lio/order-manager
    compile group: 'com.cielo.lio', name: 'order-manager', version: '0.19.8'

    //Youtube API
    implementation files('libs/YouTubeAndroidPlayerApi.jar')
}