First, to deploy TotalCross in your iPhone, you will have to JailBreak it.

Building the iPhone version of the TC natives
---------------------------------------------

TotalCross for iPhone build configuration supports the GNU build system and all you need is a gcc toolchain to build
iPhone binaries. One of them is the "iphone-dev" project hosted on google code. The toolchain build instruction can be
found here: http://code.google.com/p/iphone-dev/wiki/Building

The toolchain installs a gcc for the target "arm-apple-darwin" and thus all you have to do is invoke "configure" with
the option "--host=arm-apple-darwin" to use the cross compiler and build iPhone binaries on your
linux system for instance (cygwin as build system is supported too).

Insofar iPhone API are written is "Objective C", you will have to know the basics of this programing language by reading
a Objective C primer like "https://developer.apple.com/iphone/library/documentation/Cocoa/Conceptual/ObjectiveC".


iPhone TC SDK
-------------

For the TC application developer, an iPhone version of his software could be generated as easily as any other platform,
just by providing the "-iphone" option during the "tc.Deploy" invocation.

To deploy an application to iPhone you must define some totalcross.sys.Settings attributes, as described below:

    * totalcross.sys.Settings.appCategory: category name of the application to fasten package searching.
      For example, "Foo Applications".
    * totalcross.sys.Settings.appLocation: http URL where the zip file could be downloaded,
      the URL without the path is used as the application's website for additional information.
      For example, "http://www.mycompany.com/iphone/download"
    * totalcross.sys.Settings.appDescription: a brief application description. For instance, "Foo Task Force".

Basically, to install a TC application on iPhone, you have two choices. The first one is to do a manual install
and the other one is to support the package manager named "Installer".


Manual install
--------------

The "tc.Deploy ... -iphone" execution generates 3 files in a "install/iphone" folder.
One file is a package description file ".plist" that describes the package install/uninstall/update operations and
provides many information about the package. This file will be used in the second method only (installer support)
and could be ignored. The second file is a rep.xml file that will also be used by the installer.
The third file is a zip file which is the standard package archive format used by the Installer tool.
The zip file has a file structure similar to the file structure of an installed applications. Thus, all you need
to do is to unzip the zip file on the iPhone filesystem like that:

scp MySample.zip root@iphone:/Applications ssh root@iphone cd /Applications unzip MySample.zip && rm MySample.zip

Miserably, the zip archive doesn't support file permissions and thus you have to apply manually file permissions.
Excetute the following commands:

chmod a+x /Applications/MySample.app/start /Applications/MySample.app/MySample

The latest step is to notify the SpringBoard about a package change.
The current solution is just to kill it to cause a SpringBoard refresh. Just enter:

killall SpringBoard

The new installed application should appear now.


"Installer" support
-------------------

This tool was the first package manager on the iPhone. It's configured to process a list of "sources" and each source
contains one or several softwares. You can add your own source by pressing the lower right "Sources" button, pressing
the "Edit" button and finaly pressing the "Add" button to enter your source URL.

As you can see, the URL have to start with http which is the unique supported protocol. Thus you will need a web server
such as Apache, IIS, etc. to deploy your TC application(s). Cancel the source adding since we are not yet ready to
enter a valid URL.

The source URL have to deliver a ".plist" content describing the source but also the list of available packages.
TC provides a tool (tc.tools.deployer.IPhoneBuildSource) to build that file by providing a list of folders as argument
where your iPhone apps have been deployed (each application consists in 2 files in "install/iphone").
The result is a "rep.xml" file that can be uploaded on your web server and you will provide as source URL in Installer
the URL to access this packages catalog file. Of course, in addition to this list of apps, you will also have to upload
all the applications to your web server. Just create a subfolder named "zips" in the folder containing rep.xml and copy
all your application's zip archives into it. The IPhoneBuildSource should be used when you want to provide to your user
many applications in your server, for example, the TCVM and your application. It allows the user to use a single source
to download the applications.

Optionally, you can use the installs/iphone/rep.xml and the zip files and copy them directly to your server. This rep.xml
will allow you to download only the application that was generated.

Now add your new source of applications to the Installer as described above, don't forgetting that the source url must contain
the rep.xml file (E.G.: http://www.mycompany.com/iphone/download/rep.xml) and once the source has been refreshed, you will
see your applications in the list of available apps, ready to be installed.
