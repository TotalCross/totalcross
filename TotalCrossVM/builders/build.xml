<?xml version="1.0" encoding="iso-8859-1"?>
<!--
/*********************************************************************************
 *  TotalCross Software Development Kit                                          *
 *  Copyright (C) 2000-2012 SuperWaba Ltda.                                      *
 *  All Rights Reserved                                                          *
 *                                                                               *
 *  This library and virtual machine is distributed in the hope that it will     *
 *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         *
 *                                                                               *
 *********************************************************************************/

IMPORTANT:
           SDK -> SDK WITH DEMO VIRTUAL MACHINES WITH TRIAL PERIOD
           VMS -> ONLY VIRTUAL MACHINES WITHOUT TRIAL PERIOD

-->

<project name="TotalCross SDK deploy" default="help" basedir=".">

<description>
   This file is used to deploy the TotalCross C based components.
</description>

<!-- import ANT Contrib -->
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
<taskdef resource="com/orangevolt/tools/ant/taskdefs.properties"/>
	
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   setup all build process properties.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<condition property="exe" value=".exe" else=""><os family="windows" /></condition>

<!-- load platform environment variables -->
<property environment="env"/>

<!-- compiler settings -->
<condition property="rootpath" value="${basedir}/../..">
	<os family="unix"/>
</condition>
<property name="rootpath"      value="p:"/> <!-- MUST BE ABSOLUTE PATH -->
<property file="${rootpath}/userpaths.properties"/>
<fail unless="msvc.path" message="Cannot find file ${rootpath}/userpaths.properties!"/>

<!-- javac settings -->
<property name="compile.listfiles"       value="no"/>
<property name="compile.target"          value="1.1"/>
<property name="compile.source"          value="1.2"/>
<property name="compile.debug"           value="yes"/>
<property name="compile.optimize"        value="yes"/>

<!-- IDEs and compilers project files -->
<property name="msvc.project.path" value="${basedir}/vc2008"/>
<property name="evc.project.path"  value="${basedir}/evc3"/>
<property name="gcc.project.path"  value="${basedir}/gcc-posix"/>
<property name="palm.project.path"  value="${basedir}/gcc-palm"/>
<property name="evc.project"       value="${evc.project.path}/TotalCross.vcw"/>
<property name="android.project.path" value="${basedir}/android"/>
<property name="android.temp"      value="${android.project.path}/apps/tcvm/deploy" />

<!-- properties regarding the TC paths -->
<property name="source.sdk.path"   value="${basedir}/../../TotalCrossSDK"/>
<property name="source.vms.path"   value="${basedir}/.."/>
<property name="base.temp.path"    value="${basedir}/../../../temp"/>
<property name="base.target.path"  value="${basedir}/../../../output/release"/>
<property name="target.sdk.path"   value="${base.target.path}/TotalCrossSDK"/>
<property name="target.vms.path"   value="${base.target.path}/TotalCrossVMS"/>
<property name="target.noras.path" value="${base.target.path}/TotalCrossVMS_NORAS"/>
<property name="tools"             value="${source.sdk.path}/etc/tools"/>

<property name="noras_dir"         value="${source.vms.path}/src/init/noras_ids" />

<condition property="android.sdk.path" value="P:/android-sdk-windows" else=""><os family="windows" /></condition>
<condition property="android.ndk.path" value="${env.EXTLIBS_HOME}/android-ndk-r8b" else=""><os family="windows" /></condition>
<property name="apk" value="${android.temp}/TotalCross.apk" />

<!-- installshield paths -->
<property file="${rootpath}/ishield.properties"/>

<!-- builder and iphone information -->
<property file="${rootpath}/buildserver.properties"/>

<mkdir dir="${source.sdk.path}/dist" />
	
<property name="BRANCH" value="master" />

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 getVersion
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->	
<loadfile srcfile="${source.sdk.path}/src/totalcross/sys/Settings.java" property="tc.version">
	<filterchain>
		<linecontains>
			<contains value="versionStr"/>
		</linecontains>
		<striplinebreaks/>
		<tokenfilter>
			<replacestring from="public" to=""/>
			<replacestring from="static" to=""/>
			<replacestring from="final" to=""/>
			<replacestring from="String" to=""/>
			<replacestring from="versionStr" to=""/>
			<replacestring from="=" to=""/>
			<deletecharacters chars='";'/>
			<trim/>
		</tokenfilter>
	</filterchain>
</loadfile>
<echo message="TotalCross version : '${tc.version}'"/>
	
<!-- this target displays a help message which documents this configuration file features -->

<target name="help" >
  <echo message="To see the possible targets, type 'ant -p'"/>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: makeNativeHT - updates the native methods hash table.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<target name="makeNativeHT" >
   <property name="path.to.prototypeGenerator" value="${base.temp.path}/nmPrototypeGenerator" />
   <mkdir dir="${path.to.prototypeGenerator}" />

   <javac
      srcdir="${source.sdk.path}/src/tc/tools/"
      encoding="ISO-8859-1"
      debug="${compile.debug}"
      optimize="${compile.optimize}"
      target="${compile.target}"
      source="${compile.source}"
      includes="NativeMethodsPrototypeGenerator.java"
      destdir="${path.to.prototypeGenerator}"
      nowarn="true"
    includeAntRuntime="false"
   />
   <java
      classname="tc.tools.NativeMethodsPrototypeGenerator"
      classpath="${path.to.prototypeGenerator}"
      fork="yes"
   >
      <arg line="makeNativeHT TC ${source.vms.path}\src\init ${source.vms.path}\src\nm\NativeMethods.txt" />
   </java>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildPalmOS5
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<target name="buildPalmOS5_launcher" >
    <echo message="GENERATING PALM OS 5 FILES - LAUNCHER"/>

    <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes"><arg line='--login -i ${palm.project.path}\launcher\runmake.sh'/></exec>
    <copy file="${palm.project.path}\Launcher\Launcher.prc" todir="${source.sdk.path}\etc\launchers\palm" overwrite="yes"/>
</target>

<target name="buildPalmOS5_sdk" >
   <antcall target="buildPalmOS5">
      <param name="release.type" value="demo" />
      <param name="palm.target.path" value="${target.sdk.path}" />
   </antcall>
</target>
   
<target name="buildPalmOS5_vms" >
   <antcall target="buildPalmOS5">
      <param name="release.type" value="release" />
      <param name="palm.target.path" value="${target.vms.path}" />
   </antcall>
</target>
   
<target name="buildPalmOS5_vms_noras" >
   <property name="norasid" value=""/>
   <antcall target="buildPalmOS5">
      <param name="release.type" value="noras ${norasid}" />
      <param name="palm.target.path" value="${target.noras.path}" />
   </antcall>
</target>

<target name="buildPalmOS5" >

   <echo message="GENERATING PALM OS 5 FILES - ${release.type}"/>
   
   <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes">
         <arg line='--login -i ${palm.project.path}\tcvm\clean.sh ${palm.project.path}\tcvm'/>
   </exec>
   <!-- Fork may fail on multi-processed machines, retry up to 5 times if the runmake fails. Timeouts at 2:30 minutes. -->
   <retry retrycount="5">
      <trycatch>
        <try>
           <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes" timeout="150000">
              <arg line='--login -i ${palm.project.path}\tcvm\runmake.sh ${palm.project.path}\tcvm -${release.type}'/>
           </exec>
        </try>
        <catch>
           <exec executable="cmd.exe">
              <arg line='kill arm-elf-gcc.exe'/>
           </exec>
        </catch>
      </trycatch>
   </retry>
   <mkdir dir="${palm.target.path}\dist\vm\palm"/>
   <copy file="gcc-palm/tcvm/TCVM.prc" todir="${palm.target.path}/dist/vm/palm" overwrite="yes"/>
   
   <property name="matchbox"    value="${source.sdk.path}\etc\tools\matchbox\MatchBox.exe"/>
   <exec executable="${matchbox}" failonerror="yes">
      <arg line='/palm /name "TotalCross Files for Palm OS" /readme palmreadme.txt /output ${palm.target.path}\dist\vm\palm\Install.exe /files ${palm.target.path}\dist\vm\palm\TCVM.prc ${source.sdk.path}\dist\vm\palm\TCBase.pdb ${source.sdk.path}\etc\fonts\TCFont.pdb ${source.sdk.path}\etc\fonts\TCFontOld.pdb'/>
   </exec>

</target>
   
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildWin32 - Generate the files for Windows 98 and beyond
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildWin32_vms" >
   <echo message="GENERATING WIN32 FILES - VMS"/>

   <exec executable="${msvc.path}" failonerror="yes">
      <arg line='${msvc.project.path}/TCVM.sln /project TCVM /rebuild "RAS Release|Win32"'/>
      <arg line='${msvc.project.path}/TCVM.sln /project Conduit /rebuild "RAS Release|Win32"'/>
   </exec>
</target>

<target name="buildWin32_vms_noras" >
   <echo message="GENERATING WIN32 FILES - VMS"/>
   <fail unless="norasid" />

   <exec executable="${msvc.path}" failonerror="yes">
      <env key="CL" value="/DNORASID=${norasid}" />
      <arg line='${msvc.project.path}/TCVM.sln /project TCVM /rebuild "NO RAS Release|Win32"'/>
      <arg line='${msvc.project.path}/TCVM.sln /project Conduit /rebuild "NO RAS Release|Win32"'/>
   </exec>
</target>

<target name="buildWin32_sdk" >
   <echo message="GENERATING WIN32 FILES - SDK"/>
   
   <exec executable="${msvc.path}" failonerror="yes">
      <arg line='${msvc.project.path}/TCVM.sln /project TCVM /rebuild "DEMO Release|Win32"'/>
      <arg line='${msvc.project.path}/TCVM.sln /project Conduit /rebuild "DEMO Release|Win32"'/>
   </exec>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildWinCE

       call evc commandline compiler
       Important: to be able to compile some of these files, you must delete wce211\bin
       and copy the wce300\bin to wce211\bin (thus, updating all old compilers to new versions)
       these folders are located under <program files>\Microsoft eMbedded Tools\EVC\

       Note that the compiler may hang at random step, you just press ^c and start over again. M$ things...
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildWinCE_vms" >

  <echo message="GENERATING WINCE FILES - VMS"/>

  <echo message="=> 1 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Release HPC2000"      /CEConfig="HPC 2000" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 2 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Release HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Release POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE MIPS) Release POCKETPC"    /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE SH3) Release POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_vms.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.vms.path}"/>
  </antcall>

</target>

<target name="buildWinCE_vms_noras" >

  <echo message="GENERATING WINCE FILES - VMS"/>
	<fail unless="norasid" />

  <echo message="=> 1 of 5"/>
	<exec executable="${evc.path}" failonerror="yes">
		<env key="CL" value="/DNORASID=${norasid}" />
		<arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras HPC2000"      /CEConfig="HPC 2000" /rebuild'/>
	</exec> <sleep seconds="2"/>
  <echo message="=> 2 of 5"/>
	<exec executable="${evc.path}" failonerror="yes">
		<env key="CL" value="/DNORASID=${norasid}" />
		<arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/>
	</exec> <sleep seconds="2"/>
  <echo message="=> 3 of 5"/>
	<exec executable="${evc.path}" failonerror="yes">
		<env key="CL" value="/DNORASID=${norasid}" />
		<arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras POCKETPC"     /CEConfig="Pocket PC" /rebuild'/>
	</exec> <sleep seconds="2"/>
  <echo message="=> 4 of 5"/>
	<exec executable="${evc.path}" failonerror="yes">
		<env key="CL" value="/DNORASID=${norasid}" />
		<arg line='${evc.project} /make "TotalCross - Win32 (WCE MIPS) Noras POCKETPC"    /CEConfig="Pocket PC" /rebuild'/>
	</exec> <sleep seconds="2"/>
  <echo message="=> 5 of 5"/>
	<exec executable="${evc.path}" failonerror="yes">
		<env key="CL" value="/DNORASID=${norasid}" />
		<arg line='${evc.project} /make "TotalCross - Win32 (WCE SH3) Noras POCKETPC"     /CEConfig="Pocket PC" /rebuild'/>
	</exec> <sleep seconds="2"/>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_noras.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.noras.path}"/>
  </antcall>

</target>

<target name="buildWinCE_vms_noras_PocketPC_ARM" >

  <echo message="GENERATING WINCE ARM FILES - SDK"/>
	<fail unless="norasid" />

  <!-- we have to generate the standard pocketpc/arm, because tcvm.lib is required to build the scanner projects. 
     CHANGING THIS DON'T FORGET TO UPDATE THE TARGET buildWinCE_sdk !
  -->
  <echo message="=> 1 of 6"/>
	<exec executable="${evc.path}" failonerror="yes">
		<env key="CL" value="/DNORASID=${norasid}" />
		<arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Noras POCKETPC"     /CEConfig="Pocket PC" /rebuild'/>
	</exec> <sleep seconds="2"/>	

  <echo message="=> 2 of 7"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "SocketScan - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 7"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "OpticonH16 - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 7"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Symbol - Win32 (WCE ARM) Release"         /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 7"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Motorola - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 6 of 7"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Dolphin - Win32 (WCE ARM) Release"        /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 7 of 7"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Bematech - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy todir="${target.noras.path}/dist/vm/wince" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/noras" excludes="**/Litebase.*" />
  </copy>
  <copy todir="${target.noras.path}/dist/vm/wince/PocketPC/ARM" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/ce/PocketPC/ARM" includes="OpticonH16.dll,SocketScan.dll,Symbol.dll,Dolphin.dll,Motorola.dll,Bematech.dll" />
  </copy>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_noras.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle_PocketPC_ARM">
   <param name="path.param" value="${target.noras.path}"/>
  </antcall>
</target>	
	
<target name="buildWinCE_sdk" >

  <echo message="GENERATING WINCE FILES - SDK"/>

  <!-- we have to generate the standard pocketpc/arm, because tcvm.lib is required to build the scanner projects. -->
  <echo message="=> 1 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM HPC2000"      /CEConfig="HPC 2000" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 2 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE MIPS) Demo MIPS POCKETPC"   /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE SH3) Demo SH3 POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <echo message="=> 6 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "SocketScan - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 7 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "OpticonH16 - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 8 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Symbol - Win32 (WCE ARM) Release"         /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 9 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Dolphin - Win32 (WCE ARM) Release"        /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>10 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Intermec - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>11 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Motorola - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>12 of 12"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Bematech - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_sdk.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.sdk.path}"/>
  </antcall>

</target>

<target name="buildWinCE_sdk_ARM" >

  <echo message="GENERATING WINCE FILES - SDK"/>

  <!-- we have to generate the standard pocketpc/arm, because tcvm.lib is required to build the scanner projects. -->
  <echo message="=> 3 of 11"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "TotalCross - Win32 (WCE ARM) Demo ARM POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <echo message="=> 6 of 11"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "SocketScan - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 7 of 11"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "OpticonH16 - Win32 (WCE ARM) Release"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 8 of 11"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Symbol - Win32 (WCE ARM) Release"         /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 9 of 11"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Dolphin - Win32 (WCE ARM) Release"        /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>10 of 11"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Intermec - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=>11 of 11"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Bematech - Win32 (WCE ARM) Release"       /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy todir="${target.sdk.path}/dist/vm/wince" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/demo" excludes="**/Litebase.*" />
  </copy>
  <copy todir="${target.sdk.path}/dist/vm/wince/PocketPC/ARM" preservelastmodified="yes" overwrite="true">
   <fileset dir="${evc.project.path}/ce/PocketPC/ARM" includes="OpticonH16.dll,SocketScan.dll,Symbol.dll,Dolphin.dll,Bematech.dll" />
  </copy>

  <copy file="${source.sdk.path}/etc/tools/makecab/totalcross_sdk.inf" tofile="${source.sdk.path}/etc/tools/makecab/totalcross.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle_PocketPC_ARM">
   <param name="path.param" value="${target.sdk.path}"/>
  </antcall>

</target>  
  
<target name="buildWinCECabsSingle">

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwiz.exe" failonerror="no">
  <arg line="totalcross.inf /cpu HPC2000_ARM HPC211_ARM PocketPC_ARM PocketPC_MIPS PocketPC_SH3"/>
  </exec>

  <!-- copy the cab files -->
  <move todir="${path.param}/dist/vm/wince">
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.cab" casesensitive="no"/>
  </move>

  <!-- copy bat and ini files -->
  <copy todir="${path.param}/dist/vm/wince" overwrite="yes" >
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="CEinstall.ini,_CEinstall-RunMe.bat,CEinstall_WMOBILE.ini,_CEinstall-RunMe_WMOBILE.bat,ceinstall*.*" casesensitive="no"/>
  </copy>

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwizsp.exe" failonerror="no">
  <arg line="totalcross.inf /cpu PocketPC_ARM"/>
  </exec>

  <!-- copy the cab files -->
  <move file="${source.sdk.path}/etc/tools/makecab/totalcross.PocketPC_ARM.CAB" tofile="${path.param}/dist/vm/wince/totalcross.WMobile_ARM.CAB" />

  <delete>
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.dat" casesensitive="no"/>
  </delete>

</target>

<target name="buildWinCECabsSingle_PocketPC_ARM">

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwiz.exe" failonerror="no">
  <arg line="totalcross.inf /cpu PocketPC_ARM"/>
  </exec>

  <!-- copy the cab files -->
  <move todir="${path.param}/dist/vm/wince">
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.cab" casesensitive="no"/>
  </move>

  <!-- copy bat and ini files -->
  <copy todir="${path.param}/dist/vm/wince" overwrite="yes" >
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="CEinstall.ini,_CEinstall-RunMe.bat,ceinstall*.*" casesensitive="no"/>
  </copy>

  <exec dir="${source.sdk.path}/etc/tools/makecab" executable="${source.sdk.path}/etc/tools/makecab/Cabwizsp.exe" failonerror="no">
  <arg line="totalcross.inf /cpu PocketPC_ARM"/>
  </exec>

  <!-- copy the cab files -->
  <move file="${source.sdk.path}/etc/tools/makecab/totalcross.PocketPC_ARM.CAB" tofile="${path.param}/dist/vm/wince/totalcross.WMobile_ARM.CAB" />

  <delete>
    <fileset dir="${source.sdk.path}/etc/tools/makecab" includes="*.dat" casesensitive="no"/>
  </delete>

</target>	

<!-- updates the file that stores the compilation date. -->
<target name="updateCompilerDate" >
   <tstamp />
   <echo message="Compiler date: ${DSTAMP}" />
   <concat destfile="${source.vms.path}/src/init/compilation.date">#define COMPILATION_DATE ${DSTAMP}${line.separator}</concat>
   <concat destfile="${source.sdk.path}/src/ras/CompilationDate4B.java">package ras; public class CompilationDate4B {public static final int COMPILATION_DATE = ${DSTAMP} ^ 12341234;}</concat>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: createSkeleton - Create the folders from scratch
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="createSkeleton" depends="updateCompilerDate" description="copy the changed files to the SDK">
   <delete dir="${base.target.path}/TotalCross*" failonerror="yes" />
   <mkdir dir="${target.sdk.path}/dist/vm"/>
   <mkdir dir="${target.vms.path}/dist/vm"/>
   <mkdir dir="${target.noras.path}/dist/vm"/>

   <echo message="Copying SDK"/>
   <copy todir="${target.sdk.path}" overwrite="yes" >
      <fileset dir="${source.sdk.path}"
         excludes=".*,.settings/**,src/tc/samples/app/activation/**,src/totalcross/android/**,src/**/*.html,**/subbuild.xml,etc/tools/bb/bin/sigtool.csk,etc/tools/bb/lib/**,etc/tools/bb/bin/sigtool.db,build.xml,*.bak,*.pdb,etc/obfuscator/**,src/tc/*.java,etc/fonts/**,etc/tools/makecab/totalcross*.inf,etc/scripts/**,etc/tools/makesis/**,**/CVS/**,output/**,docs/**,dist/**,src/ras/**,src/tc/test/**,src/tc/tools/**,src/totalcross/**/*4?.java,tc/*.java,src/totalcross/lang/**"/>
      </copy>
   <copy todir="${target.sdk.path}" file="${source.sdk.path}/license.txt" overwrite="yes"  />
   <copy file="${source.sdk.path}/docs/companion_resources/ant_build/build.xml" todir="${target.sdk.path}/docs" overwrite="yes" />
   <copy file="${source.sdk.path}/etc/tools/bb/lib/5.0.0/net_rim_api.jar" tofile="${target.sdk.path}/etc/tools/bb/lib/net_rim_api.jar" overwrite="true" />
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildSkeleton - Build the folders
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildSkeleton" >
   <!-- try to delete this, it may be blocked by the classpath referencing it -->
   <delete failonerror="true">
      <fileset dir="${source.sdk.path}/dist" includes="*.jar"/>
      </delete>

   <echo message="Building TotalCross SDK"/>
   <ant antfile="build.xml" dir="${source.sdk.path}" target="clean"           inheritAll="false"/>
   <ant antfile="build.xml" dir="${source.sdk.path}" target="build"           inheritAll="false"/>
   <ant antfile="build.xml" dir="${source.sdk.path}" target="javadoc"         inheritAll="false"/>

   <!-- copy the changed files to the release folder -->
   <mkdir dir="${target.sdk.path}/dist/vm" />
   <copy todir="${target.sdk.path}/docs/html"> <fileset dir="${source.sdk.path}/docs/html" /></copy>
   <copy todir="${target.sdk.path}/dist/vm/palm" file="${source.sdk.path}/dist/vm/palm/TCBase.pdb" />
   <copy todir="${target.sdk.path}/dist/vm/palm" file="${source.sdk.path}/etc/fonts/TCFont.pdb" />
   <copy todir="${target.sdk.path}/dist/vm/palm" file="${source.sdk.path}/etc/fonts/TCFontOld.pdb" />
   <copy todir="${target.sdk.path}/dist/vm/win32" file="${source.sdk.path}/dist/vm/win32/TCSyncLib.tcz" />
   <copy todir="${target.sdk.path}/dist/vm"> <fileset dir="${source.sdk.path}/dist/vm" includes="*.tcz" /></copy>
   <copy todir="${target.sdk.path}/dist" file="${source.sdk.path}/dist/tc.jar" />
   <copy todir="${target.sdk.path}/dist" file="${source.sdk.path}/dist/tcweb.jar" />
</target>

<target name="buildSamples_sdk" >
  <ant antfile="build.xml" dir="${source.sdk.path}" target="samples"         inheritAll="false"/>
  <copy toDir="${target.sdk.path}/dist/samples"> <fileset dir="${source.sdk.path}/dist/samples" /></copy>
</target>

<target name="buildJava_sdk" >

  <ant antfile="build.xml" dir="${source.sdk.path}" target="clean" inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="desktop" inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="desktop_web" inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.sdk.path}" target="device" inheritAll="false"/>

  <copy toDir="${target.sdk.path}/dist">
   <fileset dir="${source.sdk.path}/dist" includes="*.jar"/>
  </copy>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
   BlackBerry builds
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildBB_sdk" >

  <ant antfile="build.xml" dir="${source.sdk.path}" target="blackberry_sdk" inheritAll="false"/>

  <mkdir dir="${target.sdk.path}/dist/vm" />
  <copy todir="${target.sdk.path}/dist/vm" overwrite="true">
    <fileset dir="${source.sdk.path}/dist/vm" includes="bb*/**" />
  </copy>

</target>

<target name="buildBB_vms" >

  <ant antfile="build.xml" dir="${source.sdk.path}" target="blackberry_vms" inheritAll="false"/>

  <copy todir="${target.vms.path}/dist/vm" overwrite="true">
    <fileset dir="${source.sdk.path}/dist/vm" includes="bb*/**" />
  </copy>

</target>

<target name="buildBB_vms_noras" >

  <ant antfile="build.xml" dir="${source.sdk.path}" target="blackberry_vms_noras" inheritAll="false"/>

  <copy todir="${target.noras.path}/dist/vm" overwrite="true">
    <fileset dir="${source.sdk.path}/dist/vm" includes="bb*/**" />
  </copy>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildInstalls - run installshield to create the SDK and Samples
        installers for win32
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildInstalls" >

  <property name="target.file"  value="${target.path}/../TotalCross${type}${file_suffix}"/>

  <!-- delete old files -->
  <delete file="${target.file}.exe" />

  <!-- update readme files -->
  <copy file="${type}_sfx.diz" toDir="${rootpath}/">
    <filterset>
      <filter token="VERSION" value="${tc.version}"/>
    </filterset>
  </copy>

  <echo message="Creating ${target.file} file..."/>
  <!-- create the splitted rar then the full sfx -->
  <exec dir="${rootpath}/" executable="${winrar.path}/rar.exe" failonerror="yes"><arg line='a -sfx -y -ep1 -m5 -r -s -idq -z${type}_sfx.diz ${target.file} ${target.path}\*.*'/></exec>

  <!-- delete temp files -->
  <delete file="${rootpath}/${type}_sfx.diz"/>

</target>

<target name="buildInstalls_sdk" >
  <copy file="${source.sdk.path}/etc/launchers/ios/Launcher" todir="${target.sdk.path}/etc/launchers/ios" overwrite="true" />
  <antcall target="buildInstalls">
      <param name="type" value="SDK" />
      <param name="file_suffix" value="" />
      <param name="target.path" value="${target.sdk.path}" />
  </antcall>
</target>

<target name="buildInstalls_vms" >
  <antcall target="buildInstalls">
      <param name="type" value="VMS" />
      <param name="file_suffix" value="" />
      <param name="target.path" value="${target.vms.path}" />
  </antcall>
</target>

<target name="buildInstalls_vms_noras" >
  <antcall target="buildInstalls">
      <param name="type" value="VMS_NORAS" />
      <param name="file_suffix" value="${norasid}" />
      <param name="target.path" value="${target.noras.path}" />
  </antcall>
   <copy file="${noras_dir}/noras_none.inc" tofile="${noras_dir}/noras.inc" overwrite="yes" />
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: IPhone builds

  1. build the tcvm, launcher
  2. copy the launcher
  3. copy the tcvm & tcpriv
  4. create a rep for the tcvm and the samples
  5. ftp to the sw.com.br
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<target name="build-theos-launcher">
   <property name="remote.path" value="~/ios_workspace/theos-launcher/${env.COMPUTERNAME}" />
   <property name="launcher.path" value="${target.sdk.path}/etc/launchers/iphone2" />

   <tar
      basedir="${basedir}/../../.."
      includes="TotalCross/TotalCrossVM/builders/theos/**, TotalCross/TotalCrossVM/src/**"
      destfile="${base.temp.path}/Launcher_theos.tgz"
      compression="gzip"
      longfile="gnu" />
   <sshexec command="
      rm -Rf ${remote.path};
      mkdir -p ${remote.path}"
      host="${macserver.host}" trust="yes" password="${buildserver.pass}" port="22" username="${buildserver.user}" />
   <scp
      file="${base.temp.path}/Launcher_theos.tgz"
      todir="${buildserver.user}@${macserver.host}:${remote.path}/"
      trust="yes" password="${buildserver.pass}" port="22" />

   <sshexec command="
      tar -zxpf ${remote.path}/Launcher_theos.tgz -C ${remote.path};
      bash -l ${remote.path}/TotalCross/TotalCrossVM/src/launchers/darwin/build.sh;"
      host="${macserver.host}" trust="yes" password="${buildserver.pass}" port="22" username="${buildserver.user}" />

   <mkdir dir="${launcher.path}" />
   <scp file="${buildserver.user}@${macserver.host}:${remote.path}/TotalCross/TotalCrossVM/src/launchers/darwin/obj/Launcher" todir="${launcher.path}" trust="yes" password="${buildserver.pass}" port="22" />
</target>

<target name="buildIPhone_sdk_base" >
  <if><equals arg1="${iphone.build_clean}" arg2="YES" /><then>
    <property name="arg_clean" value="-clean" />
    <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  </then>
  <else>
    <property name="arg_clean" value="" />
  </else>
  </if>
  
  <if><equals arg1="${type}" arg2="noras" /><then>
    <fail unless="norasid" />
  </then>
  </if>
  
    <if><equals arg1="${type}" arg2="demo" /><then>
      <property name="extra_args" value="-demo" />
    </then>
    <elseif><equals arg1="${type}" arg2="noras" /><then>
      <fail unless="norasid"/>
      <property name="extra_args" value="-noras ${norasid}" />
    </then></elseif>
   <elseif><equals arg1="${type}" arg2="release" /><then>
     <property name="extra_args" value="" />
   </then></elseif>
    </if>
  
  <sshexec command="bash -l ~/build.sh -tcvm -2 -force ${arg_clean} ${extra_args} -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="ios_build">
   <fail unless="build.name" />
   <fail unless="build.includes" />
   <fail unless="copy.from" />
   <fail unless="copy.to" />

   <property name="remote.path" value="~/ios_workspace/${build.name}/${env.COMPUTERNAME}" />

   <tar
      basedir="${basedir}/../../.."
      includes="${build.includes}"
      destfile="${base.temp.path}/TotalCross_${build.name}.tgz"
      compression="gzip"
      longfile="gnu" />
   <sshexec command="
      rm -Rf ${remote.path};
      mkdir -p ${remote.path}"
      host="${macserver.host}" trust="yes" password="${buildserver.pass}" port="22" username="${buildserver.user}" />
   <scp
      file="${base.temp.path}/TotalCross_${build.name}.tgz"
      todir="${buildserver.user}@${macserver.host}:${remote.path}/"
      trust="yes" password="${buildserver.pass}" port="22" />

   <sshexec command="
      tar -zxpf ${remote.path}/TotalCross_${build.name}.tgz -C ${remote.path};
      bash -l ${remote.path}/TotalCross/TotalCrossVM/builders/${build.name}/build.sh -clean -r demo -p ${buildserver.pass}"
      host="${macserver.host}" trust="yes" password="${buildserver.pass}" port="22" username="${buildserver.user}" />

   <mkdir dir="${copy.to}" />
   <scp file="${buildserver.user}@${macserver.host}:${remote.path}/TotalCross/TotalCrossVM/builders/${build.name}/${copy.from}" todir="${copy.to}" trust="yes" password="${buildserver.pass}" port="22" />
</target>

<target name="ios_theos" >
   <antcall target="ios_build">
      <param name="build.name"      value="theos" />
      <param name="build.includes"  value="TotalCross/TotalCrossVM/builders/theos/**, TotalCross/TotalCrossVM/src/**" />
      <param name="copy.from"       value="demo/libtcvm.dylib" />
      <param name="copy.to"         value="${basedir}/theos/demo" />
   </antcall>
</target>

<target name="ios_xcode" >
   <antcall target="ios_build">
      <param name="build.name"      value="xcode" />
      <param name="build.includes"  value="TotalCross/TotalCrossVM/src/**, TotalCross/TotalCrossVM/builders/xcode/**, Litebase/LitebaseSDK/src/native/**, Litebase/LitebaseSDK/builders/xcode/**" />
      <param name="copy.from"       value="build/Release-iphoneos/TotalCross.ipa" />
      <param name="copy.to"         value="${source.sdk.path}/dist/vm/ios" />
   </antcall>
   <antcall target="invalidate-ipas">
      <param name="ipa.files"      value="${source.sdk.path}/dist/vm/ios/TotalCross.ipa" />
   </antcall>
</target>

<target name="invalidate-ipas" >
   <property name="path.to.invalidator" value="${base.temp.path}/invalidator" />
   <mkdir dir="${path.to.invalidator}" />
   <property name="ipa.files" value="${target.sdk.path}\dist\vm\ios\TotalCross.ipa ${target.vms.path}\dist\vm\ios\TotalCross.ipa ${target.noras.path}\dist\vm\ios\TotalCross.ipa" />

   <javac
      srcdir="${source.sdk.path}/src/tc/tools/"
      encoding="ISO-8859-1"
      debug="${compile.debug}"
      optimize="${compile.optimize}"
      target="${compile.target}"
      source="${compile.source}"
      includes="InvalidateIPA.java, deployer/ipa/**"
      destdir="${path.to.invalidator}"
      nowarn="true"
    includeAntRuntime="false"
   >
      <classpath>
         <pathelement location="${tools}/bb/lib/net_rim_api_without_java.jar"/>
         <pathelement location="${tools}/jdeb/lib/ant.jar"/>
         <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
         <pathelement location="${tools}/ipa/bcpkix-jdk15on-147.jar"/>
         <pathelement location="${tools}/ipa/bcprov-jdk15on-147.jar"/>
         <pathelement location="${tools}/ipa/commons-io-2.2.jar"/>
         <pathelement location="${tools}/ipa/dd-plist.jar"/>
         <pathelement location="${tools}/ipa/truezip-driver-file-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-driver-zip-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-file-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-kernel-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-swing-7.5.1.jar"/>
      </classpath>
   </javac>
   <java
      classname="tc.tools.InvalidateIPA"
      fork="yes"
   >
      <classpath>
         <pathelement location="${path.to.invalidator}"/>
         <pathelement location="${tools}/bb/lib/net_rim_api_without_java.jar"/>
         <pathelement location="${tools}/jdeb/lib/ant.jar"/>
         <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
         <pathelement location="${tools}/ipa/bcpkix-jdk15on-147.jar"/>
         <pathelement location="${tools}/ipa/bcprov-jdk15on-147.jar"/>
         <pathelement location="${tools}/ipa/commons-io-2.2.jar"/>
         <pathelement location="${tools}/ipa/commons-compress-1.4.jar"/>
         <pathelement location="${tools}/ipa/dd-plist.jar"/>
         <pathelement location="${tools}/ipa/truezip-driver-file-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-driver-zip-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-file-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-kernel-7.5.1.jar"/>
         <pathelement location="${tools}/ipa/truezip-swing-7.5.1.jar"/>
      </classpath>
      <arg line="${tools} ${ipa.files}" />
   </java>
</target>

<target name="buildIPhone_sdk_clean" >
  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />

  <sshexec command="bash -l ~/build.sh -tcvm -2 -force -clean -demo -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="buildIPhone_sdk" >
  <sshexec command="bash -l ~/build.sh -tcvm -2 -demo -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="copyIPhoneTestToDevice" >

  <!-- iphone 2 -->
  <scp todir="${iphone.user}:${iphone.pass}@${iphone.ip}:/var/mobile" host="${iphone.ip}" username="${iphone.user}" password="${iphone.pass}" port="22" trust="yes">
    <fileset dir="${target.path}/dist/vm/ios">
      <include name="**/*.deb"/>
    </fileset>
  </scp>
  <sshexec command="dpkg -i /var/mobile/TotalCross.deb" host="${iphone.ip}" username="${iphone.user}" password="${iphone.pass}" port="22" trust="yes"/>
  <sshexec command="killall SpringBoard" host="${iphone.ip}" username="${iphone.user}" password="${iphone.pass}" port="22" trust="yes"/>

</target>
	
<target name="copyIPhoneLauncher_sdk" >
   <if><equals arg1="${iphone.version_2}" arg2="YES" /><then>
      <scp file="${buildserver.tc.iphone2.path}/demo/Launcher" todir="${source.sdk.path}/etc/launchers/iphone2" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
   </then></if>
</target>

<target name="copyIPhoneTCVM" >

  <!-- iphone 2 -->
  <java classname="tc.tools.deployer.IPhoneBuildNatives" fork="yes" dir="${base.temp.path}" failonerror="true">
    <classpath>
        <pathelement location="${base.temp.path}/classes_desktop"/>
        <pathelement location="${tools}/jdeb/lib/ant.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
    </classpath>
    <arg line="-n TotalCross"/>
    <arg line="-c 'TotalCross VM'"/>
    <arg line="-d 'The TotalCross Virtual Machine'"/>
    <arg line="-v ${tc.version}"/>
    <arg line="-b ${basedir}/theos/${type}/libtcvm.dylib"/>
    <arg line="-t ${target.path}/dist/vm/ios"/>
    <arg value="${source.sdk.path}/dist/vm/TCBase.tcz"/>
    <arg value="${source.sdk.path}/etc/fonts/TCFont.tcz"/>
    <arg value="${source.sdk.path}/etc/fonts/TCFontOld.tcz"/>
  </java>

  <!-- package the files -->
  <mkdir dir="${target.path}/dist/vm/ios"/>
  <java classname="tc.tools.deployer.IPhoneBuildSource" fork="yes" dir="${target.path}/dist/vm/ios">
    <classpath>
        <pathelement location="${base.temp.path}/classes_desktop"/>
        <pathelement location="${tools}/jdeb/lib/ant.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
    </classpath>
    <arg line="."/>
  </java>

</target>

<target name="copyIPhoneTestToDevice_sdk" >
   <antcall target="copyIPhoneTestToDevice">
      <param name="type" value="demo" />
      <param name="target.path" value="${target.sdk.path}" />
   </antcall>
</target>

<target name="copyIPhoneTestToDevice_vms" >
   <antcall target="copyIPhoneTestToDevice">
      <param name="type" value="release" />
      <param name="target.path" value="${target.vms.path}" />
   </antcall>
</target>

<target name="copyIPhoneTCVM_sdk" >
   <antcall target="copyIPhoneTCVM">
      <param name="type" value="demo" />
      <param name="target.path" value="${target.sdk.path}" />
   </antcall>
</target>

<target name="copyIPhoneTCVM_vms" >
   <echo message="retrieve remote release builds" />
  <antcall target="copyIPhoneTCVM">
      <param name="type" value="ras" />
      <param name="target.path" value="${target.vms.path}" />
  </antcall>
</target>
   
<target name="copyIPhoneTCVM_vms_noras" >
   <echo message="retrieve remote NORAS release builds" />
   <antcall target="copyIPhoneTCVM">
       <param name="type" value="noras_${norasid}" />
       <param name="target.path" value="${target.noras.path}" />
   </antcall>
</target>   

<target name="buildIPhone_vms" >

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -2 -force -clean -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />

  <antcall target="copyIPhoneTCVM_vms" />

</target>

<target name="buildIPhone_vms_noras" >

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -2 -force -clean -noras ${norasid} -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
  
   <antcall target="copyIPhoneTCVM_vms_noras" />

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: Linux builds

  1. build the tcvm, launcher
  2. copy the launcher
  3. copy the tcvm
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildLinux_sdk_clean" >
  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />

  <sshexec command="bash -l ~/build.sh -tcvm -linux -force -clean -demo -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="buildLinux_sdk" >
  <sshexec command="bash -l ~/build.sh -tcvm -linux -demo -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="copyLinuxLauncher_sdk" >
  <scp file="${buildserver.tc.linux.path}/demo/Launcher" todir="${source.sdk.path}/etc/launchers/linux" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
</target>

<target name="packageLinux" >
  <java classname="tc.tools.deployer.LinuxBuildNatives" fork="yes" dir="${base.temp.path}" failonerror="true">
    <classpath>
        <pathelement location="${base.temp.path}/classes_desktop"/>
        <pathelement location="${tools}/jdeb/lib/ant.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
        <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
    </classpath>
    <arg line="-n TotalCross"/>
    <arg line="-c 'TotalCross VM'"/>
    <arg line="-d 'The TotalCross Virtual Machine'"/>
    <arg line="-v ${tc.version}"/>
    <arg line="-b ${gcc.project.path}/tcvm/linux/${type}/libtcvm.so"/>
    <arg line="-t ${target.path}/dist/vm/linux"/>
    <arg value="${source.sdk.path}/dist/vm/TCBase.tcz"/>
    <arg value="${source.sdk.path}/etc/fonts/TCFont.tcz"/>
    <arg value="${source.sdk.path}/etc/fonts/TCFontOld.tcz"/>
  </java>
</target>

<target name="packageLinux_sdk" >
   <antcall target="packageLinux">
      <param name="type" value="demo" />
      <param name="target.path" value="${target.sdk.path}" />
   </antcall>
</target>
	
<target name="packageLinux_vms" >
   <antcall target="packageLinux">
    <param name="type" value="release" />
    <param name="target.path" value="${target.vms.path}" />
   </antcall>
</target>
   
<target name="packageLinux_vms_noras" >
   <antcall target="packageLinux">
       <param name="type" value="noras" />
       <param name="target.path" value="${target.noras.path}" />
   </antcall>
</target>   

<target name="buildLinux_vms" >

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -linux -force -clean -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />

  <antcall target="packageLinux_vms" />

</target>

<target name="buildLinux_vms_noras" >

  <!-- copy the changed compilation date to the build server. it will be copied to the correct folder after the cvs is updated -->
  <scp file="${source.vms.path}/src/init/compilation.date" todir="${buildserver.tc.path}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" />
  <sshexec command="bash -l ~/build.sh -tcvm -linux -force -clean -noras ${norasid} -branch ${BRANCH}" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
   
   <antcall target="packageLinux_vms_noras" />
   
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: Android builds
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="clean_android_native" description="Cleans the native files for Android" >
  <delete dir="${base.temp.path}/android/TotalCross" failonerror="false" />
</target>

<target name="build_android_native" description="Compiles libtcvm.so for Android">
   <property name="type" value="demo" />
   <exec dir="${source.vms.path}/src" executable="cmd.exe" failonerror="true">
      <env key="TYPE" value="${type}" />
      <env key="NDK_OUT" value="${base.temp.path}/android/TotalCross/${TYPE}" />
      <env key="NORASID" value="${norasid}" />
      <arg line="/c ${android.ndk.path}/ndk-build"/>
   </exec>
  <sleep seconds="3"/>
</target>

<target name="build_android_java" description="Builds the TotalCross.apk for Android">
  
  <echo message="Assuming that the Android launcher is up-to-date. If its not, run P:\TotalCrossVM\src\launchers\android\makelauncher_jar.bat" />
  <!-- create the temp folder -->
  <delete dir="${android.temp}" failonerror="false" />
  <mkdir dir="${android.temp}" />

	<ant antfile="build.xml" dir="${android.project.path}/apps/tcvm" target="clean" inheritAll="false"/>
	<ant antfile="build.xml" dir="${android.project.path}/apps/tcvm" target="release" inheritAll="false"/>

  <!-- test if the apk contains the needed files -->
  <delete dir="${android.temp}/apk" />
  <unjar src="${apk}" dest="${android.temp}/apk" overwrite="yes"/>
  <available file="${android.temp}/apk/META-INF/TCANDROI.SF" property="apk.is.signed"/>
  <fail unless="apk.is.signed" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: NOT SIGNED. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/AndroidManifest.xml" property="apk.has.xml"/>
  <fail unless="apk.has.xml" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: XML NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/classes.dex" property="apk.has.dex"/>
  <fail unless="apk.has.dex" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: DEX NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <delete dir="${android.temp}/apk" />

</target>

<target name="build_android"  depends="build_android_native" description="Compiles libtcvm.so and builds the TotalCross.apk for Android" >
   <copy todir="${android.project.path}/apps/tcvm/libs" overwrite="true" >
      <fileset dir="${source.vms.path}/src/jni/libs" >
         <include name="**/*.so" />
      </fileset>
   </copy>
  <retry retrycount="3">
    <antcall target="build_android_java" />
  </retry>
</target>

<target name="adb" description="Just installs TotalCross on Android (no build is performed)." >
  <property name="apk" value="${apk}" />
  <exec executable="adb${exe}" >
   <arg line="install -r ${apk}" />
  </exec>
</target>

<target name="install_android" depends="buildAndroid_sdkNoClean,adb" description="Builds and installs TotalCross on Android." />

<target name="buildAndroid_sdkNoClean">
  <delete dir="${android.project.path}/out/src" />
  <antcall target="build_android" >
	<param name="type" value="demo" />
	</antcall>	
  <copy file="${android.temp}/TotalCross.apk" todir="${target.sdk.path}/dist/vm/android" overwrite="true" />
  <copy file="${android.temp}/AndroidManifest_singleapk.xml" todir="${target.sdk.path}/etc/tools/android" />
  <copy file="${android.temp}/resources_singleapk.arsc"      todir="${target.sdk.path}/etc/tools/android" />
</target>   

<target name="buildAndroid_sdk" depends="clean_android_native,buildAndroid_sdkNoClean" />

<target name="buildAndroid_vms" depends="clean_android_native">
  <delete dir="${android.project.path}/out/src" />
  <antcall target="build_android" >
	<param name="type" value="release" />
	</antcall>	
  <copy file="${android.temp}/TotalCross.apk" todir="${target.vms.path}/dist/vm/android" overwrite="true" />
</target>   

<target name="buildAndroid_vms_noras" depends="clean_android_native">
  <delete dir="${android.project.path}/out/src" />
  <property name="norasid" value=""/>
  <antcall target="build_android" >
	<param name="type" value="noras" />
	</antcall>
  <copy file="${android.temp}/TotalCross.apk" todir="${target.noras.path}/dist/vm/android" overwrite="true" />
</target>   

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: companion

-description:
        Converts the TotalCross companion file
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="companion" description="Generates the PDF for TotalCross Companion">
   <ant antfile="build.xml" dir="${source.sdk.path}/.." target="jodconverter" inheritAll="false">
      <property name="from" value="${source.sdk.path}/docs/TotalCross Companion.odt" />
      <property name="to" value="${target.sdk.path}/docs/TotalCross Companion.pdf" />
   </ant>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: ftp things to the site
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="ftp_demo_vms" >

  <property file="${rootpath}/swcombr.properties"/>
  <property name="temp" value="${source.sdk.path}/output/tempftp"/>
  <property name="vm.dir" value="${target.sdk.path}/dist/vm"/>
  <mkdir dir="${temp}" />

  <zip destfile="${temp}/tc_bb430.zip" compress="true" filesonly="true" basedir="${vm.dir}/bb/4.3.0" includes="TotalCross.alx,TotalCross.cod" />
  <zip destfile="${temp}/tc_bb470.zip" compress="true" filesonly="true" basedir="${vm.dir}/bb/4.7.0" includes="TotalCross.alx,TotalCross.cod" />
  <zip destfile="${temp}/tc_bb500.zip" compress="true" filesonly="true" basedir="${vm.dir}/bb/5.0.0" includes="TotalCross.alx,TotalCross.cod" />
  <zip destfile="${temp}/tc_palm5.zip" compress="true" filesonly="true" basedir="${vm.dir}/palm" includes="TCBase.pdb,TCFont.pdb,TCFontOld.pdb,TCVM.prc" />
  <zip destfile="${temp}/tc_win32.zip" compress="true" >
    <zipfileset dir="${vm.dir}/win32" includes="TCSync.dll,TCSyncLib.tcz,TCVM.dll" />
    <zipfileset dir="${vm.dir}" includes="TCBase.tcz,TCFont.tcz,TCFontOld.tcz" />
  </zip>
  <zip destfile="${temp}/tc_android.zip" compress="true" filesonly="true" basedir="${vm.dir}/android" />
  <copy todir="${temp}"><fileset dir="${vm.dir}/ios" includes="*.deb"/><globmapper from="*.deb" to="*.zip"/></copy>
  <copy todir="${temp}"><fileset dir="${vm.dir}/linux"    includes="*.deb"/><globmapper from="*.deb" to="*.zip"/></copy>
  
  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="superwaba.com.br/vms" verbose="yes">
     <fileset dir="${vm.dir}/wince" includes="*.CAB" />
     <fileset dir="${temp}" />
  </ftp>

  <delete dir="${temp}" />

</target>

<target name="ftp_javadoc" >

  <property file="${rootpath}/swcombr.properties"/>

  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" action="del" >
   <fileset includes="totalcross.com/doc/**" />
  </ftp>

  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="totalcross.com/doc" verbose="yes">
     <fileset dir="${target.sdk.path}/docs/html" />
  </ftp>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: checks if we must update the versions of the files prior to a build.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="checkVersionOnProjects" >
 <loadfile srcfile="${msvc.project.path}/TCVM.vcproj" property="version.updated">
   <filterchain>
     <linecontains>
       <contains value='Version="${tc.version}"'/>
     </linecontains>
   </filterchain>
 </loadfile>

  <fail unless="version.updated" message="************************************* Please update the project version information on vc2008, EVC, gcc-arm/vm/resources.rcp!!! **********"/>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: builds NORAS sdks for all companys.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildPostInstall" >

  <property name="temp" value="${base.temp.path}/classes_desktop" />
  <javac srcdir="${source.sdk.path}/src/tc/tools" destdir="${temp}" target="1.1" source="1.2" includes="PostInstall.java" debug="true" includeAntRuntime="false" />

  <java classname="tc.Deploy" fork="yes" dir="${temp}">
	<env key="TOTALCROSS_HOME" value="${source.sdk.path}"/>
   <classpath>
     <pathelement location="${temp}"/>
   </classpath>
   <arg line="PostInstall.class -win32"/>
  </java>
  
  <copy file="${temp}\install\win32\PostInstall.exe" todir="${target.sdk.path}" />
  <copy file="${temp}\install\win32\PostInstall.tcz" todir="${target.sdk.path}" />

</target>

<target name="ftp_sdk">
  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="files" verbose="yes" retriesAllowed="3">
     <fileset dir="${rootpath}/releases" includes="*.exe" />
  </ftp>
</target>
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: build targets
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="iphone2_test" description="Update the SDK device, builds and upload iPhone 2 to the device">
   <property name="type" value="demo" />
   <property name="target.path" value="${target.sdk.path}" />
   <antcall target="build_iphone" />
   <antcall target="copyIPhoneTCVM" />
   <antcall target="copyIPhoneTestToDevice" />
</target>
  
<target name="build_iphone" >
  <fail unless="type" />
  <antcall target="buildIPhone_sdk_base" />
  <antcall target="copyIPhoneLauncher_sdk" />
</target>
 
<target name="iphone_test" depends="buildIPhone_sdk,copyIPhoneLauncher_sdk,copyIPhoneTCVM_sdk,copyIPhoneTestToDevice_sdk" description="Update the SDK device and samples, rebuild and upload iPhone to the device" />
<target name="ftp" depends="ftp_demo_vms,ftp_sdk,ftp_javadoc" description="FTP the iphone sdk and javadoc" />
</project>
