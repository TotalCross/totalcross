#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\begin_preamble
%used by the cover
\usepackage{graphicx}

%used to insert tab stops in itemize or enumerate
\usepackage{tabto}

\usepackage[utf8]{inputenc}
\DeclareUnicodeCharacter{2190}{\ifmmode \leftarrow \else \textleftarrow \fi} % override

% T1 Helvetica scaled
\usepackage[T1]{fontenc}
\usepackage[scaled]{helvet}
\renewcommand*{\familydefault}{\sfdefault}

% Chapter style
\usepackage{xcolor,calc}

\makechapterstyle{combined}{
  \setlength{\beforechapskip}{30pt}
  \setlength{\midchapskip}{-60pt}
  \setlength{\afterchapskip}{60pt}
  \renewcommand*{\printchaptername}{}
  \renewcommand*{\chapnumfont}{\normalfont\sffamily\bfseries\fontsize{80}{0}\selectfont}
  \renewcommand*{\printchapternum}{\flushright\chapnumfont\textcolor[rgb]{.64,.79,.87}{\thechapter}}
  \renewcommand*{\chaptitlefont}{\normalfont\sffamily\Huge\bfseries}
  \renewcommand*{\printchaptertitle}[1]{%
    \raggedright\chaptitlefont\parbox[t]{\textwidth-3cm}{\raggedright##1}}
}

\chapterstyle{combined}

% Code listing
\usepackage{listings,color}

\definecolor{dkgreen}{RGB}{63,127,95}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{light-gray}{rgb}{0.925,0.925,0.925}
\definecolor{mauve}{RGB}{127,0,85}

 \lstset{
        language=Java,
        backgroundcolor=\color{light-gray},
         basicstyle=\footnotesize\ttfamily, % Standardschrift
         numbers=left,               % Ort der Zeilennummern
         numberstyle=\tiny,          % Stil der Zeilennummern
         %stepnumber=2,               % Abstand zwischen den Zeilennummern
         numbersep=5pt,              % Abstand der Nummern zum Text
         tabsize=2,                  % Groesse von Tabs
         extendedchars=true,         %
         breaklines=true,            % Zeilen werden Umgebrochen
        emph={LEFT,RIGHT,CENTER,TOP,BOTTOM,FILL,FIT,CENTER_OF,BOTTOM_OF,AFTER,BEFORE},
        emphstyle=\color{blue}\textit,
         keywordstyle=\color{mauve}\textbf,
         frame=b,
 %        keywordstyle=[2]\textbf,    % Stil der Keywords
 %        keywordstyle=[2]\textbf,    %
 %        keywordstyle=[3]\textbf,    %
 %        keywordstyle=[4]\textbf,   \sqrt{\sqrt{}} %
         commentstyle=\color{dkgreen},       % comment style
         stringstyle=\color{blue},         % string literal style
  %       stringstyle=\color{white}\ttfamily, % Farbe der String
         showspaces=false,           % Leerzeichen anzeigen ?
         showtabs=false,             % Tabs anzeigen ?
         xleftmargin=17pt,
         framexleftmargin=17pt,
         framexrightmargin=5pt,
         framexbottommargin=4pt,
         %backgroundcolor=\color{lightgray},
         showstringspaces=false      % Leerzeichen in Strings anzeigen ?        
 }
 \lstloadlanguages{% Check Dokumentation for further languages ...
         %[Visual]Basic
         %Pascal
         %C
         %C++
         %XML
         %HTML
         Java
 }
    %\DeclareCaptionFont{blue}{\color{blue}} 

  %\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
  \usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% New style chapter star, so we can have unumbered chapters to show in ToC
\newcommand{\tocchap}[1]{\addcontentsline{toc}{chapter}{\protect\numberline
{}#1}\markboth{\textsc{#1}}{\textsc{#1}}\thispagestyle{plain}}
\newcommand{\chapterstar}[1]{\chapter*{#1}\tocchap{#1}}

% Sections are not numbered
\setcounter{secnumdepth}{0}

% Vertical gap between paragraphs
\setlength{\parskip}{\medskipamount}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\begin_local_layout
Style Chapterstar
Copystyle Chapter
LatexName chapterstar
LabelType Top_Environment
LabelString "Unnumbered chapter"
LabelFont
Series Bold
Size LARGE
EndFont
End
\end_local_layout
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_title "Litebase Companion"
\pdf_author "SuperWaba"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=black"
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 4cm
\footskip 1cm
\secnumdepth 0
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language swedish
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage 
\end_layout

\begin_layout Plain Layout

%% temporary titles  
\end_layout

\begin_layout Plain Layout

% command to provide stretchy vertical space in proportion 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand
\backslash
nbvspace[1][3]{
\backslash
vspace*{
\backslash
stretch{#1}}} 
\end_layout

\begin_layout Plain Layout

% allow some slack to avoid under/overfull boxes 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand
\backslash
nbstretchyspace{
\backslash
spaceskip0.5em plus 0.25em minus 0.25em} 
\end_layout

\begin_layout Plain Layout

% To improve spacing on titlepages 
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
nbtitlestretch}{
\backslash
spaceskip0.6em} 
\end_layout

\begin_layout Plain Layout


\backslash
pagestyle{empty} 
\end_layout

\begin_layout Plain Layout


\backslash
begin{center} 
\end_layout

\begin_layout Plain Layout


\backslash
bfseries 
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[1] 
\end_layout

\begin_layout Plain Layout


\backslash
Huge 
\end_layout

\begin_layout Plain Layout

{
\backslash
nbtitlestretch
\backslash
huge
\backslash
textcolor[RGB]{25,60,240}  
\end_layout

\begin_layout Plain Layout

{The Litebase Companion}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[2]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[scale=1]{images/title}  
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[5]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
large  Version 2.8
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[1]  
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagestyle{companion}
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Part
LITEBASE
\end_layout

\begin_layout Chapter
Litebase
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
Litebase is a full-featured database for TotalCross.
 As most databases, it uses the SQL language to let you manipulate data.
\end_layout

\begin_layout Standard
The normal way to access files in TotalCross is through the 
\family typewriter
File
\family default
, 
\family typewriter
PDBFile
\family default
, 
\family typewriter
ResizeStream,
\family default
 and 
\family typewriter
DataStream
\family default
 classes.
 When using Litebase, the programmer will have to forget these classes and
 use only the ones provided by the 
\family typewriter
litebase.*
\family default
 packages.
 Trying to use the one or more of these classes in conjunction with the
 Litebase ones within the same file can lead to data corruption and is not
 recommended.
 Moreover, some platforms do not let the same file be used concurrently.
\end_layout

\begin_layout Standard
It is possible to run Litebase on desktop, either as a Java application,
 a Linux application, as a windows XP (and up) application, or on all the
 supported TotalCross platforms.
 So, its easy to create table files on the desktop that can be later synchronize
d with the device.
 The files created are interchangeable on all supported platforms.
\end_layout

\begin_layout Standard
The packages that belong to this library, which are inside the Litebase
 files, are specified below.
\end_layout

\begin_layout Itemize

\family typewriter
litebase
\family default
: contains the database classes that can be used to manipulate the plain
 files via SQL.
\end_layout

\begin_layout Itemize

\family typewriter
litebase.ui
\family default
: contains some useful user interface classes that can be used with the
 driver.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
DBListBox
\family default
: a class used to show a single list box of a 
\family typewriter
ResultSet
\family default
 that returns multiple columns.
 Because it extends 
\family typewriter
totalcross.ui.ListBox
\family default
, it can be placed in a combo box too.
\end_layout

\end_deeper
\begin_layout Standard
These samples are provided under samples:
\end_layout

\begin_layout Itemize

\family typewriter
addressbook
\family default
: a simple address book application, which demonstrates the use of the grid
 and blobs to insert pictures.
\end_layout

\begin_layout Itemize

\family typewriter
bench
\family default
: checks the search and insert speed of Litebase.
 Note that it can take some minutes to run on a device.
\end_layout

\begin_layout Itemize

\family typewriter
testcases
\family default
: 
\family typewriter
TestUnit
\family default
 test cases for Litebase: it will give you an overall idea of what is supported.
 This can take some minutes to run on a device! 
\end_layout

\begin_layout Itemize

\family typewriter
sqlconsole
\family default
: a console for issuing SQL commands.
 In this application, it is impossible to use prepared statements and blobs.
 Using this program you can view the results of queries and create, drop,
 and change tables.
\end_layout

\begin_layout Itemize

\family typewriter
salesplus
\family default
: a simple sales force application.
\end_layout

\begin_layout Itemize

\family typewriter
logger
\family default
: a program for executing a log file and try to reproduce a problem.
\end_layout

\begin_layout Standard
Next a sample program that uses Litebase is provided:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Creates the driver's instance.
\end_layout

\begin_layout Plain Layout

LitebaseConnection driver = LitebaseConnection.getInstance("Test");
\end_layout

\begin_layout Plain Layout

// Creates the table and the index.
\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   driver.execute("CREATE TABLE person (name char(30), sal double, age int)");
\end_layout

\begin_layout Plain Layout

   driver.execute("CREATE INDEX idx_name ON person(name)");
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

catch (AlreadyCreatedException exception) {} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Inserts some Values.
\end_layout

\begin_layout Plain Layout

driver.executeUpdate("INSERT INTO person VALUES ('Michelle', 3000.0, 31)");
\end_layout

\begin_layout Plain Layout

driver.executeUpdate("INSERT INTO person VALUES ('Simone', 3000.0, 33)");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Does a query.
\end_layout

\begin_layout Plain Layout

ResultSet rs = driver.executeQuery("SELECT * FROM person WHERE name = 'Michelle'"
);
\end_layout

\begin_layout Plain Layout

if (rs.next())
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   String name = rs.getString("name");
\end_layout

\begin_layout Plain Layout

   double sal = rs.getDouble(2);
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

rs.close();
\end_layout

\end_inset


\end_layout

\begin_layout Section
Table Format
\end_layout

\begin_layout Standard
All database data is written directly to the non-volatile memory (AKA flash-memo
ry).
 In the past, each database table file could have at most four kinds of
 files: 
\family typewriter
.db
\family default
 (table header and data), 
\family typewriter
.dbo
\family default
 (database objects), 
\family typewriter
.idk
\family default
 (index keys), and 
\family typewriter
.idr
\family default
 (index repetitions).
 There would be an 
\family typewriter
.idk
\family default
 file for each index and an 
\family typewriter
.idr
\family default
 file if the index field has repeated data.
 Otherwise, the 
\family typewriter
.idr
\family default
 file would be missing.
 On the current versions, the 
\family typewriter
.idr
\family default
 files do not exist anymore.
 It makes index searches faster.
 On the other hand, if there are too many key repetitions, an index that
 was possible to be created in previous versions may not be able to be created
 with the current versions because the number of maximum index keys may
 exceed even though the maximum number of keys have been duplicated.
 The string fields of a table are stored in a separate file (
\family typewriter
.dbo
\family default
).
 This was necessary to save space from the records, since strings may use
 much less space than the one declared when creating a table and all the
 records have fixed-size length.
 A similar approach is used for blob fields: they are stored in the same
 file.
\end_layout

\begin_layout Standard
The index file format is a specialized B-Tree.
 Due to this, the whole table's column is stored in the tree keys (in other
 words, in the file).
 A big increase in the index size of columns of the string types does not
 happen because in this case the dbo position is saved in the key instead
 of the data.
\end_layout

\begin_layout Standard
Whenever the index format is changed, to make use of these and use the correct
 format, it is necessary to recreate all the indices.
 One way of doing this is just droping the index files manually that the
 Litebase will recover them automatically.
 Another way of doing it is erasing them in the application.
 A simple code fragment is provided below that shows how to drop all the
 indices of an application whose tables are stored in 
\family typewriter
/Litebase_DBs/
\family default
 and application id is 
\family typewriter
ACTv
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// ......
\end_layout

\begin_layout Plain Layout

import totalcross.sys.*; 
\end_layout

\begin_layout Plain Layout

import totalcross.io.*;
\end_layout

\begin_layout Plain Layout

// ......
 
\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

   // The folder where the tables files are stored.
\end_layout

\begin_layout Plain Layout

   String sourcePath = "/Litebase_DBs/", 
\end_layout

\begin_layout Plain Layout

   // The application id of your database.
\end_layout

\begin_layout Plain Layout

          appCreatorId = "ACTv";
\end_layout

\begin_layout Plain Layout

   // Lists all the files of the given folder.
\end_layout

\begin_layout Plain Layout

   String[] files = new File(sourcePath, File.DONT_OPEN, 1).listFiles();
\end_layout

\begin_layout Plain Layout

   Vm.debug("source path: " + sourcePath);
\end_layout

\begin_layout Plain Layout

   if (files != null)
\end_layout

\begin_layout Plain Layout

   {
\end_layout

\begin_layout Plain Layout

      int size = files.length;
\end_layout

\begin_layout Plain Layout

      String name;
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

      Vm.debug("size: " + size);
\end_layout

\begin_layout Plain Layout

      while (--size >= 0)
\end_layout

\begin_layout Plain Layout

      {
\end_layout

\begin_layout Plain Layout

         name = files[size];
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

         // Files of this application.
 
\end_layout

\begin_layout Plain Layout

         if (name.startsWith(appCreatorId + '-' ) && (name.endsWith(".idk")
 
\end_layout

\begin_layout Plain Layout

                                                   || name.endsWith(".idr")))
 
\end_layout

\begin_layout Plain Layout

         {
\end_layout

\begin_layout Plain Layout

            new File(sourcePath + name).delete();
\end_layout

\begin_layout Plain Layout

            Vm.debug("Index file deleted: " + name);
\end_layout

\begin_layout Plain Layout

         } 
\end_layout

\begin_layout Plain Layout

      } 
\end_layout

\begin_layout Plain Layout

   } 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (IOException exception)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   // ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Litebase Multiple Languages
\end_layout

\begin_layout Standard
Litebase supports more than one language.
 Up to now, the supported languages are: English (the default language)
 and Portuguese.
 This feature puts Litebase's messages in your chosen language.
 To chose a language, it is just necessary to set the language field:
\end_layout

\begin_layout Standard

\family typewriter
LitebaseConnection.language = LitebaseConnection.LANGUAGE_PT;
\end_layout

\begin_layout Standard
The possible parameters are:
\end_layout

\begin_layout Standard

\family typewriter
LitebaseConnection.LANGUAGE_EN
\family default
: English (Default)
\end_layout

\begin_layout Standard

\family typewriter
LitebaseConnection.LANGUAGE_PT
\family default
: Portuguese
\end_layout

\begin_layout Standard
To get the current language, it is only necessary to access the field language:
 
\end_layout

\begin_layout Standard

\family typewriter
int language = LitebaseConnection.language;
\end_layout

\begin_layout Section
Limitations and Usage
\end_layout

\begin_layout Itemize
The LitebaseConnection class is used to issue the SQL command for a specific
 set of tables, and is constructed using a creator id.
 All tables created by this instance will have the given creator id.
\end_layout

\begin_layout Itemize
If Litebase is to be used in an applet, the jars used must be signed in
 order to be used in a browser.
 Otherwise, it won't be possible to create or access tables.
\end_layout

\begin_layout Itemize
An index is created using the table name and appending a 
\family typewriter
$<column number>
\family default
 to indices of one attribute or 
\family typewriter
&<internal code>
\family default
 to indices of two or more attributes (composed index).
 Thus, the table name is limited to 23 characters.
 It is possible to create up to 32 composed indices.
 
\end_layout

\begin_layout Itemize
Indices are used during the evaluation of the where clause when:
\end_layout

\begin_deeper
\begin_layout Itemize
The following operators are used:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
and
\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
or
\family default
;
\end_layout

\begin_layout Itemize
( );
\end_layout

\begin_layout Itemize

\family typewriter
not
\family default
 (are removed internally), and
\end_layout

\begin_layout Itemize

\family typewriter
like 'a%'
\family default
 (starts with);
\end_layout

\end_deeper
\begin_layout Itemize
The following operators are not used:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
like '%a'
\family default
 (ends with), and
\end_layout

\begin_layout Itemize

\family typewriter
like '%a%'
\family default
 (index of).
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Indices are not used for all the where clause if it uses different boolean
 operators (
\family typewriter
not
\family default
s are not counted as they are removed).
\end_layout

\begin_layout Itemize
If your where clause is of the form 
\family typewriter
A and B and C ...
 and Z
\family default
, or 
\family typewriter
A or B or C ...
 or Z
\family default
, to ensure that the indices will be applied to all columns that have simple
 indices, the columns using indices should all be in the rightmost or leftmost
 part of the clause.
\end_layout

\begin_layout Itemize
Litebase does not have the reserved word 
\family typewriter
IN
\family default
.
 A big OR with all the values in the set must be used instead.
\end_layout

\begin_layout Itemize
The composed indices are used only when there's an AND operation of all
 correspondent fields of the composed index in its creation order, and the
 fields use equals operator on comparison.
\end_layout

\begin_layout Itemize
Indices can also be used to compute 
\family typewriter
max()
\family default
 and 
\family typewriter
min()
\family default
 aggregation functions.
 In order to use them, the column must have an index or be the first column
 of a composed index and the query cannot have group by.
 Moreover the query can't have a where clause or its where clause must be
 all solved using indices.
\end_layout

\begin_layout Itemize
Indices may also be used when using 
\family typewriter
order by
\family default
 or 
\family typewriter
group by
\family default
 clauses.
 In order to use them, the query also can't have a where clause or its where
 clause must be all solved using indices.
 Furthermore, the query can't have aggregations.
 Additionally, if there is only one column to be sorted, it must be a primary
 key column, the first column of a composed primary key column or the first
 column of an index if it is declare as not null.
 If there are more than one column to be sorted, they must be the fist part
 of the composed primary key or a composed index if they are declared as
 not null.
 Notice that columns that are not part of a primary key must be declared
 as not null since Litebase indices do not store nulls.
 Finally, the order of all columns to be ordered must be the same, either
 all of them are sorted in the ascending or in the descending order.
 
\end_layout

\begin_layout Itemize
Indices can be created after a table already contains elements.
 Note that the creation of the index can be a slow operation; it can take
 some minutes on very big tables.
 The best method is to create all indices when there's no data in the table.
 However, If you plan to insert lots of data (above 20% of current size,
 or above 1000 rows), drop all indices, insert the data, then create them
 again.
\end_layout

\begin_layout Itemize
SQL commands are case insensitive.
\end_layout

\begin_layout Itemize
Primary Keys and composed primary keys are supported.
\end_layout

\begin_layout Itemize
Aggregation functions (
\family typewriter
max()
\family default
, 
\family typewriter
min(
\family default
), 
\family typewriter
avg()
\family default
, 
\family typewriter
sum()
\family default
, and 
\family typewriter
count()
\family default
), 
\family typewriter
order by
\family default
 and 
\family typewriter
group by
\family default
 are supported.
\end_layout

\begin_layout Itemize

\family typewriter
sum()
\family default
 and 
\family typewriter
avg()
\family default
 aggregation functions are not used with 
\family typewriter
date
\family default
, 
\family typewriter
datetime
\family default
, 
\family typewriter
char
\family default
, 
\family typewriter
char nocase
\family default
, 
\family typewriter
varchar
\family default
, and 
\family typewriter
varchar nocase
\family default
 type fields.
\end_layout

\begin_layout Itemize

\family typewriter
count()
\family default
 can only be used with 
\family typewriter
*
\family default
 as a parameter.
\end_layout

\begin_layout Itemize
The join operation is supported.
 Inner, left and right join are not supported.
 The only way to do a join is as the following sample: 
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
select * from table1, table2, tableN ...
\end_layout

\begin_layout Standard
The performance of a join can vary greatly depending on the order of the
 tables and the clauses in the where clause.
 So, if a join operation is taking too long, one should try changing these
 orders and see if the performance improves.
\end_layout

\begin_layout Standard
Sometimes, the join speed can be improved if the clauses in the where clause
 use simple indices.
 Moreover, if there is a restricted clause, this should be the last clause
 of the where clause.
 Additionally, the order of the clauses must be in such a way that the first
 clauses access the smallest tables.
 Last but not least, in a clause, the first field being accessed should
 be of the smallest table.
 These recommendations are some strategies that usually work.
 However, some joins usually perform better doing the reverse.
 Consequently, if the join is still very slow, one should try reversing
 the tables order and where clause order until finding a better result.
\end_layout

\end_deeper
\begin_layout Itemize
Null and default values are supported.
\end_layout

\begin_layout Itemize

\family typewriter
blob
\family default
 type is supported.
 Notice that blobs must be inserted in a table only via prepared statement,
 as a byte array.
 It also can't be used in functions, aggregations, 
\family typewriter
where
\family default
, 
\family typewriter
having
\family default
, 
\family typewriter
order by
\family default
, and 
\family typewriter
group by
\family default
 clauses because it does not make sense to compare blobs.
 Therefore, they can't also be indexed.
 Moreover, they can't be displayed as a string by Litebase.
 Whenever you try to recover a blob field from a table as a string, a null
 value is returned instead.
\end_layout

\begin_layout Itemize

\family typewriter
varchar
\family default
 type is supported.
 Internally, 
\family typewriter
char
\family default
 and 
\family typewriter
varchar
\family default
 are treated in the same way in order to not let the table files become
 to big.
 If your application has memory problems, try to reduce SQL strings length
 changing field declarations from 
\family typewriter
varchar
\family default
 to 
\family typewriter
char
\family default
.
\end_layout

\begin_layout Itemize
It is possible to use 
\family typewriter
'
\family default
 (single quote) inside strings.
 Just use 
\family typewriter

\backslash
'
\family default
 in a prepared statement or in a SQL string passed by the user.
 In a sql string in a TotalCross program, 
\family typewriter

\backslash

\backslash
'
\family default
 must be used instead.
\end_layout

\begin_layout Itemize
Using prepared statement in batch operations is 3 to 4 times faster than
 using direct calls to 
\family typewriter
LitebaseConnection.executeUpdate()
\family default
.
\end_layout

\begin_layout Itemize
A query with no 
\family typewriter
where
\family default
 clause, using all fields (*) or the table fields in the correct order beginning
 with the 
\family typewriter
rowid
\family default
 is much faster than other queries that return all the rows.
 This happens because table data do not need to be searched.
 Moreover, no temporary tables are created if the query do not have joins,
 aggregations or sortings, which improves performance and memory usage.
\end_layout

\begin_layout Itemize
The table's file name is prefixed with the creator id.
 This is important to let two different programs use the same table name.
 Prefixing the table name with the creator id ensures that the files won't
 be overwritten (unless they match, which will occur if they don't obey
 the rules for creating and defining creator ids).
 
\end_layout

\begin_layout Itemize
It is possible to use multiple connections.
 That is, it is possible to access two databases at the same time in different
 directories or in the same directory with different creator ids.
 When using Android, it is possible to access tables in the flash memory
 and in the memory card at the same time.
\end_layout

\begin_layout Itemize

\family typewriter
LitebaseConnection.exists()
\family default
 does not load the table and indices.
 It only tests if the 
\family typewriter
.db
\family default
 file exists in the current connection path.
 This prevents the program to abort if the table and/or indices are corrupted
 or are using an older format.
 It also works properly with already loaded tables.
\end_layout

\begin_layout Itemize
Droping table also does not load the table files.
 It only searches for the table files and erase them.
 This also prevents the program to abort if the table and/or indices are
 corrupted or are using the old format.
 Moreover, it works properly with already loaded tables.
\end_layout

\begin_layout Itemize
If Unicode characters are not to be used in the tables, it is possible to
 create them in order to use only ASCII characters in string types.
 This saves memory, disk space and makes the reading and writing operations
 faster.
 It is very important to say that a 
\family typewriter
.dbo
\family default
 that has only strings has its size almost halved if it is stored in the
 ASCII mode.
 Notice that all the tables of a given connection have their strings stored
 in either ASCII or Unicode format, and it is not possible to open a table
 with a connection using a different format of string saving nor changing
 its format after creation.
\end_layout

\begin_layout Itemize
If the application demands that no one can find anything meaningful when
 opening a table file, simple cryptography can be used.
 This makes Litebase operations a little bit slower.
 However, information is safer.
 Notice that a table that uses cryptography can't be used in a connection
 that does not use cryptography and vice-versa.
 
\end_layout

\begin_layout Itemize
Relative paths can't be used with Litebase.
 That is, a relative path can't be passed to 
\begin_inset Newline newline
\end_inset


\family typewriter
Settings.dataPath
\family default
 (remember that 
\family typewriter
Settings.appPath
\family default
 can't be changed!) or as a new connection parameter.
 If this is done, an exception will be thrown.
 
\end_layout

\begin_layout Itemize

\family typewriter
char(1) 
\family default
columns can be created, but it is much more efficient to use a short column
 with the char ASCII code.
\end_layout

\begin_layout Itemize
The tables should not be opened at the same time by two different connections.
 On Java SE, Windows 32, and Windows Phone 8, a file cannot be opened twice
 at the same time.
 So, an exception will be thrown if a table is opened at the same time by
 two different connections.
 This happens because these platforms don't allow a file to be opened twice
 at the same time.
 However, on Android, Linux, and iOS it is possible to open a file twice
 at the same time.
 Therefore, if a table is opened at the same time by two different connections,
 your application may behave unexpectedly.
 Table files should also not be opened while using the tables with Litebase
 and vice-versa for the same reason.
\end_layout

\begin_layout Itemize
There are some limits that must be respected:
\end_layout

\begin_deeper
\begin_layout Itemize
It is not possible to create a table with more than 254 columns, nor using
 more than 254 fields or columns.
\end_layout

\begin_layout Itemize
A blob field can't be declared to be larger than 10 Mb;
\end_layout

\begin_layout Itemize
A string field can't be declared to be have more than 65535 characters;
\end_layout

\begin_layout Itemize
It is not possible to create a table name with more than 23 characters.
 This limitation was due to the compatibility with old Palm OS and should
 be removed in the near future.
\end_layout

\begin_layout Itemize
A table can't have more than 32 composed indices;
\end_layout

\begin_layout Itemize
The 
\family typewriter
.dbo
\family default
 file can't be greater than 2 Gb.
 This will be changed as the PDAs are improved, and
\end_layout

\begin_layout Itemize
A table with an index can't have more than ~2,6 million index keys.
 Again, this will be changed as the PDAs are improved.
\end_layout

\end_deeper
\begin_layout Standard

\series bold
It is very important that you take a look at the test cases.
\end_layout

\begin_layout Subsection
Memory Card Support
\end_layout

\begin_layout Standard
It is possible to store databases on memory cards on the device that supports
 it.
 Currently, only Android supports it.
 If it is necessary to fetch Litebase tables or logs from an Android device,
 it is a good idea to create the data base on the memory card by using the
 path 
\family typewriter
/sdcard
\family default
, unless the device is rooted and it is possible to fetch the table files
 using 
\family typewriter
adb
\family default
 from the application folder.
\end_layout

\begin_layout Standard
Although Windows Phone 8 supports a memory card, it's read-only.
 You can't create a database on it.
 The only way to fetch database files and other application files is using
 the Isolated Storage Explorer command-line tool for Windows Phone.
 This is inside the Windows Phone SDK.
 You can also use it to put files in the application folder on the device.
 To know how to use it, read the following tutorial: 
\begin_inset CommandInset href
LatexCommand href
name "http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh286408(v=vs.105).aspx"
target "http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh286408(v=vs.105).aspx"

\end_inset

.
\end_layout

\begin_layout Subsection
Using Threads
\end_layout

\begin_layout Standard
It is possible to use Litebase within threads.
 An user can access different connections in different threads.
 However, it is highly not recommended to access the same tables and connections
 within different threads.
 Doing this will probably crash an application.
 This was implemented this way to improve execution performance.
 In the future, it will be possible to have concurrent access to the tables
 as this is needed by many programmers.
\end_layout

\begin_layout Subsection
Logging and Debugging
\end_layout

\begin_layout Standard
Litebase supports logging.
 It will write to a file all the operations, such as queries, updates, deletes,
 inserts, and other methods of the 
\family typewriter
LitebaseConnection
\family default
 class that are called.
 It can help Litebase developers a lot in finding the causes of a bug in
 the driver, but it must be used with care, because it will slow down Litebase
 and also take much of the device's flash memory (E.G.: a log file of the
 
\family typewriter
AllTests
\family default
 program takes more than 1 Mb).
 So, if a problem is found when using Litebase, follow these steps:
\end_layout

\begin_layout Enumerate
Add this line to the application before using Litebase:
\family typewriter

\begin_inset Newline newline
\end_inset

LitebaseConnection.logger = LitebaseConnection.getDefaultLogger();
\family default
 
\begin_inset Newline newline
\end_inset

if the application does not use threads.
 If it uses threads, use
\family typewriter

\begin_inset Newline newline
\end_inset

LitebaseConnection.setLogger(LitebaseConnection.getDefaultLogger();
\end_layout

\begin_layout Enumerate
Run the application until the error is found.
 
\end_layout

\begin_layout Enumerate
Synchronize the files to the desktop and find the file(s) named as 
\family typewriter

\begin_inset Newline newline
\end_inset

Litebase_YYYYMMDDHHMMSS.CRTR.LOGS
\family default
, where 
\family typewriter
CRTR
\family default
 is the creator id of your application.
 
\end_layout

\begin_layout Enumerate
Zip the file(s) and open a support request at SuperWaba CRMDesk system explainin
g what has being done, the error that occurred, which platform and device
 that were being used, along with uploading the zipped log file and table
 files in a state after and before the execution of the log commands.
\end_layout

\begin_layout Enumerate
Don't forget to turn off the logging process, by commenting out the line
 above, unless it is wanted to fill up all the PDA's space.
 To dispose the log, use 
\family typewriter
Logger.dispose(true)
\family default
.
 It is also necessary to set the Litebase logger to null doing:
\family typewriter

\begin_inset Newline newline
\end_inset

LitebaseConnection.logger = null;
\family default

\begin_inset Newline newline
\end_inset

if your application does not use threads.
 If it uses threads, use
\family typewriter

\begin_inset Newline newline
\end_inset

LitebaseConnection.setLogger(null);
\family default

\begin_inset Newline newline
\end_inset

Log files are never deleted, so it must be done by the programmer, calling
\begin_inset Newline newline
\end_inset


\family typewriter
LitebaseConnection.deleteLogFiles()
\family default
 for log files created with
\begin_inset Newline newline
\end_inset


\family typewriter
LitebaseConnection.getDefaultLogger()
\family default
.
 They are no longer pdb files as it were in previous versions, but plain
 text files.
 
\end_layout

\begin_layout Enumerate
The logger can also be something different from a normal text file.
 Please check 
\family typewriter

\begin_inset Newline newline
\end_inset

totalCross.util.Logger
\family default
 for more information.
\end_layout

\begin_layout Enumerate
If it is prefered using logging all the time, the PDA WILL run out of storage
 space.
 This may cause a Litebase operation failure and inconsistency between files
 and tables if using Litebase is not stopped for a while to erase log files
 before running out of space.
\end_layout

\begin_layout Enumerate
To reduce log size, one can omit Litebase operations that don't change the
 database.
 These includes:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
LitebaseConnection.executeQuery()
\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
LitebaseConnection.getCurrentRowId()
\family default
; 
\end_layout

\begin_layout Itemize

\family typewriter
LitebaseConnection.getRowCount()
\family default
;
\end_layout

\begin_layout Itemize

\family typewriter
LitebaseConnection.getRowCountDeleted()
\end_layout

\begin_layout Itemize

\family typewriter
LitebaseConnection.getRowIterator()
\end_layout

\begin_layout Itemize

\family typewriter
LitebaseConnection.prepareStatement()
\family default
, and 
\end_layout

\begin_layout Itemize

\family typewriter
PreparedStatement.executeQuery()
\family default
.
\end_layout

\begin_layout Standard
To do that, it is only necessary to set 
\family typewriter
LitebaseConnection.logOnlyChanges
\family default
 to true.
 This is interesting when some error occurs that corrupts the database after
 a long system run.
 Since the operations listed above don't change the database, they can't
 cause table or index corruption (the most usual Litebase problem).
 
\end_layout

\end_deeper
\begin_layout Enumerate
If the default logger is used, it will be saved in 
\family typewriter
Settings.appPath
\family default
.
 On Android, it is not always possible to fetch the log file unless changing
 some access permissions or even rooting the device.
 Since this may be undesirable, the log file can be saved on the external
 card so that it can be easily fetched.
 In order to change its place, it is necessary to create it using 
\family typewriter
totalCross.util.Logger
\family default
.
 Here is an example for Android using the default path for the external
 card:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

File log = new File(Convert.appendPath("/sdcard/", "Litebase_" + new Time().getTim
eLong() + '.' + Settings.applicationId + ".LOGS"), File.CREATE_EMPTY, -1);
\end_layout

\begin_layout Plain Layout

LitebaseConnection.logger = Logger.getLogger("litebase", -1, log);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Compatibility
\end_layout

\begin_layout Standard
Litebase needs TotalCross to run on the devices.
 Moreover, one specific Litebase version does not run on all TotalCross
 versions.
 So, it is not recommended to run a Litebase version on incompatible TotalCross
 version.
 This can cause strange errors or even an application crash.
 The table below shows the ensured compatibility between TotalCross and
 Litebase versions.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="25" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TotalCross
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Litebase
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.20 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.20
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.21
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.21
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.22
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.22
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.23
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.23
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.24
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.24
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.25
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.25 2.26 2.26a
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.27
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.27
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.28
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.28
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.29
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.29 2.30
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.30 to 1.37
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.30
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.38
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.38
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.50
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.50
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.51
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.51
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.52
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.52
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.60
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.60
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.61
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.61
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.62
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.62
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.63
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.63
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.64
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.64
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.65
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.65
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.66
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.66
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.67
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.67
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.7 to 2.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.7
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3.0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.8
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Please notice that all indices files must be erased in order to use Litebase
 tables created with version 2.67 with Litebase 2.7/2.8 and vice-versa.
 Moreover, tables using cryptography created in version 2.7/2.8 can't be used
 with version 2.67.
 
\end_layout

\begin_layout Section
Litebase SQL Functions
\end_layout

\begin_layout Standard
In this section, it is possible to find all SQL data type functions accepted
 by Litebase.
\end_layout

\begin_layout Subsection

\family typewriter
short
\family default
, 
\family typewriter
int
\family default
, 
\family typewriter
long
\family default
, 
\family typewriter
float
\family default
, and 
\family typewriter
double
\family default
 functions 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="30col%">
<column alignment="center" valignment="top" width="20col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ResultSet
\family default
 method
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ABS(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align center
Returns the absolute value of the given 
\family typewriter
short
\family default
 field.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ABS(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the absolute value of the given 
\family typewriter
int
\family default
 field.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getInt()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ABS(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the absolute value of the given 
\family typewriter
long
\family default
 field.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getLong()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ABS(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the absolute value of the given 
\family typewriter
float
\family default
 field.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getFloat()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ABS(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the absolute value of the given 
\family typewriter
double
\family default
 field.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getDouble()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// First creates and fills the table.
\end_layout

\begin_layout Plain Layout

LitebaseConnection driver = LitebaseConnection.getInstance();
\end_layout

\begin_layout Plain Layout

driver.execute("create table person(name char(16), amount int, amount1 short,
 amount2 long, amount3 float, amount4 double, birth Date, years DateTime)");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Note: These inserts statements will be used by all examples about SQL
 functions.
\end_layout

\begin_layout Plain Layout

driver.executeUpdate("insert into person values ('Renato Novais', -12, -1,
 -100, -1.2, -456.0, ' 2007/5-3 ', ' 2007/11-2 12:08:01:234 ')"); 
\end_layout

\begin_layout Plain Layout

driver.executeUpdate("insert into person values ('indira gomes',13, -8, -25,
 5.2, -154.0, '2006/7/8 ', '2006/08-21 0:08')");
\end_layout

\begin_layout Plain Layout

driver.executeUpdate("insert into person values ('Lucas Novais', -20, -456,
 48, -5.9, -954.2, '2008/4/6', ' 2008/06/06 13:45 ')");
\end_layout

\begin_layout Plain Layout

driver.executeUpdate("insert into person values ('Zenes Lima', -15, -54,
 -5698, -8.3, -456.5, '2005/9/12 ', '2005/01-4 1:50')");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Selects with functions.
 
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select abs(amount) as a0, abs(amount1) as a1, abs(amoun
t2) as a2, abs(amount3) as a3, abs(amount4) as a4 from person 
\end_layout

\begin_layout Plain Layout

where abs(amount)>13"); 
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 2.
 
\end_layout

\begin_layout Plain Layout

rs.next();
\end_layout

\begin_layout Plain Layout

rs.getInt(1); // Returns 20.
 
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 456.
 
\end_layout

\begin_layout Plain Layout

rs.getLong(3); // Returns 48.
 
\end_layout

\begin_layout Plain Layout

rs.getFloat(4); // Returns 5.9.
 
\end_layout

\begin_layout Plain Layout

rs.getDouble(5); // Returns 954.2.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getInt(1); // Returns 15.
 
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 54.
 
\end_layout

\begin_layout Plain Layout

rs.getLong(3); // Returns 5698 .
 
\end_layout

\begin_layout Plain Layout

rs.getFloat(4); // Returns 8.3.
 
\end_layout

\begin_layout Plain Layout

rs.getDouble(5); // Returns 456.5.
 
\end_layout

\begin_layout Plain Layout

rs.close(); 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
char
\family default
, 
\family typewriter
varchar
\family default
, 
\family typewriter
char nocase
\family default
, and 
\family typewriter
varchar nocase
\family default
 functions
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="35col%">
<column alignment="center" valignment="top" width="20col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ResultSet
\family default
 method
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
UPPER(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
CHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align center
Converts all lowercase letters in a character string to uppercase.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getChars()
\family default
 or 
\family typewriter
getString()
\family default
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LOWER(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
CHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Converts all uppercase letters in a character string to lowercase.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getChars()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Selects with functions.
 
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select amount, abs(amount) as a1, name, lower(name)
 as u1, upper(name) as u2 from person where abs(amount)>12 and UPPER(name)
 > 'INDIRA GOMES'");
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 2.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getInt(1); // Returns -20.
 
\end_layout

\begin_layout Plain Layout

rs.getInt(2); // Returns 20.
 
\end_layout

\begin_layout Plain Layout

rs.getString(3); // Returns 'Lucas Novais'.
 
\end_layout

\begin_layout Plain Layout

rs.getString(4); // Returns 'lucas novais'.
 
\end_layout

\begin_layout Plain Layout

rs.getString(5); // Returns 'LUCAS NOVAIS'.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getInt(1); // Returns -15.
 
\end_layout

\begin_layout Plain Layout

rs.getInt(2); // Returns 15.
 
\end_layout

\begin_layout Plain Layout

rs.getString(3); // Returns 'Zenes Lima'.
 
\end_layout

\begin_layout Plain Layout

rs.getString(4); // Returns 'zenes lima'.
 
\end_layout

\begin_layout Plain Layout

rs.getString(5); // Returns 'ZENES LIMA'.
 
\end_layout

\begin_layout Plain Layout

rs.close(); 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
date
\family default
 and 
\family typewriter
datetime
\family default
 functions 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="40col%">
<column alignment="center" valignment="top" width="20col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ResultSet
\family default
 method
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
YEAR(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align center
Gets subfield equivalent to year.
 Field CAN be 
\family typewriter
date
\family default
 or 
\family typewriter
datetime
\family default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MONTH(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets subfield equivalent to year.
 Field CAN be 
\family typewriter
date
\family default
 or 
\family typewriter
datetime
\family default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DAY(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets subfield equivalent to hour.
 Field MUST be 
\family typewriter
datetime
\family default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
HOUR(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets subfield equivalent to hour.
 Field MUST be 
\family typewriter
datetime
\family default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MINUTE(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets subfield equivalent to hour.
 Field MUST be 
\family typewriter
datetime
\family default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SECOND(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets subfield equivalent to hour.
 Field MUST be 
\family typewriter
datetime
\family default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
MILLIS(field)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets subfield equivalent to hour.
 Field MUST be 
\family typewriter
datetime
\family default
.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getShort()
\family default
 or 
\family typewriter
getString()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Selects with functions.
 
\end_layout

\begin_layout Plain Layout

ResultSet rs = driver.executeQuery("Select month(years) as mon1, years from
 person");
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 4.
 
\end_layout

\begin_layout Plain Layout

rs.next(); rs.getShort(1); // Returns 11.
 
\end_layout

\begin_layout Plain Layout

rs.next(); rs.getShort(1); // Returns 8.
 
\end_layout

\begin_layout Plain Layout

rs.next(); rs.getShort(1); // Returns 6.
 
\end_layout

\begin_layout Plain Layout

rs.next(); rs.getShort(1); // Returns 1.
 
\end_layout

\begin_layout Plain Layout

rs.close();
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select year(years) as y1, years from person where
 day(years) >= 6");
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 2.
 
\end_layout

\begin_layout Plain Layout

rs.next(); rs.getShort(1); // Returns 2006.
 
\end_layout

\begin_layout Plain Layout

rs.next(); rs.getShort(1); // Returns 2008.
 
\end_layout

\begin_layout Plain Layout

rs.close();
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select hour(years) as h1, day(birth) as d1 from
 person where month(birth) != 7 and hour(years) != 0");
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 3.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 12.
 
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 3.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 13.
 
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 6.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 1.
 
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 12.
 
\end_layout

\begin_layout Plain Layout

rs.close();
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select millis(years) as mil1, minute(years) as
 sec1 from person where birth > '2005/9-12'");
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 3.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 234.
 
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 8.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 0.
 
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 8.
 
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 0.
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 45.
\end_layout

\begin_layout Plain Layout

rs.close();
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select year(birth) as y1, month(birth) as m1 day(birth)
 as d1 from person where year(birth) = 2005");
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 1.
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 2005.
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 9.
\end_layout

\begin_layout Plain Layout

rs.getShort(3); // Returns 12.
\end_layout

\begin_layout Plain Layout

rs.close();
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select hour(years) as h1, minute(years) as m1 second(ye
ars) as d1 from person where hour(years) >= 12");
\end_layout

\begin_layout Plain Layout

rs.getRowCount(); // Returns 2.
\end_layout

\begin_layout Plain Layout

rs.next(); 
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 12.
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 8.
\end_layout

\begin_layout Plain Layout

rs.getShort(3); // Returns 1.
\end_layout

\begin_layout Plain Layout

rs.next();
\end_layout

\begin_layout Plain Layout

rs.getShort(1); // Returns 13.
\end_layout

\begin_layout Plain Layout

rs.getShort(2); // Returns 45.
\end_layout

\begin_layout Plain Layout

rs.getShort(3); // Returns 0.
\end_layout

\begin_layout Plain Layout

rs.close();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Throws exception: "Incompatible data type for the function call: millis",
 
\end_layout

\begin_layout Plain Layout

// because birth is date type and millis is a function applied only for
 datetime type.
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select millis(birth) as mil, years from person");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Throws exception: "Incompatible data type for the function call: second".
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select year(birth) as y1, month(birth) as m1, day(birth
) as d1 from person where second(birth) = 234");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Throws exception: "An alias is required for the aggregate function column.
 Error position: 25." 
\end_layout

\begin_layout Plain Layout

rs = driver.executeQuery("Select month(birth) from person "); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Litebase Reserved Words
\end_layout

\begin_layout Standard
Litebase, starting from version 2.0, has reserved words.
 So, it is not possible to use these words as identifiers.
 
\end_layout

\begin_layout Standard
In the table below there are the reserved words from SQL 2003 standard and
 from Litebase.
 Many words from SQL 2003 standard are not in Litebase reserved words list,
 but is is strongly recommended that these words are not used, because in
 a near future they may become a Litebase reserved word.
 
\end_layout

\begin_layout Standard
Although 
\family typewriter
distinct
\family default
 is a reserved word, it is not currently used by Litebase.
 
\family typewriter
group by
\family default
 with no aggregated function should be used instead to simulate 
\family typewriter
distinct
\family default
 behavior.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="269" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL word
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Litebase
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL 2003
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ABS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ADD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ALL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ALLOCATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ALTER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AND
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ANY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ARE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ARRAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASENSITIVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ASYMMETRIC 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ATOMIC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AUTHORIZATION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
AVG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BEGIN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BETWEEN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BIGINT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BINARY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BLOB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BOOLEAN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BOTH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CALL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CALLED
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CASCADED
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CASE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CAST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CHARACTER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CHECK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CLOB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CLOSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
COLLATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
COLUMN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
COMMIT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CONDITION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CONNECT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CONSTRAINT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CONTINUE 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ORRESPONDING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
COUNT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CREATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CROSS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CUBE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_DATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_DEFAULT_TRANSFORM_GROUP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_PATH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_ROLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_TIME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_TIMESTAMP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_TRANSFORM_GROUP_FOR_TYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURRENT_USER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CURSOR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CYCLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATETIME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DAY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEALLOCATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DECIMAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DECLARE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEFAULT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DELETE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DEREF 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DESC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DESCRIBE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DETERMINISTIC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DISCONNECT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DISTINCT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DOMAIN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DOUBLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DROP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DYNAMIC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EACH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ELEMENT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ELSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ELSEIF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
END
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ESCAPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXCEPT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXECUTE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXISTS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXIT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
EXTERNAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FALSE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FETCH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FILTER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FLOAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FOR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FOREIGN 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FREE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FROM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FUNCTION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GET
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GLOBAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GRANT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GROUP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
GROUPING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HANDLER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HAVING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HOLD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HOUR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IDENTITY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IMMEDIATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INDEX 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INDICATOR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INNER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INOUT 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INPUT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INSENSITIVE 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INSERT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTERSECT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTERVAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
INTO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ITERATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
JOIN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
KEY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LANGUAGE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LARGE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LATERAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LEADING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LEAVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LEFT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LIKE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LOCAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LOCALTIME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LOCALTIMESTAMP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LONG
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LOOP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LOWER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MATCH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MAX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MEMBER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MERGE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
METHOD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MILLIS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MIN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MINUTE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MODIFIES
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MODIFY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MODULE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MONTH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NATIONAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NATURAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NCHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NCLOB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NEW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NOCASE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NONE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NOT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NULL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
NUMERIC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OLD
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ON
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ONLY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OPEN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ORDER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OUT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OUTER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OUTPUT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OVER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OVERLAPS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PARAMETER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PARTITION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PRECISION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PREPARE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PRIMARY
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PROCEDURE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RANGE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
READS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RECURSIVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REF
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REFERENCES 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REFERENCING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RELEASE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RENAME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REPEAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RESIGNAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RESULT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RETURN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RETURNS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REVOKE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RIGHT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ROLLBACK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ROLLUP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ROW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ROWS
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SAVEPOINT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SCOPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SCROLL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SEARCH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SECOND
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SELECT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SENSITIVE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SESSION_USER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SET
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SHORT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SIGNAL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SIMILAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SMALLINT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SOME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SUM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SPECIFIC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SPECIFICTYPE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQLEXCEPTION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQLSTATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SQLWARNING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
START
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
STATIC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SUBMULTISET
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SYMMETRIC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SYSTEM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SYSTEM_USER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TABLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TABLESAMPLE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
THEN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIMESTAMP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIMEZONE_HOUR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIMEZONE_MINUTE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRAILING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRANSLATION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TREAT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRIGGER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TRUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNDO
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNION
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNIQUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNKNOWN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNNEST
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UNTIL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UPDATE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UPPER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
USER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
USING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VALUE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VALUES
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VARCHAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
VARYING
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WHEN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WHENEVER
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WHERE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WHILE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WINDOW
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WITH
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WITHIN
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WITHOUT
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WORK
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
WRITE
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
YEAR
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
reserved
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section

\family typewriter
LitebaseConnection
\family default
 Class
\end_layout

\begin_layout Standard
This class is the one used to issue SQL commands.
 It cannot be directly instantiated, only using the 
\family typewriter
getInstance()
\family default
 methods.
\end_layout

\begin_layout Standard
If one tries to issue methods in an already closed connection, an 
\family typewriter
IllegalStateException
\family default
 will be thrown.
 A 
\family typewriter
SQLParserException
\family default
 will be thrown whenever a parser error, invalid number, date, or time occurs.
 Moreover, a 
\family typewriter
DriverException
\family default
 will be thrown whenever an I
\backslash
O problem or other error occurs, such as accessing invalid column or table
 names.
 In order to make this text cleaner, these kind of exception will be omitted
 in the methods description.
\end_layout

\begin_layout Subsection

\family typewriter
getInstance()
\end_layout

\begin_layout Standard

\family typewriter
public static LitebaseConnection 
\series bold
getInstance
\series default
()
\end_layout

\begin_layout Standard
It creates a 
\family typewriter
LitebaseConnection
\family default
 for the default application id, storing the database in the main secondary
 storage memory.
 This method avoids the creation of more than one instance with the same
 creator id, path, and thread, which would lead to performance and memory
 problems.
 
\end_layout

\begin_layout Standard
This is the same of doing 
\begin_inset Newline newline
\end_inset


\family typewriter
LitebaseConnection.getInstance(Settings.applicationId);
\end_layout

\begin_layout Subsection

\family typewriter
getInstance()
\end_layout

\begin_layout Standard

\family typewriter
public static LitebaseConnection 
\series bold
getInstance
\series default
(String appCrid)
\end_layout

\begin_layout Standard
It creates a 
\family typewriter
LitebaseConnection
\family default
 for the given creator id, which must be 4 characters long and may (or not)
 be the same one of your application's, storing the database in the main
 secondary storage memory.
 This method avoids the creation of more than one instance with the same
 creator id, path, and thread, which would lead to performance and memory
 problems.
 If the application id is not 4 characters long, a 
\family typewriter
DriverException
\family default
 will be thrown.
\end_layout

\begin_layout Subsection

\family typewriter
getInstance()
\begin_inset CommandInset label
LatexCommand label
name "sub:getInstance()"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
public static LitebaseConnection 
\series bold
getInstance
\series default
(String appCrid, 
\begin_inset Newline newline
\end_inset

String params) 
\end_layout

\begin_layout Standard
It creates a 
\family typewriter
LitebaseConnection
\family default
 for the given creator id, which must be 4 characters long and may (or not)
 be the same one of your application's, and with the given connection parameter
 list.
 This method avoids the creation of more than one instance with the same
 creator id, path, and thread, which would lead to performance and memory
 problems.
 If the application id is not 4 characters long, a 
\family typewriter
DriverException
\family default
 will be thrown.
\end_layout

\begin_layout Standard
The second parameter, 
\family typewriter
params
\family default
, can be the path where it is desired to access the database.
 It must be an absolute path, otherwise a 
\family typewriter
DriverException
\family default
 will be thrown.
 If 
\family typewriter
null
\family default
 is passed as this parameter, the default folder will be used.
 For Java, the default path is 
\family typewriter
Settings.dataPath
\family default
.
 For the other systems, the default path is given by 
\family typewriter
Settings.appPath
\family default
.
\end_layout

\begin_layout Standard
To use ASCII tables or cryptography, the parameters must have the format:
 
\family typewriter

\begin_inset Newline newline
\end_inset

chars_type = type; path = path_name[; crypto]
\family default

\begin_inset Newline newline
\end_inset

where 
\family typewriter
chars_type
\family default
 can be 
\family typewriter
ascii
\family default
 to store ASCII strings or 
\family typewriter
unicode
\family default
 to use unicode strings in the tables, path has the same format of the preceding
 case, and 
\family typewriter
crypto
\family default
 must be used if the tables of the connection use cryptography.
 It is also possible to use just one parameter (
\family typewriter
chars_type = type
\family default
, 
\family typewriter
path = path_name
\family default
, or 
\family typewriter
crypto
\family default
) or combinations of two parameters.
 The parameters can be entered in any order.
 If only the path is passed, the default format is unicode and no cryptography
 is used.
 This is also the format used for the above versions of this method.
\end_layout

\begin_layout Standard
Note: although 
\family typewriter
getInstance()
\family default
 is a singleton, it is not recommended to call this method more than once
 for the same connection in the same thread.
 This will only make your application inefficient due to many method calls.
 It is much better to hook the connection with Litebase in a static variable
 or to pass it as a parameter.
\end_layout

\begin_layout Standard
A very important thing to be noticed is that two different connections will
 be created on Java SE if one of the 
\family typewriter
getInstance()
\family default
 calls is in the constructor of the 
\family typewriter
MainWindown
\family default
 or in a method called by it and the other call is in a 
\family typewriter
initUI()
\family default
, 
\family typewriter
onEvent()
\family default
, or in its sub-methods.
\end_layout

\begin_layout Subsection

\family typewriter
getSourcePath()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getSourcePath
\series default
()
\end_layout

\begin_layout Standard
Returns the source path used by the Litebase connection.
 This path is where the tables of this connection are stored.
 
\end_layout

\begin_layout Subsection

\family typewriter
execute()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
execute
\series default
(String sql)
\end_layout

\begin_layout Standard
Used to execute a create table or create index SQL commands.
 
\end_layout

\begin_layout Standard
The index can be created after data was added to the table.
 
\end_layout

\begin_layout Standard
An 
\family typewriter
AlreadyCreatedException
\family default
 may be thrown if the index/table was already created.
\end_layout

\begin_layout Standard
The following commands are supported:
\end_layout

\begin_layout Itemize

\family typewriter
CREATE TABLE table_name ({column_name column_data_type[(type_size
\begin_inset Newline newline
\end_inset

 [multiplier])] [PRIMARY KEY] [DEFAULT value_default] [NOT NULL]}
\begin_inset Newline newline
\end_inset

 [,...] [, PRIMARY KEY (pk_column_name [,...])])
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
Description
\end_layout

\begin_layout Itemize
Creates the table with the given column definitions.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table to be created.
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: the name of the columns to be created.
 One or more.
 Cannot have space, neither has a size limit.
\end_layout

\begin_layout Itemize

\family typewriter
column_data_type
\family default
: the data type of the column.
 Must be one of the following (case insensitive):
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
SHORT
\family default
: represents the Java short type.
 Ranges from -32768 to +32767.
\end_layout

\begin_layout Itemize

\family typewriter
INT
\family default
: represents the Java integer type.
 Ranges from -2.147.483.648 to +2.147.483.647.
\end_layout

\begin_layout Itemize

\family typewriter
LONG
\family default
: represents the Java long type.
 Ranges from -9.223.372.036.854.775.808 to +9.223.372.036.854.775.807.
\end_layout

\begin_layout Itemize

\family typewriter
FLOAT
\family default
: represents the Java float type.
 Ranges from -3,40292347E+38 to +3,40292347E+38 on iPhone and from 1.4E-45
 to +3,40292347E+38 on the other platforms.
\end_layout

\begin_layout Itemize

\family typewriter
DOUBLE
\family default
: represents the Java double type.
 Ranges from 2.2250738585072014E-308 to +1,79769313486231570E+308 on iPhone
 and from 4.9E-324 to
\begin_inset Newline newline
\end_inset

+1,79769313486231570E+308 on the other platforms.
 When the column is of type 
\family typewriter
LONG
\family default
, it is necessary to append a suffix L (or l) to the number.
 E.G.: 20050411095951L.
 Also, when using 
\family typewriter
FLOAT
\family default
 types, it is needed to suffix it with a F (or f), otherwise the default
 type will be 
\family typewriter
DOUBLE
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
CHAR
\family default
: represents a case sensitive char array (each char range 
\family typewriter
u0000
\family default
 to 
\family typewriter

\backslash
uFFFF
\family default
).
 This is the one column type that must have the type size specified, from
 1 to 65535.
 E.G.: 
\family typewriter
char(1)
\family default
, 
\family typewriter
char(2000)
\family default
, etc.
\end_layout

\begin_layout Itemize

\family typewriter
CHAR NOCASE
\family default
: equivalent to 
\family typewriter
CHAR
\family default
, but searches are case insensitive, making the searches slower.
 E.G.: 
\family typewriter
char (20) nocase
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
VARCHAR
\family default
: internally it is equivalent to 
\family typewriter
CHAR
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
VARCHAR NOCASE
\family default
: internally it is equivalent to 
\family typewriter
CHAR NOCASE
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
DATE
\family default
: represents the Java/TotalCross 
\family typewriter
Date
\family default
 type.
 Ranges from all valid dates between 1000/01/01 and 2999/12/31.
 
\end_layout

\begin_deeper
\begin_layout Itemize
A date 'YYYY/MM/DD' (YYYY = year, MM = Month, DD = Day) is stored as a integer
 YYYYMMDD.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
DATETIME
\family default
: represents the Java/TotalCross 
\family typewriter
Time
\family default
 type.
 Ranges from all possible dates and times with valid dates.
 It is stored as two integers.
 
\end_layout

\begin_deeper
\begin_layout Itemize
the first integer represents a date 'YYYY/MM/DD' (YYYY = year, MM = Month,
 DD = Day) and is stored as a integer YYYYMMDD.
\end_layout

\begin_layout Itemize
the second, a time 'HH:MM:SS:ZZZ' (HH = hour, MM = minutes, SS = seconds,
 ZZZ = millis) and is stored as a integer HHMMSSZZZ.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
BLOB
\family default
: represents an array of bytes.
 It can be a picture or a video, for example.
 It has also a multiplier, which can be K (kilo) or M (mega).
 Its total size cannot be greater than 10 Mb.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
type_size
\family default
: used only for the 
\family typewriter
CHAR
\family default
, 
\family typewriter
CHAR NOCASE
\family default
, 
\family typewriter
VARCHAR
\family default
, 
\family typewriter
VARCHAR NOCASE
\family default
, and 
\family typewriter
BLOB
\family default
 column types.
 See above.
\end_layout

\begin_layout Itemize

\family typewriter
primary key
\family default
: determines that this column is the primary key one (only for one column
 of the table).
\end_layout

\begin_layout Itemize

\family typewriter
value_default
\family default
: the default value for the field.
 It must be of the same type of the field.
\end_layout

\begin_layout Itemize

\family typewriter
NOT NULL
\family default
 indicates that the column can't have a 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
pk_column_name
\family default
: the column names to specify a composed primary key.
\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE TABLE person (name char(40) nocase primary key, birthday int default
 20 not null, salary double default 2325.00, gender char(1), married char(3),
 age short)
\end_layout

\begin_layout Plain Layout

CREATE TABLE person2 (name char(40) nocase, birthday int default 20 not
 null, salary double default 2325.00, gender char(1), married char(3), age
 short, primary key (name, birthday))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
More about 
\family typewriter
DATE
\family default
 and 
\family typewriter
DATETIME
\end_layout

\end_deeper
\begin_layout Itemize
Use quotes for this data type.
\end_layout

\begin_deeper
\begin_layout Itemize
White spaces in the beginning or in the end are not considered.
\end_layout

\begin_layout Itemize
The date must be inserted in the one of following formats: 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
DATE
\family default
 format
\end_layout

\begin_deeper
\begin_layout Itemize
YYYY/MM/DD, YY/MM/DD, YY-MM-DD, YY-MM-DD
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
The 
\family typewriter
DATETIME
\family default
 must be inserted in one of the following formats: 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
DATE
\family default
 format + space + 
\family typewriter
TIME
\family default
 format
\end_layout

\begin_layout Itemize

\family typewriter
TIME
\family default
 format
\end_layout

\begin_deeper
\begin_layout Itemize
HH:MM:SS:ZZZ, HH:MM:SS, HH:MM, HH, H
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
The select statements recoveries 
\family typewriter
DATE
\family default
 and 
\family typewriter
DATETIME
\family default
 according with 
\family typewriter
appSettings
\family default
.
\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

create table person(name char(16), age int, birth date primary key, years
 DateTime)
\end_layout

\begin_layout Plain Layout

insert into person values ('renato novais', 12, '2005/9-12', '2006/08-21
 12:08')
\end_layout

\begin_layout Plain Layout

insert into person values ('indira gomes', 13, ' 2005/9-12', '05-4/3 1:8:59'
\end_layout

\begin_layout Plain Layout

insert into person values ('Zenes Oliveira', 20, '07/9-13', '2006/08-21
 13:08:59:431 '
\end_layout

\begin_layout Plain Layout

Select name, age, birth, years from person 
\end_layout

\begin_layout Plain Layout

Select name, age, birth, years from person where birth = ' 2005/09/12'
\end_layout

\begin_layout Plain Layout

Select name, age, birth, years from person where years != '05-4/3 01:8:59
 ' 
\end_layout

\begin_layout Plain Layout

Select min(years) as abirth from person
\end_layout

\begin_layout Plain Layout

Select max(birth) as abirth from person
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
CREATE INDEX index_name ON table_name(column_name [,...])
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Creates an index for the given table column.
 
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
index_name
\family default
: the name of the index.
 
\begin_inset Newline newline
\end_inset

Obs.: The 
\family typewriter
index_name
\family default
 is ignored and formed internally (but must be included in the SQL command).
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of table.
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: the name of column to be created the index.
 Here it is possible to specify one or more column names.
 Two or more column names generates a composed index.
\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CREATE INDEX indexperson ON person(birthday)
\end_layout

\begin_layout Plain Layout

CREATE INDEX indexperson2 ON person(name, birthday)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection

\family typewriter
executeUpdate()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
executeUpdate
\series default
(String sql)
\end_layout

\begin_layout Standard
Used to execute updates in a table (insert, delete, update, alter table,
 and drop).
 
\end_layout

\begin_layout Standard
The following commands are supported:
\end_layout

\begin_layout Itemize

\family typewriter
ALTER TABLE table_name DROP primary key
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Deletes the primary key of a table.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table.
\end_layout

\begin_layout Standard
Throws
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: if the table does not have a primary key.
\end_layout

\begin_layout Standard
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ALTER TABLE person DROP primary key
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ALTER TABLE table_name ADD primary key(column_name [,...])
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Adds a primary key to a table.
\end_layout

\end_deeper
\begin_layout Itemize
Parameters
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table.
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: the name(s) of the column(s) to be created the primary key.
\end_layout

\begin_layout Standard
Throws
\end_layout

\begin_layout Itemize

\family typewriter
PrimaryKeyViolationException
\family default
: if there is a repeated or null key in the table.
\end_layout

\begin_layout Standard
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ALTER TABLE person ADD primary key (salary)
\end_layout

\begin_layout Plain Layout

ALTER TABLE person ADD primary key (name, salary)
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ALTER TABLE table_name RENAME TO new_table_name
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Renames a table from 
\family typewriter
table_name
\family default
 to 
\family typewriter
new_table_name
\family default
.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table to be changed.
\end_layout

\begin_layout Itemize

\family typewriter
new_table_name
\family default
: the new name of the table.
\end_layout

\begin_layout Standard
Throws
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: if the new table name already exists.
\end_layout

\begin_layout Standard
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ALTER TABLE person RENAME TO employee
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ALTER TABLE table_name RENAME column_name TO new_column_name
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Renames a column of a table from 
\family typewriter
column_name
\family default
 to 
\family typewriter
new_column_name
\family default
.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table where the column will be changed.
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: the name of the column to be changed.
\end_layout

\begin_layout Itemize

\family typewriter
new_column_name
\family default
: the new name of the column.
\end_layout

\begin_layout Standard
Throws
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: if the new table already exists.
\end_layout

\begin_layout Standard
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ALTER TABLE person RENAME age TO years
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ALTER TABLE table_name ADD column_name column_data_type [(type_size [multiplier]
)][DEFAULT value_default] [NOT NULL]
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Adds a column to a table.
 The syntax is similar to a column declaration when a table is being created.
 However, it is not possible to add a column declaring it a primary key,
 because all rows will have the same value, being null or equal to the declared
 default value, which violates the primary key constraints.
 Moreover, if the column is declared as not null, there must be a default
 value different from null, because otherwise all the rows would have a
 null value in the new column.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
DROP TABLE table_name
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Deletes the table and all associated indices.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table.
\end_layout

\begin_layout Standard
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

DROP TABLE person
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
DROP INDEX {column_name [,...] | *} on table_name
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Deletes an index from the given table name.
 The index can be specified by its name(s) of the correspondent column(s)
 or by a wild card symbol (*), which deletes all indices associated with
 the table.
 ATTENTION: The index associated to the primary key is not deleted.
 So, if it is desired to delete this, one must use the 
\family typewriter
alter table
\family default
 statement.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: the name of the column.
 You can specify one or more fields name.
\end_layout

\begin_layout Itemize

\family typewriter
*
\family default
 : specifies to delete all indices associated to the table, except the primary
 key index.
 
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table.
\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

DROP INDEX salary ON person
\end_layout

\begin_layout Plain Layout

DROP INDEX * ON person
\end_layout

\begin_layout Plain Layout

DROP INDEX name, salary ON person
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
INSERT INTO table_name [(column_name [, ...])] {VALUES ({values} [, ...])}
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Inserts the given row into the table.
 The target column names may be listed in any order.
 The driver assumes 
\family typewriter
default
\family default
 values if you declared it.
 It is possible to insert 
\family typewriter
null
\family default
 too, but only if the field wasn't declared as 
\family typewriter
not null
\family default
.
 Note that it is necessary to give the column names only if their declared
 order is changed.
 If no list of column names is given, the default is all the columns of
 the table in their declared order.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table.
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: the name of the column (remember that it is possible to specify either
 ALL or ANY).
\end_layout

\begin_layout Itemize

\family typewriter
values
\family default
: a value to assign to the corresponding column.
\end_layout

\begin_layout Standard
Throws
\end_layout

\begin_layout Itemize

\family typewriter
PrimaryKeyViolationException
\family default
: if there is a repeated or null key in the table.
\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

INSERT INTO person (region, age, salary, married, birthday, gender, name)
 VALUES (1, 25, 10000, 'no', 19790606, 'M', 'Renato Novais')
\end_layout

\begin_layout Plain Layout

INSERT INTO person VALUES ('Indira Gomes', 19810228, 6000, 'F', 'no', 20,
 2)
\end_layout

\begin_layout Plain Layout

INSERT INTO person VALUES ('Cacul', 19800806, 5000, 'M', 'yes',25, 5)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Fields region, salary, married, birthday, and gender will be filled 
\end_layout

\begin_layout Plain Layout

// with default values (if you declared them) or null value if permitted.
 
\end_layout

\begin_layout Plain Layout

INSERT INTO person(name, age) VALUES ('Caio', null) 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
UPDATE table_name SET column_name = value [,...][WHERE condition]
\family default
 
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Changes the values of the specified columns in all rows that satisfy the
 condition.
 Only the columns to be modified need to be mentioned in the 
\family typewriter
set
\family default
 clause; columns not explicitly modified retain their previous values.
 It is possible to specify the condition in the 
\family typewriter
where
\family default
 clause to determine which rows will be modified.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table.
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: the name of the column.
\end_layout

\begin_layout Itemize

\family typewriter
expression
\family default
: an expression to assign to the column.
 
\end_layout

\begin_layout Itemize

\family typewriter
condition
\family default
: an expression that returns a value of type boolean.
 Only rows for which this expression returns true will be updated.
 
\end_layout

\begin_layout Standard
Throws
\end_layout

\begin_layout Itemize

\family typewriter
PrimaryKeyViolationException
\family default
: if there is a repeated or null key in the table.
\end_layout

\begin_layout Standard
Example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

UPDATE person SET salary = 8000 WHERE age = 20 or age is null
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
DELETE FROM table_name [WHERE condition]
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize
Deletes a row or a set of rows in agreement with conditions in 
\family typewriter
where
\family default
 clause.
 If the condition is omitted, the whole table is deleted, but its structure
 is preserved.
 The key word 
\family typewriter
from
\family default
 is optional.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name of the table.
\end_layout

\begin_layout Itemize

\family typewriter
condition
\family default
: an expression that returns a value of type boolean.
 Only rows for which this expression returns true will be deleted.
 
\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

DELETE FROM person WHERE name = 'Cacul'
\end_layout

\begin_layout Plain Layout

DELETE person WHERE age is not null
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection

\family typewriter
executeQuery()
\end_layout

\begin_layout Standard

\family typewriter
public ResultSet 
\series bold
executeQuery
\series default
(String sql)
\end_layout

\begin_layout Standard
Used to execute queries in a table.
 The whole table is searched for records that satisfy the conditions of
 the where clause.
 When the result set is closed, the memory related to its structures and
 to a possible temporary table is released.
 So its always a good idea to close the result set as soon as its no longer
 needed.
\end_layout

\begin_layout Standard
The following command is supported:
\end_layout

\begin_layout Itemize

\family typewriter
SELECT * | column_name [AS output_name] [, ...] | 
\begin_inset Newline newline
\end_inset

function_name(column_name) [AS output_name] [, ...] FROM 
\begin_inset Newline newline
\end_inset

table_name [[AS] table_name_alias] [,...] 
\begin_inset Newline newline
\end_inset

[WHERE condition] [GROUP BY column_name [, ...]] 
\begin_inset Newline newline
\end_inset

[HAVING condition] [ORDER BY column_name [ASC | DESC] [, ...]] 
\end_layout

\begin_deeper
\begin_layout Standard
Description
\end_layout

\begin_layout Itemize

\family typewriter
select
\family default
 retrieves rows from one or more tables.
 The general processing of 
\family typewriter
select
\family default
 is as follows.
\end_layout

\begin_layout Standard
Parameters
\end_layout

\begin_layout Itemize

\family typewriter
*
\family default
 : use this to return all columns in a query.
 
\end_layout

\begin_layout Itemize

\family typewriter
column_name
\family default
: here you specify the column names to be retrieved, grouped or ordered.
\end_layout

\begin_layout Itemize

\family typewriter
function_name
\family default
: the function applied on 
\family typewriter
column_name
\family default
.
 
\family typewriter
function_name
\family default
 must be one of the Litebase functions.
\end_layout

\begin_layout Itemize

\family typewriter
table_name
\family default
: the name(s) of the table(s) that will be retrieved.
\end_layout

\begin_layout Standard
Examples
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SELECT * FROM person
\end_layout

\begin_layout Plain Layout

SELECT * FROM person, department
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
IMPORTANT OBSERVATIONS 
\end_layout

\begin_layout Itemize

\family typewriter
SELECT * from table_name
\end_layout

\begin_deeper
\begin_layout Standard
If a query of this format is issued, with a wild card, a single table, no
 
\family typewriter
where
\family default
, 
\family typewriter
order by
\family default
, or 
\family typewriter
group by
\family default
 clauses, the query processing is faster since the table is not analyzed.
 Therefore, if the table is altered, the result set will be changed if it
 is already opened.
 For instance, if this kind of select is issued, not closed and a new row
 is inserted, the result set will also return the new row.
\end_layout

\end_deeper
\begin_layout Itemize
Whenever possible, do not use where clauses that do nothing such as 
\family typewriter
1=1
\family default
.
 This increase parser time and the where clause will not be all resolved
 using indices, turning the query processing slower.
\end_layout

\begin_layout Itemize
If instead of a 
\family typewriter
*
\family default
 the user lists all the fields of table_name in its correct order beginning
 with 
\family typewriter
rowid
\family default
, the query processing is as faster as when using 
\family typewriter
*
\family default
.
 However, if an alias is used, it will be ignored in the 
\family typewriter
ResultSetMetaData
\family default
.
\end_layout

\begin_layout Itemize
Queries with no sorting (
\family typewriter
order by
\family default
 and 
\family typewriter
group by
\family default
), join and aggregations do not use temporary tables.
 If the table is altered and a result set with not temporary table is still
 opened, it will be inconsistent.
\end_layout

\begin_layout Itemize
Condition clause: 
\family typewriter
WHERE
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
LIKE
\family default
 Statement
\end_layout

\begin_deeper
\begin_layout Itemize
The char '%' is a wild card in SQL.
 It is possible to use '%' at the start, at the end, both, in the middle
 (just one), or don't use it.
 In the last case, it is the same as equals (=).
\end_layout

\begin_layout Itemize
Examples: 
\family typewriter
WHERE <column_table>
\family default
...
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
LIKE '%cacul'
\family default
: it returns the tuples that ends with 'cacul'.
\end_layout

\begin_layout Standard

\family typewriter
LIKE 'renato%'
\family default
: it returns the tuples that starts with 'renato'.
\end_layout

\begin_layout Standard

\family typewriter
LIKE 'indira%mes'
\family default
: it returns the tuples that starts with 'indira' and ends with 'mes'.
\end_layout

\begin_layout Standard

\family typewriter
LIKE 'Zenes'
\family default
: it returns the tuples that is just equal to 'Zenes'.
\end_layout

\begin_layout Standard

\family typewriter
LIKE '%Jener%'
\family default
: it returns the tuples that contains 'Jener'.
\end_layout

\begin_layout Standard

\family typewriter
LIKE '%Luc%as%'
\family default
: it returns the tuples that contains 'Luc%as'.
\end_layout

\begin_layout Standard

\family typewriter
LIKE 'ind%ira%mes'
\family default
: it returns the tuples that starts with 'ind' and ends with 'ira%mes'.
 
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Itemize
Order clause: 
\family typewriter
ORDER BY
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
asc
\family default
 is default.
\end_layout

\begin_layout Itemize
It is possible to put various columns in the 
\family typewriter
order by
\family default
 clause.
 The 
\family typewriter
desc
\family default
 expression will work properly if used on any field.
 
\end_layout

\begin_layout Itemize
Examples
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ORDER BY name, age
\family default
: orders by name and by age.
\end_layout

\begin_layout Itemize

\family typewriter
ORDER BY name, age DESC
\family default
: orders by name in ascending order and age in descending order.
\end_layout

\begin_layout Itemize

\family typewriter
ORDER BY name DESC, age
\family default
: orders by name in descending order and age in descending order.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
Aggregation functions: 
\family typewriter
GROUP BY
\end_layout

\begin_deeper
\begin_layout Itemize
An alias is required for the aggregate function column.
\end_layout

\begin_layout Itemize
The following aggregation functions are permitted:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
avg()
\end_layout

\begin_layout Itemize

\family typewriter
max()
\end_layout

\begin_layout Itemize

\family typewriter
min()
\end_layout

\begin_layout Itemize

\family typewriter
sum()
\end_layout

\begin_layout Itemize

\family typewriter
count(*)
\end_layout

\end_deeper
\begin_layout Itemize
Example 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ResultSet rs = null;
\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	rs = driver.executeQuery("select age, sum(region) as tot from person 	group
 by age");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch(Exception exception)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Vm.debug(exception.getMessage());
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

while (rs.next())
\end_layout

\begin_layout Plain Layout

	Vm.debug("Name: " + rs.getString("age") + ", Total_Region: " + rs.getString("tot")
);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Note that the alias must be used in the result set.
 In the example above, this is 
\family typewriter
tot
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
A 
\family typewriter
ResultSet
\family default
 object is returned, as shown in the example above, and can be used to traverse
 the rows and also to get the column values.
\end_layout

\begin_layout Itemize
There's a special column name, 
\family typewriter
rowid
\family default
, that can be retrieved or used in the condition.
\end_layout

\begin_layout Itemize

\family typewriter
rowid
\family default
 cannot be updated.
 It is automatically generated for each row in the table, and is unique
 for each row, even after row deletions.
\end_layout

\begin_layout Itemize
If 
\family typewriter
rowid
\family default
 is used in a condition clause, it is strongly suggested that an index is
 created for it.
\end_layout

\begin_layout Itemize
When using *, the 
\family typewriter
rowid
\family default
 is not returned! It must be explicitly asked for, followed by the other
 columns to be retrieved.
\end_layout

\begin_layout Itemize
The 
\family typewriter
ResultSet
\family default
 class contains a very useful method that returns a string matrix with all
 fields in the 
\family typewriter
ResultSet
\family default
.
 It speeds up the filling of 
\family typewriter
ListBox
\family default
 and 
\family typewriter
Grid
\family default
.
 All selected columns are transformed to string.
\end_layout

\begin_layout Itemize
It is possible to use 
\family typewriter
setDecimalPlaces()
\family default
 to define how the doubles will be formatted when being converted to string.
\end_layout

\begin_layout Itemize
More Examples:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ResultSet rs = driver.executeQuery("select rowid, name, salary, age from
 person where age != 44");
\end_layout

\begin_layout Plain Layout

rs.afterLast();
\end_layout

\begin_layout Plain Layout

while (rs.next())
\end_layout

\begin_layout Plain Layout

	Vm.debug("RowID: " + rs.getString(1) + " Name: " + rs.getString(2) + " Salary:
 " + rs.getString(3) + " - " + rs.getInt("age")+ " years" );
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// A method that returns a string matrix to fill a ListBox or a Grid.
\end_layout

\begin_layout Plain Layout

public String[][] search(char startChar)
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	String sql;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	// The select statements return only rows where name starts with 'startChar'.
\end_layout

\begin_layout Plain Layout

	sql = "SELECT rowid, name, gender, married, age, salary FROM person WHERE
 name like '" + startChar + "%'"; 
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	ResultSet rs = driver.executeQuery(sql);
\end_layout

\begin_layout Plain Layout

	if (rs.first())
\end_layout

\begin_layout Plain Layout

		return rs.getStrings(-1,true,false);
\end_layout

\begin_layout Plain Layout

	else 
\end_layout

\begin_layout Plain Layout

		return null;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Using the method 'seach'.
\end_layout

\begin_layout Plain Layout

private Grid gridNames; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// The initialization of the Grid must be implemented.
 
\end_layout

\begin_layout Plain Layout

String[][] people = search("R");
\end_layout

\begin_layout Plain Layout

if (people == null)
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	gridNames.clear(); 
\end_layout

\begin_layout Plain Layout

	Vm.debug("There's no person started with this char"); 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

else 
\end_layout

\begin_layout Plain Layout

	gridNames.setItems(people);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection

\family typewriter
prepareStatement()
\end_layout

\begin_layout Standard

\family typewriter
public PreparedStatement 
\series bold
prepareStatement
\series default
(String sql)
\end_layout

\begin_layout Standard
Creates a pre-compiled statement with the given SQL.
 Prepared statements are faster for repeated queries; instead of parsing
 the same query where only a few arguments change, the prepared statement
 is created and the query is pre-parsed.
 Then, it is only necessary set the arguments (defined as ? in the SQL)
 and run the SQL, where the index for the argument starts from 0.
 Note that recreating the prepared statement with the same SQL is a waste
 of time, which reduces the performance of the program.
 Even though the prepared statement is a singleton, trying to prepare the
 same SQL many times is a waste of time because there is some processing
 and memory usage.
\end_layout

\begin_layout Standard
It is possible to find a complete example in 
\family typewriter
PreparedStatement
\family default
 class section.
\end_layout

\begin_layout Standard
When a table is dropped and recreated, the prepared statements that use
 it must be re-prepared because the re-created table might have a different
 structure.
 This must also be done when the connection is closed and re-opened again.
 The explanation for this is similar: the new connection may be different
 and Litebase may behave unecpectly if this could be done.
\end_layout

\begin_layout Subsection

\family typewriter
getCurrentRowId()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getCurrentRowId
\series default
(String tableName)
\end_layout

\begin_layout Standard
Returns the current 
\family typewriter
rowid
\family default
 for a given table.
 This method is useful to find the 
\family typewriter
rowid
\family default
 of the last inserted record: just subtract 1 from the returned value.
 After a record is inserted, the 
\family typewriter
rowid
\family default
 is incremented, so, if one gets the 
\family typewriter
rowid
\family default
 after inserting the record, it is necessary subtract 1; if one gets the
 
\family typewriter
rowid
\family default
 before inserting the row, then that's exactly the value.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: the name of the table.
\end_layout

\begin_layout Standard
Returns: 
\end_layout

\begin_layout Itemize
The current 
\family typewriter
rowid
\family default
.
\end_layout

\begin_layout Standard
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: if the table doesn't exist.
\end_layout

\begin_layout Standard
\align block
Only note that (although very difficult to happen) the 
\family typewriter
rowid
\family default
 may be < 0, because it is internally stored in the last 28 bits of an unsigned
 integer (32 bits integer), and, thus, if the 
\family typewriter
rowid
\family default
 gets over 134,217,728, it will be returned as a negative number in this
 method.
 But this causes no harm.
 It can be stored as a negative value that it will be correctly used by
 Litebase.
 Moreover, it is very unlikely that a table for nowadays devices will get
 more then this huge number of inserts.
 However, if so, please re-create the table from scratch.
\end_layout

\begin_layout Subsection

\family typewriter
getRowCount()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getRowCount
\series default
(String tableName)
\end_layout

\begin_layout Standard
Returns the number of valid rows in a table.
 This may be different from the number of records if a row has been deleted.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name to get number of rows.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The number of rows.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
See
\begin_inset space ~
\end_inset

Also: 
\end_layout

\begin_layout Itemize

\family typewriter
getRowCountDeleted()
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
setRowInc()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setRowInc
\series default
(String tableName, int inc)
\end_layout

\begin_layout Standard
Sets the row increment used when creating or updating big amounts of data.
\end_layout

\begin_layout Standard
Using this method greatly increases the speed of bulk insertions (about
 3x faster).
 To use it, you must call it (preferable) with the amount of rows that will
 be inserted.
 
\end_layout

\begin_layout Standard
After the insertion is finished, it is NECESSARY to call it again, passing
 -1 as the inc argument.
 Without doing this last step, one may lose data because some writes will
 be delayed until the method is called again with -1.
 Another good optimization on bulk insertions is to drop the indices and
 then create them afterwards.
 So, to correctly use 
\family typewriter
setRowInc()
\family default
, one must: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

driver.setRowInc("table_name", totalNumberOfRows); 
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

// Fetches the data and insert them.
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

driver.setRowInc("table_name", -1); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using prepared statements on insertion makes it another couple of times
 faster.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name.
 
\end_layout

\begin_layout Itemize

\family typewriter
inc
\family default
: The row increment.
\end_layout

\begin_layout Subsection

\family typewriter
convert()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
convert
\series default
(String tableName)
\end_layout

\begin_layout Standard
Converts a table from the previous Litebase table version to the current
 one.
 If the table format is older than the previous table version, this method
 can't be used and a 
\family typewriter
DriverException
\family default
 will be thrown.
 It is possible to know if the table version is not compatible with the
 current version used in Litebase because an exception will be thrown if
 one tries to open a table with the old format.
 The table name to be converted must be specified.
 The table will be closed after using this method and must be closed before
 it.
 Notice that the table 
\family typewriter
.db
\family default
 file will be overwritten, so it is highly recommended to backup the tables.
 Nowadays, the 
\family typewriter
convert()
\family default
 works to convert from versions 2.1 till 2.14 to the current version.
 Tables from the versions 2.20 to 2.52 do not need to be converted to the
 table format for Litebase 2.53.
 
\end_layout

\begin_layout Standard
For more information of how to use this, see the chapter 
\begin_inset CommandInset ref
LatexCommand nameref
reference "chap:Migration-from-Different"

\end_inset

.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name to convert.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws: 
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the table format is older than the previous table version.
\end_layout

\begin_layout Subsection

\family typewriter
exists()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
exists
\series default
(String tableName)
\end_layout

\begin_layout Standard
Returns if the given table already exists.
 This method can be used before dropping the table.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name to check if it exists.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the table exists; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
 If the 
\family typewriter
.db
\family default
 file exists but not the 
\family typewriter
.dbo
\family default
 file.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (driver.exists("person")
\end_layout

\begin_layout Plain Layout

	driver.executeUpdate("DROP TABLE person");
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
closeAll()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
closeAll
\series default
()
\end_layout

\begin_layout Standard
Closes all files, so that they are immediately flushed to disk (on the desktop)
 and releases the file handles (on the device).
 When this method is issued, all tables opened in the connection are also
 closed and the prepared statements will be in an invalid state.
 Therefore, the prepared statement of the closed connection must be prepared
 again if they will be used later on.
 Note that, after this is called, all result sets and prepared statements
 created with this Litebase instance will be in an inconsistent state, and
 using them will raise an 
\family typewriter
IllegalStateException
\family default
.
 This method also deletes the active instance for this creator id from Litebase
 internal table.
 
\end_layout

\begin_layout Subsection

\family typewriter
purge()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
purge
\series default
(String tableName)
\end_layout

\begin_layout Standard
Used to delete physically the records of the given table.
 Records are always deleted logically, to avoid the need of recreating the
 indices.
 When a new record is added, it doesn't occupy the position of the previously
 deleted one.
 This can make the table big, if a table is created, filled and have a couple
 of records deleted, thus wasting space.
 This method will remove all deleted records and recreate the indices accordingl
y.
 Note that it can take some time to run.
 Therefore this operation should not be executed very often, This should
 not be done if your table has less then 10% of deleted rows.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Important: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
rowid
\family default
 of the records is NOT changed with this operation.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name to purge.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The number of purged records.
\end_layout

\begin_layout Subsection

\family typewriter
getRowCountDeleted()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getRowCountDeleted
\series default
(String tableName)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The number of deleted records.
\end_layout

\begin_layout Subsection

\family typewriter
getRowIterator()
\begin_inset CommandInset label
LatexCommand label
name "sub:getRowIterator()"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
public RowIterator 
\series bold
getRowIterator
\series default
(String tableName)
\end_layout

\begin_layout Standard
With it it is possible to iterate through all the rows of a table in sequence
 and get its attributes.
 This is good for synchronizing a table.
 While the iterator is active, no queries or updates must be done, unless
 one wants to corrupt the data.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name to get a row iterator.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The 
\family typewriter
RowIterator
\family default
 object.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// This method removes physically all deleted records on table person and
 sets all records as sync.
\end_layout

\begin_layout Plain Layout

public void setTableSync() 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	RowIterator ri = null; 
\end_layout

\begin_layout Plain Layout

	try 
\end_layout

\begin_layout Plain Layout

	{ 
\end_layout

\begin_layout Plain Layout

		driver.purge("person"); // Deletes physically the rows.
 
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// Sets all as synchronized.
 
\end_layout

\begin_layout Plain Layout

		ri = driver.getRowIterator("person"); 
\end_layout

\begin_layout Plain Layout

		while (ri.next()) 
\end_layout

\begin_layout Plain Layout

			ri.setSynced();
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	catch (Exception exception) 
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		
\backslash
* ...
 *
\backslash

\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	finally 
\end_layout

\begin_layout Plain Layout

	{ 
\end_layout

\begin_layout Plain Layout

		if (ri != null)
\end_layout

\begin_layout Plain Layout

			ri.close(); 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
getLogger()
\end_layout

\begin_layout Standard

\family typewriter
public static synchronized Logger 
\series bold
getLogger
\series default
()
\end_layout

\begin_layout Standard

\family typewriter
LitebaseConnection.logger
\family default
 is public and can be accessed directly.
 This should be done unless logger is used within threads.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The current Litebase logger, a 
\family typewriter
Logger
\family default
 object.
 
\end_layout

\begin_layout Subsection

\family typewriter
setLogger()
\end_layout

\begin_layout Standard

\family typewriter
public static synchronized void 
\series bold
setLogger
\series default
(Logger logger)
\end_layout

\begin_layout Standard
Sets the litebase logger.
 This enables log messages for all queries and statements of Litebase and
 can be very useful to help finding bugs in the system.
 Logs take up memory space, so turn them on only when necessary.
 
\end_layout

\begin_layout Standard

\family typewriter
LitebaseConnection.logger
\family default
 is public and can be accessed directly.
 This should be done unless logger is used within threads.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
logger
\family default
: The 
\family typewriter
Logger
\family default
 object to be used with Litebase.
 
\end_layout

\begin_layout Subsection

\family typewriter
getDefaultLogger()
\end_layout

\begin_layout Standard

\family typewriter
public static synchronized Logger 
\series bold
getDefaultLogger
\series default
() 
\end_layout

\begin_layout Standard
Gets the default Litebase logger.
 This was already explained.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
A logger for Litebase, which is a 
\family typewriter
Logger
\family default
 object.
 
\end_layout

\begin_layout Subsection

\family typewriter
DeleteLogFiles()
\end_layout

\begin_layout Standard

\family typewriter
public static int 
\series bold
deleteLogFiles
\series default
() 
\end_layout

\begin_layout Standard
Deletes all log files found in the device.
 If log is enabled, the current log file is not affected by this command.
 It only deletes logs created with 
\family typewriter
getDefaultLogger().
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The number of files deleted.
\end_layout

\begin_layout Subsection

\family typewriter
processLogs()
\end_layout

\begin_layout Standard

\family typewriter
public static LitebaseConnection 
\series bold
processLogs
\series default
(String[] sql, String params,
\begin_inset Newline newline
\end_inset

boolean debug) 
\end_layout

\begin_layout Standard
This is a handy method that can be used to reproduce all commands of a log
 file.
 This is intended to be used by the development team only.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
sql
\family default
: An array of SQL commands.
\end_layout

\begin_layout Itemize

\family typewriter
params
\family default
: Similar to params from 
\family typewriter
getInstance()
\family default
 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:getInstance()"

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
debug
\family default
: If 
\family typewriter
true
\family default
, debugs the commands and possible exceptions to the debug console.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The 
\family typewriter
LitebaseConnection
\family default
 instance created, or 
\family typewriter
null
\family default
 if 
\family typewriter
closeAll()
\family default
 was the last command executed (or no commands were executed at all).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] sql =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"new LitebaseConnection(MBSL,null)", 
\end_layout

\begin_layout Plain Layout

	"create table PRODUTO (IDPRODUTO int, IDPRODUTOERP char(10), IDGRUPOPRODUTO
 int, IDSUBGRUPOPRODUTO int, IDEMPRESA char(20), DESCRICAO char(100), UNDCAIXA
 char(10), PESO float, UNIDADEMEDIDA char(3), EMBALAGEM char(10), PORCTROCA
 float, PERMITETROCA int)",
\end_layout

\begin_layout Plain Layout

	"create index IDX_PRODUTO_1 on PRODUTO(IDPRODUTO)",
\end_layout

\begin_layout Plain Layout

	"create index IDX_PRODUTO_2 on PRODUTO(IDGRUPOPRODUTO)",
\end_layout

\begin_layout Plain Layout

	"create index IDX_PRODUTO_3 on PRODUTO(IDEMPRESA)",
\end_layout

\begin_layout Plain Layout

	"create index IDX_PRODUTO_4 on PRODUTO(DESCRICAO)",
\end_layout

\begin_layout Plain Layout

	"closeAll",
\end_layout

\begin_layout Plain Layout

	"new LitebaseConnection(MBSL, null)",
\end_layout

\begin_layout Plain Layout

	"insert into PRODUTO values(1, '19132', 2, 1, '1, 2, 3', 'ABSORVENTE SILHO
 ABAS','5',13,'PCT','20X30',10,0)"
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

LitebaseConnection.processLogs(sql, true);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, for this method, the path can't be passed in new 
\family typewriter
LitebaseConnection
\family default
; 
\family typewriter
params
\family default
 must be used instead.
 It is not forbidden to pass a path to the connection, but it is not used.
\end_layout

\begin_layout Subsection

\family typewriter
recoverTable()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
recoverTable
\series default
(String tableName)
\end_layout

\begin_layout Standard
If a table is not closed properly and was modified since the last opening,
 that is, closed when exiting the application properly or issuing a 
\family typewriter
closeAll()
\family default
, when trying to open it again, a 
\family typewriter

\begin_inset Newline newline
\end_inset

TableNotClosedException
\family default
 will be thrown.
 This does not mean that the table is corrupted, but it can be the case.
\end_layout

\begin_layout Standard
Therefore, whenever a table cannot be opened because of the exception above,
 
\family typewriter

\begin_inset Newline newline
\end_inset

recoverTable()
\family default
 should be used to recover it.
 Notice that the table must be closed before using it, which will be the
 case if a 
\family typewriter
TableNotClosedException
\family default
 is thrown.
 It will also be closed after this method finishes.
\end_layout

\begin_layout Standard
This method will invalidate every record whose CRC does not match the stored
 CRC, marking it as deleted and settings its 
\family typewriter
rowid
\family default
 to zero.
 The corrupted records can be accessed via 
\family typewriter
RowIterator
\family default
 methods.
 If the table was closed properly before calling this method, a 
\family typewriter
DriverException
\family default
 will be thrown because there is nothing to be recovered.
 
\end_layout

\begin_layout Standard
Many programmers try to recover the tables in the beginning of the application.
 If there is something to be recovered, it can be a slow process and the
 application user might think that the application has frozen and reset
 the device.
 To avoid this, it is a good idea to tell the user what is happening.
 A suggestion is given below, using the methods 
\family typewriter
listAllTables()
\family default
 and 
\family typewriter
isTableProperlyClosed()
\family default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The name of the table to be recovered.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if there was rows to be recovered; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the table was closed properly before calling this method.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Searches for a not closed properly table and recovers it.
\end_layout

\begin_layout Plain Layout

LitebaseConnection con = LitebaseConnection.getInstance();
\end_layout

\begin_layout Plain Layout

String[] arqs = con.listAllTables();
\end_layout

\begin_layout Plain Layout

int notClosed = 0,
\end_layout

\begin_layout Plain Layout

    i = args.length,
\end_layout

\begin_layout Plain Layout

    j = 1; 
\end_layout

\begin_layout Plain Layout

while (--i >= 0)
\end_layout

\begin_layout Plain Layout

	if (!con.isTableProperlyClosed(arqs[i]))
\end_layout

\begin_layout Plain Layout

		notClosed++;
\end_layout

\begin_layout Plain Layout

if (notClosed > 0)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String msg1 = "Recovering data
\backslash
n(step ",
\end_layout

\begin_layout Plain Layout

         msg2 = " out of " + notClosed + ")";
\end_layout

\begin_layout Plain Layout

	ProgressBox pb = new ProgressBox("", msg1 + '0' + msg2, null);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	pb.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

	i = args.length;
\end_layout

\begin_layout Plain Layout

	while (--i >= 0)
\end_layout

\begin_layout Plain Layout

		if (!con.isTableProperlyClosed(arqs[i]))
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			try 
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				con.recoverTable(arqs[i]);
\end_layout

\begin_layout Plain Layout

			} 
\end_layout

\begin_layout Plain Layout

			catch (Exception exception) 
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				exception.printStackTrace();
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			pb.setText(msg1 + (j++) + msg2);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	pb.unpop();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
getSlot()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getSlot
\series default
()
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
Deprecated .
 It was the slot being used on Palm OS.
 It just returns -1.
\end_layout

\begin_layout Subsection

\family typewriter
isOpen()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isOpen
\series default
(String tableName) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The name of the table to check if it is open..
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the table is opened in the current connection; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
dropDatabase()
\end_layout

\begin_layout Standard

\family typewriter
public static void 
\series bold
dropDatabase
\series default
(String crid, String sourcePath, int slot)
\family default
 
\end_layout

\begin_layout Standard
Drops all the tables from a database represented by its application id and
 path.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
crid
\family default
: The application id of the database.
\end_layout

\begin_layout Itemize

\family typewriter
sourcePath
\family default
: The path where the files are stored.
\end_layout

\begin_layout Itemize

\family typewriter
slot
\family default
: It was the slot on Palm OS where the source path folder was stored.
 Not used anymore.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the database is not found.
\end_layout

\begin_layout Subsection

\family typewriter
isTableProperlyClosed()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isTableProperlyClosed
\series default
(String tableName)
\end_layout

\begin_layout Standard
Indicates if a table is closed properly or not.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table to be verified.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the table is closed properly or is open (a not properly closed table
 can't be opened); 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the table is corrupted.
 
\end_layout

\begin_layout Subsection

\family typewriter
listAllTables()
\end_layout

\begin_layout Standard

\family typewriter
public String[] 
\series bold
listAllTables
\series default
() 
\end_layout

\begin_layout Standard
Lists all the table names from the current connection.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
An array of all the table names of the current connection.
\end_layout

\begin_layout Section

\family typewriter
ResultSet
\family default
 Class
\end_layout

\begin_layout Standard
This class represents a set or rows resulting from a 
\family typewriter
LitebaseConnection.executeQuery()
\family default
 method call.
 It cannot be directly instantiated.
 With this class you can cover the virtual rows of table, and you can discover
 the meta data of a table.
 These methods will also throw an 
\family typewriter

\begin_inset Newline newline
\end_inset

IllegalStateException
\family default
 if the result set or the Litebase connection where it was created is closed.
 I
\backslash
O problems will also raise 
\family typewriter
DriverException
\family default
s.
 When accessing the result set columns, invalid indices will raise an 
\family typewriter
IllegalArgumentException
\family default
, unknown column names will raise a 
\family typewriter
DriverException
\family default
, and trying to fetch a column value from the result set with a method to
 fetch data with a incompatible type will result in 
\family typewriter
DriverException
\family default
.
 
\end_layout

\begin_layout Subsection

\family typewriter
getResultSetMetaData()
\end_layout

\begin_layout Standard

\family typewriter
public ResultSetMetaData 
\series bold
getResultSetMetaData
\series default
()
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The meta data for this result set.
 
\end_layout

\begin_layout Standard
See the 
\family typewriter
ResultSetMetaData
\family default
 class 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sec:ResultSetMetaData-Class"

\end_inset

for more information.
 There it can be found a good example with 
\family typewriter
ResultSet
\family default
 and the 
\family typewriter
ResultSetMetaData
\family default
 classes.
\end_layout

\begin_layout Subsection

\family typewriter
close()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
close
\series default
()
\end_layout

\begin_layout Standard
Releases all memory allocated for this object.
 Its a GOOD idea to call this when it is no longer needed, but it is also
 called by the GC when the object is no longer in use.
 This can be issued even if the driver is already closed.
\end_layout

\begin_layout Subsection

\family typewriter
beforeFirst()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
beforeFirst
\series default
()
\end_layout

\begin_layout Standard
Places the cursor before the first record.
\end_layout

\begin_layout Subsection

\family typewriter
afterLast()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
afterLast
\series default
()
\end_layout

\begin_layout Standard
Places the cursor after the last record.
\end_layout

\begin_layout Subsection

\family typewriter
first()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
first
\series default
()
\end_layout

\begin_layout Standard
Places the cursor in the first record.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if it was possible to place the cursor in the first record; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
last()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
last
\series default
()
\end_layout

\begin_layout Standard
Places the cursor in the last record.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if it was possible to place the cursor in the last record; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
next()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
next
\series default
()
\end_layout

\begin_layout Standard
Places the cursor in the next record of this 
\family typewriter
ResultSet
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if it was possible to place the cursor in the next record; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
prev()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
prev
\series default
()
\end_layout

\begin_layout Standard
Places the cursor in the record of this 
\family typewriter
ResultSet
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if it was possible to place the cursor in the previous record; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
getShort()
\end_layout

\begin_layout Standard

\family typewriter
public short 
\series bold
getShort
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
short
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.
 
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
short
\family default
 if it was created with this precision or if the data being fetched is the
 result of a 
\family typewriter
date
\family default
 or 
\family typewriter
datetime
\family default
 SQL function.
\end_layout

\begin_layout Subsection

\family typewriter
getShort()
\end_layout

\begin_layout Standard

\family typewriter
public short 
\series bold
getShort
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a short value that is
 represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
short
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.
 
\end_layout

\begin_layout Subsection

\family typewriter
getInt()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getInt
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
An 
\family typewriter
int
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.
 
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
int
\family default
 if it was created with this precision.
 
\end_layout

\begin_layout Subsection

\family typewriter
getInt()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getInt
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns an 
\family typewriter
int
\family default
 value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
An 
\family typewriter
int
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.
 
\end_layout

\begin_layout Subsection

\family typewriter
getLong()
\end_layout

\begin_layout Standard

\family typewriter
public long 
\series bold
getLong
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
long
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.
 
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
long
\family default
 if it was created with this precision.
 
\end_layout

\begin_layout Subsection

\family typewriter
getLong()
\end_layout

\begin_layout Standard

\family typewriter
public long 
\series bold
getLong
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a 
\family typewriter
long
\family default
 value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
long
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.
 
\end_layout

\begin_layout Subsection

\family typewriter
getFloat()
\end_layout

\begin_layout Standard

\family typewriter
public float 
\series bold
getFloat
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
float
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.0.
 
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
float
\family default
 if it was created with this precision.
 
\end_layout

\begin_layout Subsection

\family typewriter
getFloat()
\end_layout

\begin_layout Standard

\family typewriter
public float 
\series bold
getFloat
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a 
\family typewriter
float
\family default
 value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
float
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.0.
\end_layout

\begin_layout Subsection

\family typewriter
getDouble()
\end_layout

\begin_layout Standard

\family typewriter
public double 
\series bold
getDouble
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
double
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.0.
 
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
double
\family default
 if it was created with this precision.
\end_layout

\begin_layout Subsection

\family typewriter
getDouble()
\end_layout

\begin_layout Standard

\family typewriter
public double 
\series bold
getDouble
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a 
\family typewriter
double
\family default
 value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
double
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 0.0.
\end_layout

\begin_layout Subsection

\family typewriter
getChars()
\end_layout

\begin_layout Standard

\family typewriter
public char[] 
\series bold
getChars
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
char
\family default
 array that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
char[]
\family default
 if it was created as a string type (
\family typewriter
char
\family default
, 
\family typewriter
char nocase
\family default
, 
\family typewriter
varchar
\family default
, or 
\family typewriter
varchar nocase
\family default
).
\end_layout

\begin_layout Subsection

\family typewriter
getChars()
\end_layout

\begin_layout Standard

\family typewriter
public char[] 
\series bold
getChars
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a 
\family typewriter
char
\family default
 array value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
char
\family default
 array that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getBlob()
\end_layout

\begin_layout Standard

\family typewriter
public byte[] 
\series bold
getBlob
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
byte
\family default
 array that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
byte[]
\family default
 if it was created as a 
\family typewriter
blob
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getBlob()
\end_layout

\begin_layout Standard

\family typewriter
public byte[] 
\series bold
getBlob
\series default
(
\series bold
String
\series default
 colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a 
\family typewriter
byte
\family default
 array value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
byte
\family default
 array that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getString()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getString
\series default
(int colIdx)
\end_layout

\begin_layout Standard
Any column type can be returned as a string except for 
\family typewriter
blob
\family default
.
 
\family typewriter
double
\family default
/
\family typewriter
float
\family default
 values formatting will use the precision set with the 
\family typewriter
setDecimalPlaces()
\family default
 method.
 If the field has 
\family typewriter
datetime
\family default
 type, the millis is not returned.
 One can use the 
\family typewriter
getTime()
\family default
 to get the millis.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The column value as a string.
 If the value is SQL 
\family typewriter
null
\family default
 or the column is of type blob, the value returned is 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Subsection

\family typewriter
getString()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getString
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a string that is represented
 by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The column value as a string.
 If the value is SQL 
\family typewriter
null
\family default
 or the column is of type 
\family typewriter
blob
\family default
, the value returned is 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Subsection

\family typewriter
getStrings()
\end_layout

\begin_layout Standard

\family typewriter
public String[][] 
\series bold
getStrings
\series default
()
\end_layout

\begin_layout Standard
Starting from the current cursor position (must use 
\family typewriter
first()
\family default
, 
\family typewriter
last()
\family default
, 
\family typewriter
prev()
\family default
 or 
\family typewriter
next()
\family default
, not 
\family typewriter
beforeFirst()
\family default
 or 
\family typewriter
afterLast()
\family default
), it reads all result set rows that's being requested from the current
 one.
 This method moves the cursor to the row after the last one fetched.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
A matrix, where 
\family typewriter
String[0]
\family default
 is the first row, and 
\family typewriter
String[0][0], String[0][1]...

\family default
 are the column elements of the first row.
 Returns 
\family typewriter
null
\family default
 if there's no more element to be fetched.
 
\family typewriter
double
\family default
/
\family typewriter
float
\family default
 values will be formatted using the 
\family typewriter
setDecimalPlaces()
\family default
 settings.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned in its matrix position is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: if the result set cursor is in an invalid position.
\end_layout

\begin_layout Subsection

\family typewriter
getStrings()
\end_layout

\begin_layout Standard

\family typewriter
public String[][] 
\series bold
getStrings
\series default
(int count)
\end_layout

\begin_layout Standard
This is the most powerful method of this class.
 Starting from the current cursor position (must use 
\family typewriter
first()
\family default
, 
\family typewriter
last()
\family default
, 
\family typewriter
prev()
\family default
 or 
\family typewriter
next()
\family default
, not 
\family typewriter
beforeFirst()
\family default
 or 
\family typewriter
afterLast()
\family default
), it reads the smallest number of rows between the requested amount and
 the number of rows from the current cursor position till the end of the
 result set.
 This method moves the cursor to the row after the last one fetched.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
count:
\family default
 The number of rows to be fetched, or -1 for all.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
A matrix, where 
\family typewriter
String[0]
\family default
 is the first row, and 
\family typewriter
String[0][0], String[0][1]...

\family default
 are the column elements of the first row.
 Returns 
\family typewriter
null
\family default
 if there's no more element to be fetched.
 
\family typewriter
double
\family default
/
\family typewriter
float
\family default
 values will be formatted using the 
\family typewriter
setDecimalPlaces()
\family default
 settings.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned in its matrix position is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: if the result set pointer is in an invalid position.
\end_layout

\begin_layout Itemize

\family typewriter
IllegalArgumentException
\family default
: if the count argument is smaller than -1.
\end_layout

\begin_layout Standard
NOTE: To populate a grid, since the application won't be able to show all
 the rows at the same time if there are many of them, it is better to use
 this version of 
\family typewriter
getStrings()
\family default
 instead of loading all the result set in the grid using the previous method.
 This way, the grid is being filled in runtime when the user rolls the scroll
 bar.
 Moreover, this reduces the chances of getting an 
\family typewriter
OutOfMemoryError
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import litebase.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.dialog.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.event.*;
\end_layout

\begin_layout Plain Layout

import totalcross.util.Comparable;
\end_layout

\begin_layout Plain Layout

import totalcross.sys.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class TCTestWin extends MainWindow implements PressListener, Grid.DataSour
ce
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	static class CodDesc implements Comparable
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		String desc;
\end_layout

\begin_layout Plain Layout

		int index; // The table is ordered by codigo.
\end_layout

\begin_layout Plain Layout

		static ResultSet rs;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		public CodDesc(int idx)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			index = idx;
\end_layout

\begin_layout Plain Layout

			desc = rs.getString("descricao");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public int compareTo(Object other) throws ClassCastException
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			return desc.compareTo(((CodDesc)other).desc);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	LitebaseConnection lb = LitebaseConnection.getInstance();
\end_layout

\begin_layout Plain Layout

	Grid grid;
\end_layout

\begin_layout Plain Layout

	RadioGroupController rg;
\end_layout

\begin_layout Plain Layout

	CodDesc[] cds; // Ordered by codigo.
\end_layout

\begin_layout Plain Layout

	CodDesc[] dcs; // Ordered by descricao.
\end_layout

\begin_layout Plain Layout

	Label stat;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public TCTestWin()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Vista);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			stat = new Label("Loading...");
\end_layout

\begin_layout Plain Layout

			stat.setFont(font.asBold());
\end_layout

\begin_layout Plain Layout

			add(stat, LEFT, AFTER, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

			repaintNow();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

			// First, loads.
\end_layout

\begin_layout Plain Layout

			int ini = Vm.getTimeStamp();
\end_layout

\begin_layout Plain Layout

			ResultSet rs = lb.executeQuery("select rowid, codigo, codigogrupo, descricao,
 embalagem, vendaminima, preco, codigobarras, estoque, obs, flaggrade, falta,
 novo, promocao, descontocmaximo from tblafvproduto01");
\end_layout

\begin_layout Plain Layout

			cds = new CodDesc[rs.getRowCount()];
\end_layout

\begin_layout Plain Layout

			CodDesc.rs = rs;
\end_layout

\begin_layout Plain Layout

			for (int i = 0; rs.next(); i++)
\end_layout

\begin_layout Plain Layout

				cds[i] = new CodDesc(i);
\end_layout

\begin_layout Plain Layout

			stat.setText("Load time: " + (Vm.getTimeStamp() - ini) + "ms");
\end_layout

\begin_layout Plain Layout

			stat.repaintNow();
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

			// Now, sorts.
\end_layout

\begin_layout Plain Layout

			ini = Vm.getTimeStamp();
\end_layout

\begin_layout Plain Layout

			dcs = new CodDesc[cds.length];
\end_layout

\begin_layout Plain Layout

			Vm.arrayCopy(cds, 0, dcs, 0, cds.length); // Copies the references.
\end_layout

\begin_layout Plain Layout

			qsortDesc(dcs, 0, dcs.length - 1);
\end_layout

\begin_layout Plain Layout

			stat.setText(stat.getText() + " .
 Sorting: " 
\end_layout

\begin_layout Plain Layout

			+ (Vm.getTimeStamp() - ini) + "ms");
\end_layout

\begin_layout Plain Layout

			String[] tit {"rowid", "codigo", "codigogrupo", "descricao", "embalagem",
 "vendaminima", "preco", "codigobarras", "estoque", "obs", "flaggrade",
 "falta", "novo", "promocao", "descontocmaximo"};
\end_layout

\begin_layout Plain Layout

			int[] align = {LEFT, LEFT, LEFT, LEFT, LEFT, LEFT, LEFT, LEFT, LEFT,
 LEFT, LEFT, LEFT, LEFT, LEFT, LEFT};
\end_layout

\begin_layout Plain Layout

			
\end_layout

\begin_layout Plain Layout

			// Hides rowid and codigogrupo.
 Negative values mean %.
\end_layout

\begin_layout Plain Layout

			int[] widths = {0, -10, 0, -30, -10, -10, -10, -10, -10, -10, -10, -10,
 -10, -10, -10}; 
\end_layout

\begin_layout Plain Layout

			Radio r = new Radio("Cdigo", rg = new RadioGroupController());
\end_layout

\begin_layout Plain Layout

			add(new Label("Order by"), LEFT, AFTER, PREFERRED, r.getPreferredHeight());
\end_layout

\begin_layout Plain Layout

			add(r, AFTER + 2, SAME); r.addPressListener(this);
\end_layout

\begin_layout Plain Layout

			r.setChecked(true);
\end_layout

\begin_layout Plain Layout

			add(r = new Radio("Descrio", rg), AFTER + 2, SAME); 
\end_layout

\begin_layout Plain Layout

			r.addPressListener(this);
\end_layout

\begin_layout Plain Layout

			Grid.useHorizontalScrollBar = true;
\end_layout

\begin_layout Plain Layout

			add(grid = new Grid(tit, widths, align, false), LEFT, AFTER + 2, FILL,
 FILL);
\end_layout

\begin_layout Plain Layout

			Grid.useHorizontalScrollBar = false;
\end_layout

\begin_layout Plain Layout

			grid.liveScrolling = true;
\end_layout

\begin_layout Plain Layout

			grid.setDataSource(this, cds.length);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (Exception exception)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			MessageBox.showException(exception, false);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void controlPressed(ControlEvent event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		grid.fetchDataSource();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public String[][] getItems(int startingRow, int count)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ResultSet rs = CodDesc.rs;
\end_layout

\begin_layout Plain Layout

		CodDesc[] qual = rg.getSelectedIndex() == 0? cds : dcs;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		// Initialies the array of strings that will store each row.
\end_layout

\begin_layout Plain Layout

		String[][] v = new String[count][];
\end_layout

\begin_layout Plain Layout

		for (int i = 0; i < count; i++)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			CodDesc cd = qual[startingRow++];
\end_layout

\begin_layout Plain Layout

			rs.absolute(cd.index);
\end_layout

\begin_layout Plain Layout

			v[i] = rs.getStrings(1)[0];
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		return v;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	static void qsortDesc(CodDesc[] items, int first, int last)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (first >= last)
\end_layout

\begin_layout Plain Layout

			return;
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		int low = first;
\end_layout

\begin_layout Plain Layout

		int high = last;
\end_layout

\begin_layout Plain Layout

		CodDesc mid = items[(first + last) >> 1];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		while (true)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			String s = mid.desc;
\end_layout

\begin_layout Plain Layout

			while (high >= low && s.compareTo(items[low].desc) > 0) 
\end_layout

\begin_layout Plain Layout

				low++;
\end_layout

\begin_layout Plain Layout

			while (high >= low && s.compareTo(items[high].desc) < 0)
\end_layout

\begin_layout Plain Layout

				high--;
\end_layout

\begin_layout Plain Layout

			if (low <= high)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				CodDesc temp = items[low];
\end_layout

\begin_layout Plain Layout

				items[low++] = items[high];
\end_layout

\begin_layout Plain Layout

				items[high--] = temp;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			else 
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		if (first < high)
\end_layout

\begin_layout Plain Layout

			qsortDesc(items, first, high);
\end_layout

\begin_layout Plain Layout

		if (low < last)
\end_layout

\begin_layout Plain Layout

			qsortDesc(items, low, last);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
getDate()
\end_layout

\begin_layout Standard

\family typewriter
public Date 
\series bold
getDate
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
Date
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
date
\family default
 if it was created with 
\family typewriter
date
\family default
 data type.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDate()
\end_layout

\begin_layout Standard

\family typewriter
public Date 
\series bold
getDate
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a 
\family typewriter
Date
\family default
 value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
Date
\family default
 value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDateTime()
\end_layout

\begin_layout Standard

\family typewriter
public Time 
\series bold
getDateTime
\series default
(int colIdx)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
Time
\family default
 (corresponding to the 
\family typewriter
datetime
\family default
 Litebase data type) value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Standard
Note that it is only possible to request this column as 
\family typewriter
datetime
\family default
 if it was created with 
\family typewriter
datetime
\family default
 data type.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDateTime()
\end_layout

\begin_layout Standard

\family typewriter
public Time 
\series bold
getDateTime
\series default
(String colName)
\end_layout

\begin_layout Standard
Given the column name (case insensitive), returns a 
\family typewriter
Time
\family default
 value that is represented by this column.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
A 
\family typewriter
Time
\family default
 (corresponding to the 
\family typewriter
datetime
\family default
 Litebase data type) value that is represented by this column.
 If the value is SQL 
\family typewriter
null
\family default
, the value returned is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
absolute()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
absolute
\series default
(int row)
\end_layout

\begin_layout Standard
Places this result set cursor at the given absolute row (starting from 0).
 This is the absolute physical row of the result set table.
 This method is usually used to restore the row at a previous row returned
 with the 
\family typewriter
getRow()
\family default
 method.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
row
\family default
: The row number of where the cursor will be placed.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
: If no error occurs (no exception is thrown).
 
\end_layout

\begin_layout Subsection

\family typewriter
relative()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
relative
\series default
(int rows)
\end_layout

\begin_layout Standard
Moves the cursor 
\family typewriter
rows
\family default
 in distance.
 The value can be greater or lower than zero.
 It searches the position until finding the right row or the end or the
 beginning of the result set table.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
row
\family default
s: The distance to move the cursor.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
: If no error occurs (no exception is thrown).
 
\end_layout

\begin_layout Subsection

\family typewriter
getRow()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getRow
\series default
()
\end_layout

\begin_layout Standard
Returns the current physical row of the table where the cursor is (starting
 from 0).
 Must be used with the absolute method.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
: Returns the current physical row of the table where the cursor is (starting
 from 0).
 
\end_layout

\begin_layout Subsection

\family typewriter
setDecimalPlaces()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setDecimalPlaces
\series default
(int colIdx, int places)
\end_layout

\begin_layout Standard
Sets the number of decimal places that the given column (starting from 1)
 will have when being converted to string.
 Must be used for columns of type 
\family typewriter
double
\family default
 or 
\family typewriter
float
\family default
 only.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index.
\end_layout

\begin_layout Itemize

\family typewriter
places
\family default
: The number of decimal places.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the value for decimal places is invalid (
\family typewriter
< -1
\family default
 or 
\family typewriter
> 40
\family default
) or the column is not of type 
\family typewriter
float
\family default
 or 
\family typewriter
double
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getRowCount()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getRowCount
\series default
()
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The number of rows of this result set.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ResultSet rs = null;
\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	rs = driver.executeQuery("select salary, age from person");
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

catch (Exception exception)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	/*...*/
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Sets decimal places for salary that is double.
\end_layout

\begin_layout Plain Layout

rs.setDecimalPlaces(1, 5); 
\end_layout

\begin_layout Plain Layout

while (rs.next())
\end_layout

\begin_layout Plain Layout

	Vm.debug("salary: " + rs.getString("salary") + ", age: " + rs.getShort("age"));
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Places in the first rows.
\end_layout

\begin_layout Plain Layout

rs.first(); 
\end_layout

\begin_layout Plain Layout

Vm.debug("Row: " + rs.getRow() + " salary: " + rs.getString("salary") 
\end_layout

\begin_layout Plain Layout

+ ", age: " + rs.getShort("age"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Moves the cursor rows in distance relative a current position.
 
\end_layout

\begin_layout Plain Layout

rs.relative(rs.getRowCount() - 1); 
\end_layout

\begin_layout Plain Layout

Vm.debug("Row: " + rs.getRow() + " salary: " + rs.getString("salary") 
\end_layout

\begin_layout Plain Layout

+ ", age: " + rs.getShort("age"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Places the cursor in an absolute position.
\end_layout

\begin_layout Plain Layout

rs.absolute(2); 
\end_layout

\begin_layout Plain Layout

Vm.debug("Row: " + rs.getRow() + " salary: "+rs.getString("salary") 
\end_layout

\begin_layout Plain Layout

+ ", age: " + rs.getShort("age"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs.close(); // Closes the resultset.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
isNull()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isNull
\series default
(int colIdx)
\end_layout

\begin_layout Standard
Indicates if this column has a 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colIdx
\family default
: The column index (starting from 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
Retuns: 
\family typewriter
true
\family default
 if this column has a null; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
isNull()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isNull
\series default
(int colName)
\end_layout

\begin_layout Standard
Indicates if this column has a 
\family typewriter
null
\family default
.
 It behaves similar to the previous one.
 However, it is slower.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
colName
\family default
: The column name.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
Retuns: 
\family typewriter
true
\family default
 if this column has a null; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
rowToString()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
rowToString
\series default
()
\end_layout

\begin_layout Standard
Returns a whole current row of a 
\family typewriter
ResultSet
\family default
 in a string with column data separated by tab.
 With a column has a 
\family typewriter
null
\family default
 or empty value, the string will have two consecutive tabs (
\begin_inset Quotes sld
\end_inset


\family typewriter

\backslash
t
\backslash
t
\family default

\begin_inset Quotes srd
\end_inset

).
 Blobs are treated as nulls.
\end_layout

\begin_layout Section

\family typewriter
PreparedStatement
\family default
 Class
\end_layout

\begin_layout Standard
Represents a SQL Statement that can be prepared (compiled) once and executed
 many times with different parameter values.
 It cannot be directly instantiated.
\end_layout

\begin_layout Standard
It must be noticed that the methods to set the parameters should be used
 with the right data type of the table column.
 Otherwise, a 
\family typewriter
DriverException
\family default
 will be raised.
 The only exception is concerning 
\family typewriter
setString()
\family default
, which can be used to set any type except for 
\family typewriter
blob
\family default
.
 A 
\family typewriter
DriverException
\family default
 will also be thrown if an I
\backslash
O error occurs.
 A 
\family typewriter
SQLParseException
\family default
 will occur whenever invalid SQL, 
\family typewriter
date
\family default
, 
\family typewriter
datetime
\family default
 or invalid number are used.
 An 
\family typewriter
IllegalStateException
\family default
 will be thrown whenever a closed driver or prepared statement is accessed,
 whereas a
\begin_inset Newline newline
\end_inset

 
\family typewriter
IllegalArgumentException
\family default
 will be raised if an invalid parameter index is used.
\end_layout

\begin_layout Subsection

\family typewriter
executeQuery()
\end_layout

\begin_layout Standard

\family typewriter
public ResultSet 
\series bold
executeQuery
\series default
() 
\end_layout

\begin_layout Standard
This method executes a prepared SQL query.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
ResultSet
\family default
 of the SQL statement.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws: 
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the SQL used to prepare the prepared statement is not a select or not
 all the parameters are defined.
\end_layout

\begin_layout Subsection

\family typewriter
executeUpdate()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
executeUpdate
\series default
() 
\end_layout

\begin_layout Standard
This method executes a SQL 
\family typewriter
insert
\family default
, 
\family typewriter
update
\family default
 or 
\family typewriter
delete
\family default
 statement.
 SQL statements that return nothing such as SQL DDL statements can also
 be executed.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The result is either the row count for 
\family typewriter
insert
\family default
, 
\family typewriter
update
\family default
 or 
\family typewriter
delete
\family default
 statements; or 0 for SQL statements that return nothing.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws: 
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the SQL used to prepare the prepared statement is a select or not all
 the parameters are defined.
\end_layout

\begin_layout Subsection

\family typewriter
setShort()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setShort
\series default
(int index, short value)
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
short
\family default
 value.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
index
\family default
: the index of the parameter value to set, starting from 0.
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
: the value of the parameter.
\end_layout

\begin_layout Subsection

\family typewriter
setInt()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setInt
\series default
(int index, int value)
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
int
\family default
 value, similar to the above method.
 
\end_layout

\begin_layout Subsection

\family typewriter
setLong()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setLong
\series default
(int index, long value)
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
long
\family default
 value, similar to the above method.
 
\end_layout

\begin_layout Subsection

\family typewriter
setFloat()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setFloat
\series default
(int index, double value)
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
float
\family default
 value, similar to the above method.
 
\end_layout

\begin_layout Subsection

\family typewriter
setDouble()
\end_layout

\begin_layout Standard

\family typewriter
public void setDouble(int index, double value)
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
double
\family default
 value, similar to the above method.
 
\end_layout

\begin_layout Subsection

\family typewriter
setString()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setString
\series default
(int index, String value)
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
String
\family default
 value, similar to the above method.
 Moreover, this method can be used for 
\family typewriter
date
\family default
 and 
\family typewriter
datetime
\family default
 field types, where dates must be set in the format YMD.
 Notice that a null string can't be set in a 
\family typewriter
where
\family default
 clause, otherwise a 
\family typewriter
SQLParseException
\family default
 will be thrown.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LitebaseConnection driver = LitebaseConnection.getInstance(creatorId);
\end_layout

\begin_layout Plain Layout

driver.execute("CREATE TABLE company1(name CHAR(32), birth DATE, years DATETIME)"
);
\end_layout

\begin_layout Plain Layout

ps = driver.prepareStatement("INSERT INTO company1 VALUES(?, ?, ?)");
\end_layout

\begin_layout Plain Layout

ps.setString(0, "maria marlene");
\end_layout

\begin_layout Plain Layout

ps.setString(1, "2006/05/02");
\end_layout

\begin_layout Plain Layout

ps.setString(2, "2005/04/11 12:15:27:102");
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
setBlob()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setBlob
\series default
(int index, byte[] value)
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
byte[]
\family default
 value, which is a 
\family typewriter
blob
\family default
, similar to the above method.
 This method will throw a 
\family typewriter
SQLParseException
\family default
 if one tries to set a 
\family typewriter
blob
\family default
 type in a parameter in a 
\family typewriter
where
\family default
 clause.
 That is, 
\family typewriter
setBlob()
\family default
 can only be used with 
\family typewriter
update
\family default
s and 
\family typewriter
insert
\family default
s, never with 
\family typewriter
delete
\family default
s or 
\family typewriter
select
\family default
s.
 
\end_layout

\begin_layout Subsection

\family typewriter
setDate()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setDate
\series default
(int index, Date value) 
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
Date
\family default
 value, similar to the above method.
 Again, a 
\family typewriter
null
\family default
 date can't be set in a 
\family typewriter
where
\family default
 clause.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LitebaseConnection driver = LitebaseConnection.getInstance(creatorId);
\end_layout

\begin_layout Plain Layout

driver.execute("CREATE TABLE company1(name CHAR(32), birth DATE)");
\end_layout

\begin_layout Plain Layout

ps = driver.prepareStatement("INSERT INTO company1 VALUES(?, ?)");
\end_layout

\begin_layout Plain Layout

ps.setString(0, "Ana Franscica"); 
\end_layout

\begin_layout Plain Layout

ps.setDate(1, new Date(2006/05/06, Settings.DATE_DMY));
\end_layout

\end_inset


\series bold

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
ATTENTION
\series default
: One must use with care the constructor new 
\family typewriter
Date(<string_date>)
\family default
.
 Some devices can construct different dates, according to the device's date
 format.
 For example, the constructor 
\family typewriter
new Date(12/09/2006)
\family default
, depending on the device's date format, can generate a date like 12 of
 September of 2006 or 09 of December of 2006.
 To avoid this, use the constructor new 
\family typewriter
Date(<string_date>, Settings.DATE_XXX)
\family default
 instead, where 
\family typewriter
Settings.DATE_XXX
\family default
 is a date format parameter that must be one of the 
\family typewriter
Settings.DATE_XXX
\family default
 constants.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
setDateTime()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setDateTime
\series default
(int index, Date date) 
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
Date
\family default
, similar to the above method.
 Again, a 
\family typewriter
null
\family default
 
\family typewriter
date
\family default
 can't be set in a 
\family typewriter
where
\family default
 clause.
 Additionally, to set 
\family typewriter
null
\family default
, a type cast to 
\family typewriter
Date
\family default
 must be done because to remove ambiguity with the next method.
\end_layout

\begin_layout Standard

\family typewriter
Date
\family default
 
\family typewriter
date
\family default
 will be stored as a 
\family typewriter
datetime
\family default
 Litebase field with 0 in its time part.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LitebaseConnection driver = LitebaseConnection.getInstance(creatorId);
\end_layout

\begin_layout Plain Layout

driver.execute("CREATE TABLE company1(name CHAR(32), years DATETIME)");
\end_layout

\begin_layout Plain Layout

ps = driver.prepareStatement("INSERT INTO company1 VALUES(?, ?)");
\end_layout

\begin_layout Plain Layout

ps.setString(0, "jose sebastiao");
\end_layout

\begin_layout Plain Layout

ps.setDateTime(1, new Date(20060506));
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
setDateTime()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setDateTime
\series default
(int index, Time time) 
\end_layout

\begin_layout Standard
This method sets the specified parameter from the given 
\family typewriter
Time
\family default
, similar to the above method.
 Again, a 
\family typewriter
null datetime
\family default
 can't be set in a 
\family typewriter
where
\family default
 clause.
 Additionally, to set 
\family typewriter
null
\family default
, a type cast to 
\family typewriter
Time
\family default
 must be done because to remove ambiguity with the previous method.
 
\end_layout

\begin_layout Standard

\family typewriter
Time time
\family default
 will be stored as a 
\family typewriter
datetime
\family default
 Litebase field.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LitebaseConnection driver = LitebaseConnection.getInstance(creatorId);
\end_layout

\begin_layout Plain Layout

driver.execute("CREATE TABLE company1(name CHAR(32), years DATETIME)");
\end_layout

\begin_layout Plain Layout

ps = driver.prepareStatement("INSERT INTO company1 VALUES(?, ?)");
\end_layout

\begin_layout Plain Layout

ps.setString(0, "jose sebastiao");
\end_layout

\begin_layout Plain Layout

ps.setTime(1, new Time(2006, 02, 01, 12, 15, 24, 352));
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
setNull()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setNull
\series default
(int index)
\end_layout

\begin_layout Standard
This method sets the specified parameter to 
\family typewriter
null
\family default
.
 This can be used to set any column type as 
\family typewriter
null
\family default
.
 It must be just remembered that a parameter in a 
\family typewriter
where
\family default
 clause can't be set to 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
index
\family default
: the index of the parameter value to set, starting from 0.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LitebaseConnection driver = LitebaseConnection.getInstance(creatorId);
\end_layout

\begin_layout Plain Layout

driver.execute("CREATE TABLE company1(name CHAR(32), years DATETIME)");
\end_layout

\begin_layout Plain Layout

ps = driver.prepareStatement("INSERT INTO company1 VALUES(?, ?)");
\end_layout

\begin_layout Plain Layout

ps.setString(0, "jose sebastiao");
\end_layout

\begin_layout Plain Layout

ps.setNull(1);
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
clearParameters()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
clearParameters
\series default
() 
\end_layout

\begin_layout Standard
This method clears all of the input parameters that have been set on this
 statement.
 
\end_layout

\begin_layout Subsection

\family typewriter
toString()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
toString
\series default
()
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The SQL used in this statement.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PreparedStatement psInsert, psUpdate, psDelete, psSelect;
\end_layout

\begin_layout Plain Layout

String sqlInsert, sqlUpdate, sqlDelete, sqlSelect;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// driver is the LitebaseConnection instantiated above.
\end_layout

\begin_layout Plain Layout

// Call this method in the start of the application, after Litebase has
 been initializated and after the table has been created.
\end_layout

\begin_layout Plain Layout

public void preparedStatement() 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		sqlInsert = "INSERT INTO person VALUES (?, ?, ?, ?, ?, ?, ?)";
\end_layout

\begin_layout Plain Layout

		sqlUpdate = "UPDATE person SET name = ?, birthday = ?, salary = ?, gender
 = ?, married = ?, age = ?, region = ? WHERE rowid = ?";
\end_layout

\begin_layout Plain Layout

		sqlDelete = "DELETE FROM person WHERE rowid = ?";
\end_layout

\begin_layout Plain Layout

		sqlSelect = "SELECT * FROM person WHERE age >= ?";
\end_layout

\begin_layout Plain Layout

		psInsert = driver.prepareStatement(sqlInsert);
\end_layout

\begin_layout Plain Layout

		psUpdate = driver.prepareStatement(sqlUpdate);
\end_layout

\begin_layout Plain Layout

		psDelete = driver.prepareStatement(sqlDelete);
\end_layout

\begin_layout Plain Layout

		psSelect = driver.prepareStatement(sqlSelect);
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	catch(Exception exception)
\end_layout

\begin_layout Plain Layout

	{ 
\end_layout

\begin_layout Plain Layout

		/*...*/
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

// This method fills the prepared statement and executes them.
\end_layout

\begin_layout Plain Layout

public void setPreparedStatement()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		psInsert.setString(0, "Zenes Novais");
\end_layout

\begin_layout Plain Layout

		psInsert.setDate(1, "1980/05/03");
\end_layout

\begin_layout Plain Layout

		psInsert.setDouble(2, 3540.0);
\end_layout

\begin_layout Plain Layout

		psInsert.setString(3, "F");
\end_layout

\begin_layout Plain Layout

		psInsert.setString(4, "Yes"); 
\end_layout

\begin_layout Plain Layout

		psInsert.setInt(5, 26); 
\end_layout

\begin_layout Plain Layout

		psInsert.setInt(6, 8);
\end_layout

\begin_layout Plain Layout

		psInsert.executeUpdate(); 
\end_layout

\begin_layout Plain Layout

		psUpdate.setString(0, "Jener Novais");
\end_layout

\begin_layout Plain Layout

		psUpdate.setDate(1, "1979/05/03");
\end_layout

\begin_layout Plain Layout

		psUpdate.setDouble(2, 3800.0);
\end_layout

\begin_layout Plain Layout

		psUpdate.setString(3, "M");
\end_layout

\begin_layout Plain Layout

		psUpdate.setString(4, "Yes"); 
\end_layout

\begin_layout Plain Layout

		psUpdate.setInt(5, 27); 
\end_layout

\begin_layout Plain Layout

		psUpdate.setInt(6, 8);
\end_layout

\begin_layout Plain Layout

		psUpdate.setInt(7, 4); // Updates the row of rowid = 4.
\end_layout

\begin_layout Plain Layout

		psUpdate.executeUpdate(); 
\end_layout

\begin_layout Plain Layout

		psDelete.setInt(0, 3); // Drops the row of rowid = 3.
\end_layout

\begin_layout Plain Layout

		psDelete.executeUpdate(); 
\end_layout

\begin_layout Plain Layout

		psSelect.setInt(0, 25); // Sets the age in the select.
\end_layout

\begin_layout Plain Layout

		ResultSet rs = psSelect.executeQuery();
\end_layout

\begin_layout Plain Layout

		while (rs.next)
\end_layout

\begin_layout Plain Layout

			Vm.debug("Age:" + rs.getShort(age));
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	catch(Exception exception)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		/*...*/
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
close()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
close
\series default
()
\end_layout

\begin_layout Standard
Closes a prepared statement.
 This is important if the application creates too many prepared statements
 during one run, since they are only closed if their connection is closed.
\end_layout

\begin_layout Subsection

\family typewriter
isValid()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isValid
\series default
()
\end_layout

\begin_layout Standard
Checks if a prepared statement is still valid.
 This happens if the driver and the prepared statement have not been closed
 and the table was not dropped.
 
\end_layout

\begin_layout Section

\family typewriter
ResultSetMetaData
\family default
 Class
\begin_inset CommandInset label
LatexCommand label
name "sec:ResultSetMetaData-Class"

\end_inset


\end_layout

\begin_layout Standard
This class returns useful information for the result set columns.
 It cannot be directly instantiated.
 An 
\family typewriter
IllegalStateException
\family default
 will be thrown if the driver or result set are closed, whereas an 
\family typewriter
IllegalArgumentException
\family default
 will be thrown if an invalid column index is used.
 A 
\family typewriter
DriverException
\family default
 will be thrown if an I
\backslash
O error occurs.
\end_layout

\begin_layout Subsection

\family typewriter
getColumnCount()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getColumnCount
\series default
() 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The number of columns for this result set.
\end_layout

\begin_layout Subsection

\family typewriter
getColumnDisplaySize()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getColumnDisplaySize
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The display size.
 For string types, it will return the number of characters defined; for
 primitive types, it will return the number of decimal places it needs to
 be displayed correctly.
 Returns -1 if the column type is 
\family typewriter
blob
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getColumnLabel()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getColumnLabel
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The column name.
 Note that if an alias for the column is used, the alias will be returned
 instead.
 
\end_layout

\begin_layout Subsection

\family typewriter
getColumnType()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getColumnType
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The column type.
 Its values can be: 
\family typewriter
SHORT_TYPE
\family default
, 
\family typewriter
INT_TYPE
\family default
, 
\family typewriter
LONG_TYPE
\family default
, 
\family typewriter
FLOAT_TYPE
\family default
, 
\family typewriter
DOUBLE_TYPE
\family default
, 
\family typewriter
CHAR_TYPE
\family default
, 
\family typewriter
CHAR_NOCASE_TYPE
\family default
, 
\family typewriter
DATE_TYPE
\family default
, 
\family typewriter
DATETIME_TYPE
\family default
, and 
\family typewriter
BLOB_TYPE
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// This method fills the attributes below with table meta data.
\end_layout

\begin_layout Plain Layout

// - columnsName (contains names of columns).
\end_layout

\begin_layout Plain Layout

// - columnsLength (contain length of columns) for types different from
 char.
\end_layout

\begin_layout Plain Layout

// For example INT/DOUBLE will have columnsLength = max value for the TYPE
 (e.
 g.: DOUBLE = 21)
\end_layout

\begin_layout Plain Layout

// - columnsType (contains types of columns).
 
\end_layout

\begin_layout Plain Layout

private void discoverMetaDataTable(String[] columnsName, int[] columnsLength,
 int[] columnsType) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ResultSet rs = null;
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		openLb(); // Gets the instance of Litebase.
\end_layout

\begin_layout Plain Layout

		rs = lb.executeQuery("SELECT * FROM person WHERE rowid = 10000"); 
\end_layout

\begin_layout Plain Layout

		ResultSetMetaData rsmd = rs.getResultSetMetaData();
\end_layout

\begin_layout Plain Layout

		int numCols = rsmd.getColumnCount(); // Gets the number of cols.
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		// Fills the parameters.
\end_layout

\begin_layout Plain Layout

		for (int i = 1; i <= numCols; i++)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			columnsName[i - 1] = rsmd.getColumnLabel(i);
\end_layout

\begin_layout Plain Layout

			columnsType[i - 1] = rsmd.getColumnType(i);
\end_layout

\begin_layout Plain Layout

			columnsLength[i - 1] = rsmd.getColumnDisplaySize(i);
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	catch(Exception exception)
\end_layout

\begin_layout Plain Layout

	{ 
\end_layout

\begin_layout Plain Layout

		handleException(exception);
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

	finally
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (rs != null)
\end_layout

\begin_layout Plain Layout

			rs.close();
\end_layout

\begin_layout Plain Layout

		closeLb(); // Closes Litebase.
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
getColumnTypeName()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getColumnTypeName
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The name of the column type.
\end_layout

\begin_layout Subsection

\family typewriter
getColumnTableName()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getColumnTableName
\series default
(int column)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The name of the table it came from.
\end_layout

\begin_layout Subsection

\family typewriter
getColumnTableName()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getColumnTableName
\series default
(String columnName) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
columnName
\family default
: Column name or alias.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The name of the table it came from.
 It is important to notice that if the query is a join and two fields in
 the result set have the same name, only the name of the first table of
 this column name will be returned.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the column name is not found.
\end_layout

\begin_layout Subsection

\family typewriter
hasDefaultValue()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
hasDefaultValue
\series default
(int columnIdx)
\end_layout

\begin_layout Standard
Indicates if a column of the result set has a default value.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
columnIdx
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the given column of the result set has a default value; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the column does not have an underlining table column, such as 
\family typewriter
count(*)
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
hasDefaultValue()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
hasDefaultValue
\series default
(String columnName)
\end_layout

\begin_layout Standard
Indicates if a column of the result set has a default value.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
columnName
\family default
: The column name or alias.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the given column of the result set has a default value; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the column does not have an underlining table column, such as 
\family typewriter
count(*)
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
isNotNull()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isNotNull
\series default
(int columnIdx) 
\end_layout

\begin_layout Standard
Indicates if a column of the result is declared as 
\family typewriter
not null
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
columnIdx
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the given column of the result set is declared as 
\family typewriter
not null
\family default
; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the column does not have an underlining table column, such as 
\family typewriter
count(*)
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
isNotNull()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isNotNull
\series default
(String columnName)
\end_layout

\begin_layout Standard
Indicates if a column of the result set is declared as 
\family typewriter
not null
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
columnName
\family default
: The column name or alias.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the given column of the result set is declared as 
\family typewriter
not null
\family default
; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the column does not have an underlining table column, such as 
\family typewriter
count(*)
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDefaultValue()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getDefaultValue
\series default
(int columnIndex) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
columnIdx
\family default
: The column index (starting at 1).
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The default value of the column as a string or 
\family typewriter
null
\family default
 if it does not have a default value.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the column does not have an underlining table column, such as 
\family typewriter
count(*)
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDefaultValue()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getDefaultValue
\series default
(String columnName) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
columnName
\family default
: The column name or alias.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize
The default value of the column as a string or 
\family typewriter
null
\family default
 if it does not have a default value.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the column does not have an underlining table column, such as 
\family typewriter
count(*)
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getPKColumnIndices()
\end_layout

\begin_layout Standard

\family typewriter
public byte[] 
\series bold
getPKColumnIndices
\series default
(String tableName)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name or alias.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
null
\family default
 if the given table does not have primary key or an array with the column
 indices of the primary key.
\end_layout

\begin_layout Standard
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the given table name is not part of the query of this result set.
\end_layout

\begin_layout Subsection

\family typewriter
getPKColumnNames()
\end_layout

\begin_layout Standard

\family typewriter
public String[] 
\series bold
getPKColumnNames
\series default
(String tableName)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters: 
\end_layout

\begin_layout Itemize

\family typewriter
tableName
\family default
: The table name or alias.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
null
\family default
 if the given table does not have primary key or an array with the column
 names of the primary key.
\end_layout

\begin_layout Standard
Throws:
\end_layout

\begin_layout Itemize

\family typewriter
DriverException
\family default
: If the given table name is not part of the query of this result set.
\end_layout

\begin_layout Section

\family typewriter
RowIterator
\family default
 Class
\end_layout

\begin_layout Standard
Class used to iterate through the rows of a database.
 It can access some attributes from the row that ease the control of which
 row was changed, deleted, or is newer since a synchronization.
 It can also be used to access the values of the columns of the current
 row.
\end_layout

\begin_layout Standard
An iterator cannot be constructed directly; it must be created through the
 method
\begin_inset Newline newline
\end_inset


\family typewriter
LitebaseConnection.getIterator()
\family default
.
\end_layout

\begin_layout Standard
An 
\family typewriter
IllegalStateException
\family default
 will be thrown if the driver or row iterator are closed, whereas an 
\family typewriter
IllegalArgumentException
\family default
 will be thrown if an invalid column index is used.
 A 
\family typewriter

\begin_inset Newline newline
\end_inset

DriverException
\family default
 will be thrown if an I
\backslash
O error occurs or a get method is used with the wrong type.
\end_layout

\begin_layout Standard
Useful members:
\end_layout

\begin_layout Subsection

\family typewriter
data
\end_layout

\begin_layout Standard

\family typewriter
public byte[] 
\series bold
data
\end_layout

\begin_layout Standard
The data for the current row.
 The whole row is included.
\end_layout

\begin_layout Subsection

\family typewriter
rowid
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
rowid
\end_layout

\begin_layout Standard
The rowid for the current row.
\end_layout

\begin_layout Subsection

\family typewriter
attr
\end_layout

\begin_layout Standard

\family typewriter
public byte 
\series bold
attr
\end_layout

\begin_layout Standard
The attribute for this row.
 The constants 
\family typewriter
ROW_ATTR_SYNCED
\family default
, 
\family typewriter
ROW_ATTR_NEW
\family default
, 
\family typewriter
ROW_ATTR_UPDATED
\family default
, or 
\family typewriter
ROW_ATTR_DELETED
\family default
 must be used for comparison.
 It must be noticed that changing this attribute does not change the current
 row attribute.
 That is, this should be READ ONLY.
\end_layout

\begin_layout Subsection

\family typewriter
rowNumber
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
rowNumber
\end_layout

\begin_layout Standard
The number of the row.
 This must be READ ONLY.
 Changing it will corrupt your database.
\end_layout

\begin_layout Standard
Methods available:
\end_layout

\begin_layout Subsection

\family typewriter
next()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
next
\series default
() 
\end_layout

\begin_layout Standard
Moves to the next record and fills the data members.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if it is possible to iterate to the next record; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
nextNotSynced()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
nextNotSynced
\series default
() 
\end_layout

\begin_layout Standard
Moves to the next record with an attribute different of 
\family typewriter
ROW_ATTR_SYNCED
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns:
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if it is possible to iterate to a next record not synchronized; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
setSynced()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setSynced
\series default
() 
\end_layout

\begin_layout Standard
If the attribute is currently 
\family typewriter
NEW
\family default
 or 
\family typewriter
UPDATED
\family default
, this method sets them to 
\family typewriter
SYNCED
\family default
.
 Note that if the row is 
\family typewriter
DELETED
\family default
, the change will be ignored.
 That is, deleted rows are always marked as not synchronized.
 Rows excluded by recover table will be marked as 
\family typewriter
DELETED
\family default
 and its 
\family typewriter
rowid
\family default
 changed to zero.
 These rows must be ignored when synchronizing the table.
 In most cases they will be spurious or blank rows.
\end_layout

\begin_layout Subsection

\family typewriter
close()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
close
\series default
()
\end_layout

\begin_layout Standard
Closes this iterator.
 After calling this method it is possible to do queries in a safe way.
\end_layout

\begin_layout Subsection

\family typewriter
reset()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
reset
\series default
()
\end_layout

\begin_layout Standard
Resets the counter to zero so that it is possible to restart to fetch records.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
Note: There is another example about this topic in 
\family typewriter
LitebaseConnection.getRowIterator()
\family default
 
\begin_inset CommandInset ref
LatexCommand vpageref
reference "sub:getRowIterator()"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private static final char INSERTED = 'I';
\end_layout

\begin_layout Plain Layout

private static final char DELETED = 'D';
\end_layout

\begin_layout Plain Layout

private static final char UPDATED = 'U';
\end_layout

\begin_layout Plain Layout

private static final char SYNC = 'S';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// Returns a char correspondent to RowIterator.attr
\end_layout

\begin_layout Plain Layout

private char attrToChar(RowIterator ri)
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	switch (ri.attr) // USE SWITCH
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case RowIterator.ROW_ATTR_NEW: 
\end_layout

\begin_layout Plain Layout

		return INSERTED; 
\end_layout

\begin_layout Plain Layout

		case RowIterator.ROW_ATTR_UPDATED: 
\end_layout

\begin_layout Plain Layout

		return UPDATED; 
\end_layout

\begin_layout Plain Layout

		case RowIterator.ROW_ATTR_DELETED: 
\end_layout

\begin_layout Plain Layout

		return DELETED; 
\end_layout

\begin_layout Plain Layout

		case RowIterator.ROW_ATTR_SYNCED: 
\end_layout

\begin_layout Plain Layout

		return SYNC; 
\end_layout

\begin_layout Plain Layout

		default: 
\end_layout

\begin_layout Plain Layout

		return '-';
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

\family typewriter
getShort()
\end_layout

\begin_layout Standard

\family typewriter
public short 
\series bold
getShort
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
short
\family default
 value of the column.
 Returns 0 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getInt()
\end_layout

\begin_layout Standard

\family typewriter
public int 
\series bold
getInt
\series default
(int column)
\family default
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
int
\family default
 value of the column.
 Returns 0 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getFloat()
\end_layout

\begin_layout Standard

\family typewriter
public double 
\series bold
getFloat
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
float
\family default
 value of the column.
 Returns 0.0 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDouble()
\end_layout

\begin_layout Standard

\family typewriter
public double 
\series bold
getDouble
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
double
\family default
 value of the column.
 Returns 0.0 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getString()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
getString
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
string
\family default
 value of the column.
 Returns 
\family typewriter
null
\family default
 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDate()
\end_layout

\begin_layout Standard

\family typewriter
public Date 
\series bold
getDate
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
date
\family default
 value of the column as a 
\family typewriter
Date
\family default
 object.
 Returns 
\family typewriter
null
\family default
 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getDateTime()
\end_layout

\begin_layout Standard

\family typewriter
public Time 
\series bold
getDateTime
\series default
(int column) 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
datetime
\family default
 value of the column as a 
\family typewriter
Time
\family default
 object.
 Returns 
\family typewriter
null
\family default
 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
getBlob()
\end_layout

\begin_layout Standard

\family typewriter
public byte[] 
\series bold
getBlob
\series default
(int column)
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize
The 
\family typewriter
blob
\family default
 value of the column as a 
\family typewriter
byte
\family default
 array object.
 Returns 
\family typewriter
null
\family default
 if the column is 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Subsection

\family typewriter
isNull()
\end_layout

\begin_layout Standard

\family typewriter
public boolean 
\series bold
isNull
\series default
(int column)
\end_layout

\begin_layout Standard
Indicates if the value stored in a column is null.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Parameters:
\end_layout

\begin_layout Itemize

\family typewriter
column
\family default
: The column index.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Returns: 
\end_layout

\begin_layout Itemize

\family typewriter
true
\family default
 if the column is null; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\begin_layout Subsection

\family typewriter
setNotSynced()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setNotSynced
\series default
() 
\end_layout

\begin_layout Standard
If the attribute is currently 
\family typewriter
SYNCED
\family default
 or 
\family typewriter
UPDATED
\family default
, this method sets them to 
\family typewriter
NEW
\family default
.
 Note that if the row is 
\family typewriter
DELETED
\family default
, the change will be ignored.
 That is, deleted rows will not be resurrected.
 This method will be useful if a row was marked as synchronized but was
 not sent to server for some problem.
 Use this carefully.
\end_layout

\begin_layout Part
APPENDIXES 
\end_layout

\begin_layout Chapter
\start_of_appendix
Copyright
\end_layout

\begin_layout Standard
All the contents of this tutorial, including text, programs, applets, source
 code, and images are copyrighted and are owned by SuperWaba Ltda, all rights
 reserved.
 No material can be reproduced and/or distributed electronically, in print
 or otherwise without the express written permission of SuperWaba Ltda.
\end_layout

\begin_layout Standard
The use of the source code examples is only permitted by the company that
 purchased this subscription.
\end_layout

\begin_layout Chapter
News
\end_layout

\begin_layout Itemize
Removed everything concerning BlackBerry, Palm OS, and Windows CE, since
 these platfroms are not supported anymore.
\end_layout

\begin_layout Itemize
Added information concerning Windows Phone 8 memory card, which can't be
 used to create databases.
 
\end_layout

\begin_layout Itemize
Removed table migration section since the table format has not been changed
 for too long.
\end_layout

\begin_layout Itemize
Added SalesPlus sample.
\end_layout

\begin_layout Itemize
Joined PhotoDB into AddressBook.
\end_layout

\begin_layout Section
ResultSet
\end_layout

\begin_layout Subsection

\family typewriter
rowToString()
\end_layout

\begin_layout Standard

\family typewriter
public String 
\series bold
rowToString
\series default
()
\end_layout

\begin_layout Standard
Returns a whole current row of a 
\family typewriter
ResultSet
\family default
 in a string with column data separated by tab.
 With a column has a 
\family typewriter
null
\family default
 or empty value, the string will have two consecutive tabs (
\begin_inset Quotes sld
\end_inset


\family typewriter

\backslash
t
\backslash
t
\family default

\begin_inset Quotes srd
\end_inset

).
 Blobs are treated as nulls.
\end_layout

\begin_layout Section
RowIterator
\end_layout

\begin_layout Subsection

\family typewriter
setNotSynced()
\end_layout

\begin_layout Standard

\family typewriter
public void 
\series bold
setNotSynced
\series default
() 
\end_layout

\begin_layout Standard
If the attribute is currently 
\family typewriter
SYNCED
\family default
 or 
\family typewriter
UPDATED
\family default
, this method sets them to 
\family typewriter
NEW
\family default
.
 Note that if the row is 
\family typewriter
DELETED
\family default
, the change will be ignored.
 That is, deleted rows will not be resurrected.
 This method will be useful if a row was marked as synchronized but was
 not sent to server for some problem.
 Use this carefully.
\end_layout

\end_body
\end_document
