<?xml version="1.0" encoding="iso-8859-1"?>
<!--
/*********************************************************************************
 *  TotalCross Software Development Kit                                          *
 *  Copyright (C) 2000-2012 SuperWaba Ltda.                                      *
 *  All Rights Reserved                                                          *
 *                                                                               *
 *  This library and virtual machine is distributed in the hope that it will     *
 *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         *
 *                                                                               *
 *********************************************************************************/

IMPORTANT:
           SDK -> SDK WITH DEMO VIRTUAL MACHINES WITH TRIAL PERIOD
           VMS -> ONLY VIRTUAL MACHINES WITHOUT TRIAL PERIOD

-->

<project name="Litebase deploy" default="help" basedir=".">

<description>
   This file is used to deploy the Litebase C based components.
</description>

<!-- import ANT Contrib -->
<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
<taskdef classpath="orangevolt-ant-tasks-1.3.2.jar" resource="com/orangevolt/tools/ant/taskdefs.properties"/>

<!-- load platform environment variables -->
<property environment="env"/>

<!-- this target displays a help message which documents this configuration file features -->

<target name="help" >
  <echo message="To see the possible targets, type 'ant -p'"/>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: init

-description:
   setup all build process properties.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <condition property="exe" value=".exe" else=""><os family="windows" /></condition>

  <!-- compiler settings -->
  <condition property="rootpath" value="${basedir}/../..">
   <os family="unix"/>
  </condition>
  <property name="rootpath"      value="p:"/> <!-- MUST BE ABSOLUTE PATH -->
  <property file="${rootpath}/userpaths.properties"/>
  <fail unless="msvc.path" message="Cannot find file ${rootpath}/userpaths.properties!"/>

  <!-- javac settings -->
  <property name="compile.listfiles"       value="no"/>
  <property name="compile.target"          value="1.1"/>
  <property name="compile.source"          value="1.2"/>
  <property name="compile.debug"           value="yes"/>
  <property name="compile.optimize"        value="yes"/>

  <property name="tc.base.path"			value="${basedir}/../../../TotalCross"/>
  <!-- IDEs and compilers project files -->
  <property name="msvc.project.path"  value="${tc.base.path}/TotalCrossVM/builders/vc2008"/>
  <property name="evc.project.path"   value="${tc.base.path}/TotalCrossVM/builders/evc3"/>
  <property name="gcc.project.path"   value="${basedir}/gcc"/>
  <property name="evc.project"        value="${evc.project.path}/TotalCross.vcw"/>
  <property name="android.project.path" value="${basedir}/android"/>
  <property name="android.temp"      value="${android.project.path}/apps/litebase/deploy" />

  <!-- properties regarding the TC paths -->
  <property name="source.tc.sdk.path" value="${tc.base.path}/TotalCrossSDK"/>
  <property name="source.tc.vm.path"  value="${tc.base.path}/TotalCrossVM"/>
  <property name="source.lb.path"     value="${basedir}/.."/>
   <property name="base.temp.path"    value="${basedir}/../../../temp"/>
	<property name="base.target.path"  value="${basedir}/../../../output/release"/>
  <property name="target.sdk.path"    value="${base.target.path}/LitebaseSDK"/>
  <property name="target.vms.path"    value="${base.target.path}/LitebaseVMS"/>
  <property name="tools"              value="${source.tc.sdk.path}/etc/tools"/>

  <condition property="android.sdk.path" value="P:/android-sdk-windows" else=""><os family="windows" /></condition>
  <condition property="android.ndk.path" value="${env.EXTLIBS_HOME}/android-ndk-r8b" else=""><os family="windows" /></condition>
  <property name="apk" value="${android.temp}/Litebase.apk" />

  <!-- installshield paths -->
  <property file="${rootpath}/ishield.properties"/>

  <!-- builder and iphone information -->
  <property file="${rootpath}/buildserver.properties"/>
   
  <property name="src"                    value="${source.lb.path}/src/java"/>

  <!-- load platform environment variables -->
  <property environment="env"/>
   
   <!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    get-version
   
   -description:
           retrieves the Litebase version from the file "litebase/LitebaseConnection.java"
   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
   
   <!-- +comment out this whole block if you don't have Ant 1.6 or later -->
   <loadfile srcfile="${src}/litebase/LitebaseConnection.java" property="lb.version">
     <filterchain>
       <linecontains>
         <contains value="versionStr"/>
       </linecontains>
       <striplinebreaks/>
       <tokenfilter>
        <replacestring from="public" to=""/>
        <replacestring from="static" to=""/>
        <replacestring from="final" to=""/>
        <replacestring from="String" to=""/>
        <replacestring from="versionStr" to=""/>
        <replacestring from="=" to=""/>
        <deletecharacters chars='";'/>
        <trim/>
       </tokenfilter>
     </filterchain>
   </loadfile>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: makeNativeHT - updates the native methods hash table.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<target name="makeNativeHT" >
   <property name="path.to.prototypeGenerator" value="${base.temp.path}/nmPrototypeGenerator" />
   <mkdir dir="${path.to.prototypeGenerator}" />

   <javac
      srcdir="${source.tc.sdk.path}/src/tc/tools/"
      encoding="ISO-8859-1"
      debug="${compile.debug}"
      optimize="${compile.optimize}"
      target="${compile.target}"
      source="${compile.source}"
      includes="NativeMethodsPrototypeGenerator.java"
      destdir="${path.to.prototypeGenerator}"
      nowarn="true"
    includeAntRuntime="false"
   />
   <java
      classname="tc.tools.NativeMethodsPrototypeGenerator"
      classpath="${path.to.prototypeGenerator}"
      fork="yes"
   >
      <arg line="makeNativeHT LB ${source.lb.path}\src\native ${source.lb.path}\src\native\NativeMethods.txt" />
   </java>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildPalmOS5
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->
<target name="buildPalmOS5_sdk" >
   <antcall target="buildPalmOS5">
      <param name="release.type" value="demo" />
      <param name="palm.target.path" value="${target.sdk.path}" />
   </antcall>
</target>
   
<target name="buildPalmOS5_vms" >
   <antcall target="buildPalmOS5">
      <param name="release.type" value="nodemo" />
      <param name="palm.target.path" value="${target.vms.path}" />
   </antcall>
</target>
   
<target name="buildPalmOS5" >

   <echo message="GENERATING PALM OS 5 FILES - ${release.type}"/>
   
   <copy file="${source.tc.vm.path}/builders/gcc-palm/tcvm/options_${release.type}.mk" tofile="gcc-palm/options.mk" overwrite="yes"/>
   <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes">
         <arg line='--login -i ${basedir}\gcc-palm\clean.sh ${basedir}\gcc-palm'/>
   </exec>
   <!-- Fork may fail on multi-processed machines, retry up to 5 times if the runmake fails. Timeouts at 2:30 minutes. -->
   <retry retrycount="5">
      <trycatch>
        <try>
           <exec executable="${cygwin.path}/bin/bash.exe" failonerror="yes" timeout="150000">
              <arg line='--login -i ${basedir}\gcc-palm\runmakeLB.sh ${basedir}\gcc-palm'/>
           </exec>
        </try>
        <catch>
           <exec executable="cmd.exe">
              <arg line='kill arm-elf-gcc.exe'/>
           </exec>
        </catch>
      </trycatch>
   </retry>

   <copy file="${source.tc.vm.path}/builders/gcc-palm/tcvm/options_nodemo.mk" tofile="gcc-palm/options.mk" overwrite="yes"/>
   <mkdir dir="${palm.target.path}\dist\lib\palm"/>
   <copy file="gcc-palm/Litebase.prc" todir="${palm.target.path}/dist/lib/palm" overwrite="yes"/>
   <copy file="lbcn-gcc-palm/LitebaseConduit.prc" todir="${palm.target.path}/dist/lib/palm" overwrite="yes"/>
   
   <property name="matchbox"    value="${source.tc.sdk.path}\etc\tools\matchbox\MatchBox.exe"/>
   <exec executable="${matchbox}" failonerror="yes">
      <arg line='/palm /name "Litebase Files for Palm OS" /readme palmreadme.txt /output ${palm.target.path}\dist\lib\palm\Install.exe /files ${palm.target.path}\dist\lib\palm\Litebase.prc ${palm.target.path}\dist\lib\palm\LitebaseConduit.prc ${target.sdk.path}\dist\lib\palm\LitebaseLib.pdb'/>
   </exec>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildWin32 - Generate the files for Windows 98 and beyond
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildWin32_vms" >
   <echo message="GENERATING WIN32 FILES - VMS"/>

   <exec executable="${msvc.path}" failonerror="yes">
      <arg line='${msvc.project.path}/TCVM.sln /project Litebase /rebuild "RAS Release|Win32"'/>
   </exec>
</target>

<target name="buildWin32_sdk" >
   <echo message="GENERATING WIN32 FILES - SDK"/>

   <exec executable="${msvc.path}" failonerror="yes">
      <arg line='${msvc.project.path}/TCVM.sln /project Litebase /rebuild "DEMO Release|Win32"'/>
   </exec>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildWinCE

       call evc commandline compiler
       Important: to be able to compile some of these files, you must delete wce211\bin
       and copy the wce300\bin to wce211\bin (thus, updating all old compilers to new versions)
       these folders are located under <program files>\Microsoft eMbedded Tools\EVC\

       Note that the compiler may hang at random step, you just press ^c and start over again. M$ things...
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildWinCE_vms" >

  <echo message="GENERATING WINCE FILES - VMS"/>

  <echo message="=> 1 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE ARM) Release HPC2000"      /CEConfig="HPC 2000" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 2 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE ARM) Release HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE ARM) Release POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE MIPS) Release POCKETPC"    /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE SH3) Release POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

	<copy file="${basedir}/ce/litebase_vms.inf" tofile="${source.tc.sdk.path}/etc/tools/makecab/litebase.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.vms.path}"/>
  </antcall>

</target>

<target name="buildWinCE_sdk" >

  <echo message="GENERATING WINCE FILES - SDK"/>

  <echo message="=> 1 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE ARM) Demo ARM HPC2000"      /CEConfig="HPC 2000" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 2 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE ARM) Demo ARM HPC211"       /CEConfig="H/PC Pro 2.11" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 3 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE ARM) Demo ARM POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 4 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE MIPS) Demo MIPS POCKETPC"   /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>
  <echo message="=> 5 of 5"/><exec executable="${evc.path}" failonerror="yes"><arg line='${evc.project} /make "Litebase - Win32 (WCE SH3) Demo SH3 POCKETPC"     /CEConfig="Pocket PC" /rebuild'/></exec> <sleep seconds="2"/>

  <copy file="${basedir}/ce/litebase_sdk.inf" tofile="${source.tc.sdk.path}/etc/tools/makecab/litebase.inf" overwrite="true"/>

  <antcall target="buildWinCECabsSingle">
   <param name="path.param" value="${target.sdk.path}"/>
  </antcall>

</target>

<target name="buildWinCECabsSingle">

  <exec dir="${source.tc.sdk.path}/etc/tools/makecab" executable="${source.tc.sdk.path}/etc/tools/makecab/Cabwiz.exe" failonerror="no">
  <arg line="litebase.inf /cpu HPC2000_ARM HPC211_ARM PocketPC_ARM PocketPC_MIPS PocketPC_SH3"/>
  </exec>

  <!-- copy the cab files -->
  <move todir="${path.param}/dist/lib/wince">
    <fileset dir="${source.tc.sdk.path}/etc/tools/makecab" includes="*.cab" casesensitive="no"/>
  </move>

  <!-- copy bat and ini files -->
  <copy todir="${path.param}/dist/lib/wince">
    <fileset dir="ce" includes="CEinstall.ini,_CEinstall-RunMe.bat,CEinstall_WMOBILE.ini,_CEinstall-RunMe_WMOBILE.bat" casesensitive="no"/>
  </copy>

  <exec dir="${source.tc.sdk.path}/etc/tools/makecab" executable="${source.tc.sdk.path}/etc/tools/makecab/Cabwizsp.exe" failonerror="no">
  <arg line="litebase.inf /cpu PocketPC_ARM"/>
  </exec>

  <!-- copy the cab files -->
  <move file="${source.tc.sdk.path}/etc/tools/makecab/litebase.PocketPC_ARM.CAB" tofile="${path.param}/dist/lib/wince/litebase.WMobile_ARM.CAB" />

  <delete>
    <fileset dir="${source.tc.sdk.path}/etc/tools/makecab" includes="*.dat,litebase.inf" casesensitive="no"/>
  </delete>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: createSkeleton - Create the folders from scratch
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="createSkeleton" >
  <delete dir="${base.target.path}/Litebase*" failonerror="yes" />
   <mkdir dir="${target.sdk.path}/dist/lib"/>
   <mkdir dir="${target.vms.path}/dist/lib"/>
   <copy todir="${target.sdk.path}">
      <fileset dir="${source.lb.path}" includes="src/java/samples/**,License.txt,setup.bat" excludes="src/java/samples/sys/joins/**" />
      </copy>
</target>

<target name="buildSkeleton" >
  <echo message="Building Litebase SDK"/>
  <ant antfile="build.xml" dir="${source.lb.path}" target="clean"           inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.lb.path}" target="build"           inheritAll="false"/>
  <ant antfile="build.xml" dir="${source.lb.path}" target="javadoc"  		inheritAll="false"/>

  <!-- copy the changed files to the release folder -->
  <copy todir="${target.sdk.path}/docs/html"> <fileset dir="${source.lb.path}/docs/html" /></copy>
  <copy todir="${target.sdk.path}/dist/lib">   <fileset dir="${source.lb.path}/dist/lib" includes="*.tcz" /></copy>
  <copy todir="${target.sdk.path}/dist/lib/palm"> <fileset dir="${source.lb.path}/dist/lib/palm" includes="*.pdb" /></copy>
  <copy todir="${target.sdk.path}/dist" file="${source.lb.path}/dist/litebase.jar" />
</target>

<target name="buildSamples_sdk" >
  <ant antfile="build.xml" dir="${source.lb.path}" target="samples"         inheritAll="false"/>
  <copy toDir="${target.sdk.path}/dist/samples"> <fileset dir="${source.lb.path}/dist/samples" /></copy>
</target>

<target name="buildBB_sdk" >
   <ant antfile="build.xml" dir="${source.lb.path}" target="blackberry-sdk"  inheritAll="false"/>
   <copy todir="${target.sdk.path}/dist/lib/bb"> <fileset dir="${source.lb.path}/dist/lib/bb" includes="*.*" /></copy>
</target>

<target name="buildBB_vms" >
  <ant antfile="build.xml" dir="${source.lb.path}" target="blackberry-vms" inheritAll="false"/>
  <copy todir="${target.vms.path}/dist/lib/bb"> <fileset dir="${source.lb.path}/dist/lib/bb" includes="*.*" /></copy>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildInstalls - run installshield to create the SDK and Samples
        installers for win32
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildInstalls_sdk">

  <property name="sdk.file"  value="${target.sdk.path}/../LitebaseSDK"/>

  <!-- delete old files -->
  <delete file="${sdk.file}.exe" />

  <!-- update readme files -->
  <copy file="sdk_sfx.diz" toDir="${rootpath}/">
    <filterset>
      <filter token="VERSION" value="${lb.version}"/>
    </filterset>
  </copy>

  <echo message="Creating ${sdk.file} file..."/>
  <!-- create the splitted rar then the full sfx -->
  <exec dir="${rootpath}/" executable="${winrar.path}/rar.exe" failonerror="yes"><arg line='a -sfx        -y -ep1 -m5 -r -s -idq -zsdk_sfx.diz ${sdk.file} ${target.sdk.path}\*.*'/></exec>
  <!--exec dir="${rootpath}" executable="${winrar.path}/rar.exe" failonerror="yes"><arg line='a -v5000k -vn -y -ep1 -m5 -r -s -idq -zsdk_sfx.diz ${sdk.file} ${target.sdk.path}\*.*'/></exec-->

  <!-- delete temp files -->
  <delete file="${rootpath}/sdk_sfx.diz"/>

</target>

<target name="buildInstalls_vms">

  <property name="vms.file"  value="${target.vms.path}/../LitebaseVMS"/>

  <!-- delete old files -->
  <delete file="${vms.file}*.*" />

  <!-- update readme files -->
  <copy file="vms_sfx.diz" toDir="${rootpath}/">
    <filterset>
      <filter token="VERSION" value="${lb.version}"/>
    </filterset>
  </copy>

  <echo message="Creating ${vms.file} file..."/>
  <!-- create the splitted rar then the full sfx -->
  <exec dir="${rootpath}/" executable="${winrar.path}/rar.exe" failonerror="yes"><arg line='a -sfx -y -ep1 -m5 -r -s -idq -zvms_sfx.diz ${vms.file} ${target.vms.path}\*.*'/></exec>

  <!-- delete temp files -->
  <delete file="${rootpath}/vms_sfx.diz"/>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildIPhone
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="build-deb">
   <antcall target="compile-theos" />
   <antcall target="package-deb" />
</target>

<target name="package-deb">
   <antcall target="package-deb-release">
      <param name="release.type"      value="demo" />
      <param name="output.path"      value="${target.sdk.path}" />
   </antcall>
   <antcall target="package-deb-release">
      <param name="release.type"      value="ras" />
      <param name="output.path"      value="${target.vms.path}" />
   </antcall>
</target>

<target name="compile-theos">
   <property name="remote.path" value="~/ios_workspace/theos/${env.COMPUTERNAME}" />
   <property name="remote.theos.path" value="${remote.path}/Litebase/LitebaseSDK/builders/theos" />
   <property name="output.path.demo" value="${basedir}/theos/demo" />
   <property name="output.path.ras" value="${basedir}/theos/ras" />
   <delete dir="${output.path.demo}" quiet="yes" />
   <delete dir="${output.path.ras}" quiet="yes" />

   <tar
      basedir="${basedir}/../../.."
      includes="Litebase/LitebaseSDK/src/native/**, Litebase/LitebaseSDK/builders/theos/**, TotalCross/TotalCrossVM/src/**"
      destfile="${base.temp.path}/Litebase_theos.tgz"
      compression="gzip"
      longfile="gnu" />
   <sshexec command="
      rm -Rf ${remote.path};
      mkdir -p ${remote.path}"
      host="${macserver.host}" trust="yes" password="${buildserver.pass}" port="22" username="${buildserver.user}" />
   <scp
      file="${base.temp.path}/Litebase_theos.tgz"
      todir="${buildserver.user}@${macserver.host}:${remote.path}/"
      trust="yes" password="${buildserver.pass}" port="22" />

   <sshexec command="
      tar -zxpf ${remote.path}/Litebase_theos.tgz -C ${remote.path};
      bash -l ${remote.theos.path}/build.sh -clean -r demo;
      bash -l ${remote.theos.path}//build.sh -clean -r ras"
      host="${macserver.host}" trust="yes" password="${buildserver.pass}" port="22" username="${buildserver.user}" />
   
   <mkdir dir="${output.path.demo}" />
   <mkdir dir="${output.path.ras}" />
   <scp file="${buildserver.user}@${macserver.host}:${remote.theos.path}/demo/libLitebase.dylib" todir="${output.path.demo}" trust="yes" password="${buildserver.pass}" port="22" />
   <scp file="${buildserver.user}@${macserver.host}:${remote.theos.path}/ras/libLitebase.dylib" todir="${output.path.ras}" trust="yes" password="${buildserver.pass}" port="22" />
</target>

<target name="package-deb-release">
   <fail unless="release.type" />
   <fail unless="output.path" />
   
   <java classname="tc.tools.deployer.IPhoneBuildNatives" fork="yes" dir="${base.temp.path}" failonerror="true">
     <classpath>
         <pathelement location="${base.temp.path}/classes_desktop"/>
         <pathelement location="${tools}/jdeb/lib/ant.jar"/>
         <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
         <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
         <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
     </classpath>
     <arg line="-n Litebase"/>
     <arg line="-c 'Litebase Library'"/>
     <arg line="-d 'TotalCross Litebase library'"/>
     <arg line="-v ${lb.version}"/>
     <arg line="-b ${basedir}/theos/${release.type}/libLitebase.dylib"/>
     <arg line="-t ${output.path}/dist/lib/ios"/>
     <arg value="${source.lb.path}/dist/lib/LitebaseLib.tcz"/>
   </java>

   <!-- package the files -->
   <mkdir dir="${output.path}/dist/lib/ios" />
   <java classname="tc.tools.deployer.IPhoneBuildSource" fork="yes" dir="${output.path}/dist/lib/ios">
     <classpath>
         <pathelement location="${base.temp.path}/classes_desktop"/>
         <pathelement location="${tools}/jdeb/lib/ant.jar"/>
         <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
         <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
         <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
     </classpath>
     <arg line="."/>
   </java>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: buildLinux
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: Linux builds

  1. build the demo litebase native
  2. copy the demo litebase native
  3. packaging
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="buildLinux_sdk_clean" >
  <sshexec command="bash -l ~/build.sh -litebase -linux -clean -force -demo" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>

<target name="buildLinux_sdk" >
  <sshexec command="bash -l ~/build.sh -litebase -linux -demo" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />
</target>
   
<target name="packageLinux" >
   <java classname="tc.tools.deployer.LinuxBuildNatives" fork="yes" dir="${base.temp.path}" failonerror="true">
     <classpath>
         <pathelement location="${base.temp.path}/classes_desktop"/>
         <pathelement location="${tools}/jdeb/lib/ant.jar"/>
         <pathelement location="${tools}/jdeb/lib/bcpg-jdk16-143.jar"/>
         <pathelement location="${tools}/jdeb/lib/bcprov-jdk16-143.jar"/>
         <pathelement location="${tools}/jdeb/jdeb-0.7.jar"/>
     </classpath>
     <arg line="-n Litebase"/>
     <arg line="-c 'Litebase Library'"/>
     <arg line="-d 'TotalCross Litebase library'"/>
     <arg line="-v ${lb.version}"/>
     <arg line="-b ${gcc.project.path}/linux/${type}/libLitebase.so"/>
     <arg line="-t ${target.path}/dist/lib/linux"/>
     <arg value="${source.lb.path}/dist/lib/LitebaseLib.tcz"/>
   </java>
</target>

<target name="packageLinux_sdk">
   <antcall target="packageLinux">
      <param name="type" value="demo" />
      <param name="target.path" value="${target.sdk.path}" />
   </antcall>
</target>
   
<target name="packageLinux_vms">
   <antcall target="packageLinux">
      <param name="type" value="release" />
      <param name="target.path" value="${target.vms.path}" />
   </antcall>
</target>

<target name="buildLinux_vms">

  <sshexec command="bash -l ~/build.sh -litebase -linux -force -clean" host="${buildserver.host}" trust="yes" password="${buildserver.pass}" port="${buildserver.port}" username="${buildserver.user}" />



</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: Android builds
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="clean_android_native" description="Cleans the native files for Android" >
  <delete dir="${base.temp.path}/android/litebase" failonerror="false" />
</target>

<target name="build_android_native" description="Compiles liblitebase.so for Android">
   <property name="type" value="demo" />
   <exec dir="${source.lb.path}/src/native" executable="cmd.exe" failonerror="true">
      <env key="TYPE" value="${type}" />
      <env key="NDK_OUT" value="${base.temp.path}/android/Litebase/${TYPE}" />
      <arg line="/c ${android.ndk.path}/ndk-build"/>
   </exec>
  <sleep seconds="3"/>
</target>

<target name="build_android_java" description="Builds the Litebase.apk for Android">

  <echo message="Assuming that the Android launcher is up-to-date. If its not, run P:\TotalCrossVM\src\launchers\android\makelauncher_jar.bat" />
  <!-- create the temp folder -->
  <delete dir="${android.temp}" failonerror="false" />
  <mkdir dir="${android.temp}" />

	<ant antfile="build.xml" dir="${android.project.path}/apps/litebase" target="clean" inheritAll="false"/>
	<ant antfile="build.xml" dir="${android.project.path}/apps/litebase" target="release" inheritAll="false"/>
  
  <!-- test if the apk contains the needed files -->
  <delete dir="${android.temp}/apk" />
  <unjar src="${apk}" dest="${android.temp}/apk" overwrite="yes"/>
  <available file="${android.temp}/apk/META-INF/TCANDROI.SF" property="apk.is.signed"/>
  <fail unless="apk.is.signed" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: NOT SIGNED. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/AndroidManifest.xml" property="apk.has.xml"/>
  <fail unless="apk.has.xml" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: XML NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <available file="${android.temp}/apk/classes.dex" property="apk.has.dex"/>
  <fail unless="apk.has.dex" message="THE ANDROID APK WAS NOT SUCCESSFULLY GENERATED: DEX NOT FOUND. TRY TO RUN THIS TASK AGAIN."/>
  <delete dir="${android.temp}/apk" />

</target>

<target name="build_android"  depends="build_android_native" description="Compiles liblitebase.so and builds the Litebase.apk for Android" >
   <copy todir="${android.project.path}/apps/litebase/libs" overwrite="true" >
      <fileset dir="${source.lb.path}/src/native/jni/libs" >
         <include name="**/*.so" />
      </fileset>
   </copy>
  <retry retrycount="3">
    <antcall target="build_android_java" />
  </retry>
</target>

<target name="adb" description="Just installs Litebase on Android (no build is performed)." >
  <property name="apk" value="${apk}" />
  <exec executable="adb${exe}" >
   <arg line="install -r ${apk}" />
  </exec>
</target>

<target name="install_android" depends="buildAndroid_sdkNoClean,adb" description="Builds and installs Litebase on Android." />

<target name="buildAndroid_sdkNoClean">
  <delete dir="${android.project.path}/out/src" />
  <antcall target="build_android" >
   <param name="type" value="demo" />
   </antcall>
  <copy file="${android.temp}/Litebase.apk" todir="${target.sdk.path}/dist/lib/android" overwrite="true" />
</target>

<target name="buildAndroid_sdk" depends="clean_android_native,buildAndroid_sdkNoClean" />

<target name="buildAndroid_vms" depends="clean_android_native">
  <delete dir="${android.project.path}/out/src" />
  <antcall target="build_android" >
   <param name="type" value="release" />
   </antcall>
  <copy file="${android.temp}/Litebase.apk" todir="${target.vms.path}/dist/lib/android" overwrite="true" />
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: companion

-description:
        Converts the TotalCross companion file
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="companion" description="Generates the PDF for Litebase Companion">
   <ant antfile="build.xml" dir="${tc.base.path}" target="jodconverter" inheritAll="false">
      <property name="from" value="${source.lb.path}/docs/Litebase Companion.odt" />
      <property name="to" value="${target.sdk.path}/docs/Litebase Companion.pdf" />
   </ant>
</target>	
	
<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: ftp things to the site
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="ftp_demo_vms" >

  <property file="${rootpath}/swcombr.properties"/>
  <property name="temp" value="${source.lb.path}/output/tempftp"/>
  <property name="vm.dir" value="${target.sdk.path}/dist/lib"/>
  <mkdir dir="${temp}" />

  <zip destfile="${temp}/lb_bb.zip" compress="true" filesonly="true" basedir="${vm.dir}/bb" includes="Litebase.alx,Litebase.cod" />
  <zip destfile="${temp}/lb_palm5.zip" compress="true" filesonly="true" basedir="${vm.dir}/palm" includes="LitebaseLib.pdb,LitebaseConduit.prc,Litebase.prc" />
  <zip destfile="${temp}/lb_win32.zip" compress="true" >
    <zipfileset dir="${vm.dir}/win32" includes="Litebase.dll" />
    <zipfileset dir="${vm.dir}" includes="LitebaseLib.tcz" />
  </zip>
  <zip destfile="${temp}/lb_android.zip" compress="true" filesonly="true" basedir="${vm.dir}/android" />
  <copy todir="${temp}"><fileset dir="${vm.dir}/ios" includes="*.deb"/><globmapper from="*.deb" to="*.zip"/></copy>
  <copy todir="${temp}"><fileset dir="${vm.dir}/linux"    includes="*.deb"/><globmapper from="*.deb" to="*.zip"/></copy>

  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="superwaba.com.br/vms" verbose="yes">
     <fileset dir="${vm.dir}/wince" includes="*.CAB" />
     <fileset dir="${temp}" />
  </ftp>

  <delete dir="${temp}" />

</target>

<target name="ftp_javadoc" >

  <property file="${rootpath}/swcombr.properties"/>

  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" action="del" >
   <fileset includes="totalcross.com/doclb/**" />
  </ftp>

  <ftp server="ftp.superwaba.com.br" userid="${swcombr.user}" password="${swcombr.pass}" remotedir="totalcross.com/doclb" verbose="yes">
     <fileset dir="${target.sdk.path}/docs/html" />
  </ftp>

</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: checks if we must update the versions of the files prior to a build.
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="checkVersionOnProjects">
  <loadfile srcfile="${msvc.project.path}/builders/vc2008/Litebase.vcproj" property="version.updated">
    <filterchain>
      <linecontains>
         <contains value='Version="${tc.version}"'/>
      </linecontains>
    </filterchain>
  </loadfile>

  <fail unless="version.updated" message="************************************* Please update the project version information on VC2008, EVC, gcc-arm/vm/resources.rcp!!!! **********"/>
</target>

<!--+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
target: build targets
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-->

<target name="build_sdk" depends="checkVersionOnProjects,createSkeleton,buildSkeleton,build-deb,buildLinux_sdk_clean,packageLinux_sdk,buildPalmOS5_sdk,buildWin32_sdk,buildWinCE_sdk,buildAndroid_sdk,companion,buildSamples_sdk,buildInstalls_sdk" description="Builds SDK DEMO from scratch" />
<target name="build_vms" depends="checkVersionOnProjects,createSkeleton,buildBB_vms,build-deb,buildLinux_vms,buildWinCE_vms,buildWin32_vms,buildPalmOS5_vms,buildAndroid_vms,buildInstalls_vms" description="Builds the VMs full version" />

<target name="ftp" depends="ftp_javadoc,ftp_demo_vms" description="FTP the iphone sdk and javadoc" />
<target name="build_all" depends="build_sdk,build_vms" description="builds sdk and vms" />
</project>
