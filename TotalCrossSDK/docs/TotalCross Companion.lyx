#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass memoir
\begin_preamble
%used by the cover
\usepackage{graphicx}

%used to insert tab stops in itemize or enumerate
\usepackage{tabto}

\usepackage[utf8]{inputenc}
\DeclareUnicodeCharacter{2190}{\ifmmode \leftarrow \else \textleftarrow \fi} % override

% T1 Helvetica scaled
\usepackage[T1]{fontenc}
\usepackage[scaled]{helvet}
\renewcommand*{\familydefault}{\sfdefault}

% Chapter style
\usepackage{xcolor,calc}

\makechapterstyle{combined}{
  \setlength{\beforechapskip}{30pt}
  \setlength{\midchapskip}{-60pt}
  \setlength{\afterchapskip}{60pt}
  \renewcommand*{\printchaptername}{}
  \renewcommand*{\chapnumfont}{\normalfont\sffamily\bfseries\fontsize{80}{0}\selectfont}
  \renewcommand*{\printchapternum}{\flushright\chapnumfont\textcolor[rgb]{.64,.79,.87}{\thechapter}}
  \renewcommand*{\chaptitlefont}{\normalfont\sffamily\Huge\bfseries}
  \renewcommand*{\printchaptertitle}[1]{%
    \raggedright\chaptitlefont\parbox[t]{\textwidth-3cm}{\raggedright##1}}
}

\chapterstyle{combined}

% Code listing
\usepackage{listings,color}

\definecolor{dkgreen}{RGB}{63,127,95}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{light-gray}{rgb}{0.925,0.925,0.925}
\definecolor{mauve}{RGB}{127,0,85}

 \lstset{
        language=Java,
        backgroundcolor=\color{light-gray},
         basicstyle=\footnotesize\ttfamily, % Standardschrift
         numbers=left,               % Ort der Zeilennummern
         numberstyle=\tiny,          % Stil der Zeilennummern
         %stepnumber=2,               % Abstand zwischen den Zeilennummern
         numbersep=5pt,              % Abstand der Nummern zum Text
         tabsize=2,                  % Groesse von Tabs
         extendedchars=true,         %
         breaklines=true,            % Zeilen werden Umgebrochen
        emph={LEFT,RIGHT,CENTER,TOP,BOTTOM,FILL,FIT,CENTER_OF,BOTTOM_OF,AFTER,BEFORE},
        emphstyle=\color{blue}\textit,
         keywordstyle=\color{mauve}\textbf,
         frame=b,
 %        keywordstyle=[2]\textbf,    % Stil der Keywords
 %        keywordstyle=[2]\textbf,    %
 %        keywordstyle=[3]\textbf,    %
 %        keywordstyle=[4]\textbf,   \sqrt{\sqrt{}} %
         commentstyle=\color{dkgreen},       % comment style
         stringstyle=\color{blue},         % string literal style
  %       stringstyle=\color{white}\ttfamily, % Farbe der String
         showspaces=false,           % Leerzeichen anzeigen ?
         showtabs=false,             % Tabs anzeigen ?
         xleftmargin=17pt,
         framexleftmargin=17pt,
         framexrightmargin=5pt,
         framexbottommargin=4pt,
         %backgroundcolor=\color{lightgray},
         showstringspaces=false      % Leerzeichen in Strings anzeigen ?        
 }
 \lstloadlanguages{% Check Dokumentation for further languages ...
         %[Visual]Basic
         %Pascal
         %C
         %C++
         %XML
         %HTML
         Java
 }
    %\DeclareCaptionFont{blue}{\color{blue}} 

  %\captionsetup[lstlisting]{singlelinecheck=false, labelfont={blue}, textfont={blue}}
  \usepackage{caption}
\DeclareCaptionFont{white}{\color{white}}
\DeclareCaptionFormat{listing}{\colorbox[cmyk]{0.43, 0.35, 0.35,0.01}{\parbox{\textwidth}{\hspace{15pt}#1#2#3}}}
\captionsetup[lstlisting]{format=listing,labelfont=white,textfont=white, singlelinecheck=false, margin=0pt, font={bf,footnotesize}}

% New style chapter star, so we can have unumbered chapters to show in ToC
\newcommand{\tocchap}[1]{\addcontentsline{toc}{chapter}{\protect\numberline
{}#1}\markboth{\textsc{#1}}{\textsc{#1}}\thispagestyle{plain}}
\newcommand{\chapterstar}[1]{\chapter*{#1}\tocchap{#1}}

% Sections are not numbered
\setcounter{secnumdepth}{0}

% Vertical gap between paragraphs
\setlength{\parskip}{\medskipamount}
\end_preamble
\use_default_options true
\begin_modules
enumitem
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding default
\fontencoding global
\font_roman lmodern
\font_sans default
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_title "TotalCross Companion"
\pdf_author "TotalCross"
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref section
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=black"
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 4cm
\footskip 1cm
\secnumdepth 0
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
clearpage
\end_layout

\begin_layout Plain Layout

%% temporary titles 
\end_layout

\begin_layout Plain Layout

% command to provide stretchy vertical space in proportion
\end_layout

\begin_layout Plain Layout


\backslash
newcommand
\backslash
nbvspace[1][3]{
\backslash
vspace*{
\backslash
stretch{#1}}}
\end_layout

\begin_layout Plain Layout

% allow some slack to avoid under/overfull boxes
\end_layout

\begin_layout Plain Layout


\backslash
newcommand
\backslash
nbstretchyspace{
\backslash
spaceskip0.5em plus 0.25em minus 0.25em}
\end_layout

\begin_layout Plain Layout

% To improve spacing on titlepages
\end_layout

\begin_layout Plain Layout


\backslash
newcommand{
\backslash
nbtitlestretch}{
\backslash
spaceskip0.6em}
\end_layout

\begin_layout Plain Layout


\backslash
pagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
begin{center}
\end_layout

\begin_layout Plain Layout


\backslash
bfseries
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[1]
\end_layout

\begin_layout Plain Layout


\backslash
Huge
\end_layout

\begin_layout Plain Layout

{
\backslash
nbtitlestretch
\backslash
huge
\backslash
textcolor[RGB]{25,60,240} 
\end_layout

\begin_layout Plain Layout

{The TotalCross Companion}}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[2]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
includegraphics[scale=1]{companion_resources/images/TotalCross_cor_vertical}
 
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[5] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
large 
\end_layout

\begin_layout Plain Layout

Version 3.1
\end_layout

\begin_layout Plain Layout


\backslash
nbvspace[1] 
\end_layout

\begin_layout Plain Layout


\backslash
end{center}
\end_layout

\end_inset


\begin_inset Newpage newpage
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pagestyle{companion}
\end_layout

\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage cleardoublepage
\end_inset


\end_layout

\begin_layout Part
THE PLATFORM
\end_layout

\begin_layout Chapter*
Welcome
\end_layout

\begin_layout Standard
Welcome to TotalCross.
 This tutorial assumes that you know how to write Java programs.
 If not, I suggest that you take a basic course in Java at 
\begin_inset CommandInset href
LatexCommand href
target "http://java.sun.com/docs/books/tutorial/java/index.html"

\end_inset


\end_layout

\begin_layout Standard
However, you'll have to forget the JDK API and use the TotalCross API.
 Make a good read of the API javadocs: they will show you the differences
 between the JDK and the TotalCross API.
\end_layout

\begin_layout Standard
Some conventions used in this tutorial:
\end_layout

\begin_layout Itemize
When a code sample has ...
 (ellipses) between two parts, it means that some part of that code has
 been omitted.
\end_layout

\begin_layout Itemize
Measurements are always in 
\emph on
pixels
\emph default
, unless otherwise specified.
\end_layout

\begin_layout Standard
This tutorial follows the Object Oriented naming convention: a class containing
 methods (~functions) and properties or fields (~variables).
\end_layout

\begin_layout Standard

\series bold
TC
\series default
 refers to TotalCross.
 
\end_layout

\begin_layout Standard

\series bold
TCVM
\series default
 refers to the TotalCross virtual machine.
\end_layout

\begin_layout Standard
The term “
\series bold
main class
\series default
” always refers to the class that extends 
\family typewriter
totalcross.ui.MainWindow
\family default
 or implements 
\family typewriter
totalcross.MainClass
\family default
.
\end_layout

\begin_layout Standard
The term “
\family typewriter
\series bold
%TOTALCROSS_HOME
\series default
%
\family default
” refers to the directory where the TotalCross SDK is located.
 The default location is 
\family typewriter
C:
\backslash
TotalCross3SDK
\family default
.
 But you can change it during installation.
\end_layout

\begin_layout Standard
Please read the Copyright terms in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "chap:Copyright"

\end_inset

.
 By reading this text, you're agreeing with them.
\end_layout

\begin_layout Chapter
TotalCross Overview
\end_layout

\begin_layout Standard
Thank you for your interest in TotalCross.
 If you don't know where to start, here's a quick overview of the platform:
\end_layout

\begin_layout Section
Supported Platforms
\end_layout

\begin_layout Itemize
Android 2.3.3 and above (API level 10).
\end_layout

\begin_layout Itemize
iOS 6.0 and above.
\end_layout

\begin_layout Itemize
Windows XP and above.
\end_layout

\begin_layout Itemize
Linux 32 bits (we only assure that it works on Debian distribution).
 
\end_layout

\begin_layout Itemize
Browser as Java applet (JDK 1.1 and above).
 Note that in this case you must enable some permission so that you can
 use files and, consequently, Litebase.
\end_layout

\begin_layout Itemize
Java SE.
\end_layout

\begin_layout Itemize
Windows Phone 8.
\end_layout

\begin_layout Section
Virtual Machine Features
\end_layout

\begin_layout Standard
The TotalCross Virtual Machine (TCVM) is a shared library written from scratch,
 and has the following features: 
\end_layout

\begin_layout Itemize
It interprets a proprietary set of opcodes instead of Java Bytecodes.
\end_layout

\begin_layout Itemize
It is a register-based VM, not stack-based as Java, which results in better
 performance.
\end_layout

\begin_layout Itemize
It has support for real multi-threading.
 Note that the TotalCross API does not supports concurrency, which must
 be implemented by your own.
\end_layout

\begin_layout Itemize
The TotalCross class (
\family typewriter
tclass
\family default
) files stores internal information in little endian, since its the most
 widely used format of actual microprocessors.
\end_layout

\begin_layout Itemize
The 
\family typewriter
tclass
\family default
 files are highly optimized to save space.
 For instance, the constant pool (where strings, constants, and identifiers
 are stored) is shared among all deployed classes, and each class entry
 is compressed using zlib.
\end_layout

\begin_layout Itemize
Supports headless applications (like daemon applications, without user interface
): just implement the interface 
\family typewriter
totalcross.MainClass
\family default
 and this class will be loaded by the TCVM.
 The 
\family typewriter
appStarting()
\family default
 and 
\family typewriter
appEnding()
\family default
 methods are called and the application exits.
\end_layout

\begin_layout Itemize
Supports the method 
\family typewriter
finalize()
\family default
, ran every time the garbage collector (gc) finishes its job.
 There's a limitation: no objects can be created inside a finally method,
 otherwise the method will silently abort itself.
 Optionally, to improve GC's performance, you can define in your class a
 public non-static field named 
\family typewriter
dontFinalize
\family default
 that, if present and set to 
\family typewriter
true
\family default
, will skip the finalize call.
 In most cases, 
\family typewriter
finalize()
\family default
 is used to ensure that a class that holds system resources (like file or
 socket) and should be closed to release these resources is always closed,
 either because the programmer forgot to do it himself or because the program
 was halted by an exception.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that you must define the field 
\family typewriter
dontFinalize
\family default
 and set it to 
\family typewriter
true
\family default
 when the close method is run for the first time.
 Otherwise the gc will try to finalize an object that was already closed
 by the programmer, which may cause trouble.
 Doing so also speeds up the gc.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The TotalCross VM also has a drawback:
\end_layout

\begin_layout Itemize
It does not support the 
\family typewriter
float
\family default
 type, only 
\family typewriter
double
\family default
.
 This option was adopted because all actual PDA processors have a math co-proces
sor, and also because the vast majority of mobile applications are not scientifi
c programs.
 During our research, we found that 
\family typewriter
float
\family default
 types are two times faster than double, but this small performance difference
 does not make up for the overhead needed to add 
\family typewriter
float
\family default
 type support to the virtual machine.
 The change from 
\family typewriter
float
\family default
 to 
\family typewriter
double
\family default
 will be done by the translator to let legacy applications work, however,
 you should change your application to use 
\family typewriter
double
\family default
, since there's no benefit by using 
\family typewriter
float
\family default
.
\end_layout

\begin_layout Section
Thread support
\end_layout

\begin_layout Standard
TotalCross supports preemptive threads using the native thread mechanism
 of each supported platform.
 On Android, iOS, and Linux, it uses pthread, and on Windows, it uses the
 quite well documented thread api.
\end_layout

\begin_layout Standard
The API does not support concurrency.
 If your program needs to access the same object from many threads, you
 must use the 
\family typewriter
synchronized
\family default
 keyword.
 The support for synchronized is limited: it does not support synchronized
 methods.
 So, you must use the 
\family typewriter
synchronized(object)
\family default
, and it is more efficient to use it with 
\family typewriter
totalcross.util.concurrent.Lock
\family default
.
 Using the
\family typewriter

\begin_inset Newline newline
\end_inset

synchronized
\family default
 keyword before a method will be useless: it will be ignored by the VM.
 Note that these problems will not occur when running on Java desktop, only
 when running on TCVM.
 Here's a sample that shows how to use it:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[label=samplecode,caption=A sample]{companion_resources/listings/
TestConcurrent.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the sample above, commenting out the line marked with *****, the log
 list box will be filled randomly by the threads.
 With the lock, it will be filled in sequence, because each thread will
 gain the lock once, and the other threads will have to wait the main loop
 of the lock owner finish before starting their loops.
 There's no limit in the number of locks used.
\end_layout

\begin_layout Standard
Generally speaking, you can create a thread to listen to a socket or a file
 or even a Litebase table in background, but be aware that if you try to
 access the same resource by different threads your application might just
 blow up.
 We also don't recommend running the user interface in a background thread,
 due to system event concurrency.
 Threads should be used for I/O and other tasks, but not for showing user
 interface screens that could receive events.
\end_layout

\begin_layout Section
Graphics, Palette and Color
\end_layout

\begin_layout Standard
TotalCross has a graphics engine written from scratch, and some important
 performance-tailored decisions were taken.
\end_layout

\begin_layout Standard
Regardless of the device's color depth, the screen and images are stored
 in a 24 bpp RGB array.
 All drawings are made into a single off screen, which is then converted
 on the fly to the device's screen color depth when the 
\family typewriter
updateScreen()
\family default
 method is called.
 Note that since 2011, no devices with 8 bpp are released to the market;
 all of them use at least 16 bpp (65536 colors).
\end_layout

\begin_layout Standard
The 
\family typewriter
Graphics
\family default
 class supports real clipping, which allowed us to support containers that
 automatically show scrollbars if components are placed beyond its limits.
\end_layout

\begin_layout Standard
TotalCross also supports screen rotation and collapsible input area.
 If the user interface is implemented using only relative coordinates, it
 will automatically reposition itself whenever the screen resolution is
 changed.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that 
\family typewriter
aControl.setRect(getClientRect())
\family default
 should never be used, otherwise the automatic repositioning will not work.
 Instead, 
\family typewriter
aControl.setRect(LEFT, TOP, FILL, FILL)
\family default
 should be used to produce the same result without affecting the repositioning.
 If you really have to use 
\family typewriter
getClientRect()
\family default
, you must also override the 
\family typewriter
reposition()
\family default
 method to support screen rotation.
 (see the WorldWatch sample).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Colors are represented by 
\family typewriter
int
\family default
 values in the 
\family typewriter
0xRRGGBB
\family default
 format.
 A 
\family typewriter
null
\family default
 color is represented by the value -1.
\end_layout

\begin_layout Section
Images
\end_layout

\begin_layout Standard
Images in TotalCross supports transparency (also known as alpha-channel).
 The best way to show images is to generate a PNG image from a vectorized
 image through Photoshop or any other good editor.
 Prefer creating a big image (for example, 96x96), then decrease its size
 at runtime using 
\family typewriter
Image.getSmoothScaledInstance
\family default
.
\end_layout

\begin_layout Section
Inheritance and Delegation event models
\end_layout

\begin_layout Standard
TotalCross supports both Inheritance (Java 1.0) and Delegation (Java 1.1)
 event models.
 However, the usage of the later one is not recommended.
 The Inheritance model will make your code smaller and faster, but there
 are some situations that require the usage of the Delegation model.
\end_layout

\begin_layout Section
Security
\end_layout

\begin_layout Standard
TotalCross applications are currently impossible to be decompiled, because,
 as mentioned before, TotalCross uses a proprietary set of opcodes instead
 of Java Bytecodes.
 The translation between Java Bytecodes to TotalCross opcodes is done automatica
lly when the application is deployed.
\end_layout

\begin_layout Standard
However, this also means that you cannot retrieve your application's source
 files from the deployed application, so don't forget to backup your source
 files!
\end_layout

\begin_layout Section
Getting Started
\end_layout

\begin_layout Standard
Be sure to read the API javadocs at 
\family typewriter
%TOTALCROSS_HOME%/docs/html/index.html
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The javadocs and this reference manual are complementary, and the javadocs
 are updated more often than this text.
 So make sure to read them for more information.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are some examples in the 
\family typewriter
%TOTALCROSS_HOME%/src/java/tc/samples
\family default
 directories.
 These samples covers the usage of a great portion of TotalCross' class
 library, so it's a good source of information from where you can start
 your applications.
\end_layout

\begin_layout Standard
Our official forum (
\begin_inset CommandInset href
LatexCommand href
target "http://forum.totalcross.net"

\end_inset

) is a good place to seek for help from fellow TotalCross users and share
 your knowledge.
\end_layout

\begin_layout Section
Bug Reporting
\end_layout

\begin_layout Standard
If you'd like to report a bug or problem within the TotalCross SDK – including,
 but not limited to:
\end_layout

\begin_layout Itemize
Documentation problems, grammar errors, or typos.
\end_layout

\begin_layout Itemize
TotalCross platform bug.
\end_layout

\begin_layout Itemize
Sample bug.
\end_layout

\begin_layout Standard
You should first take a look at the TotalCross changelog
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "(http://www.totalcross.org/changelogs.html)"
target "http://www.totalcross.org/changelogs.html"

\end_inset

 and check if your bug was already fixed on a later version of the TotalCross
 SDK.
\end_layout

\begin_layout Standard
When opening an issue, it's very important to give all the details so that
 its correction will be faster.
 Here's a rough template of a bug report for TotalCross:
\end_layout

\begin_layout Itemize
TotalCross version, e.g.
 1.0 beta 4.
\end_layout

\begin_layout Itemize
Platform used and OS version, e.g.
 JDK 1.8, Windows XP, Windows Phone 8
\end_layout

\begin_layout Itemize
Devices used, e.g.
 Android, iPhone, Java Standard Edition (desktop).
\end_layout

\begin_layout Itemize
Device model.
\end_layout

\begin_layout Itemize
Bug description.
\end_layout

\begin_layout Itemize
How to reproduce the bug?
\end_layout

\begin_layout Standard
For documentation problems and such, just pointing the resource and the
 problem is enough.
\end_layout

\begin_layout Standard
The purchased support can also be used to solve doubts about using TotalCross.
\end_layout

\begin_layout Chapter
The TotalCross SDK
\end_layout

\begin_layout Standard
The TotalCross SDK Java files are covered by the LGPL version 3.
 By installing the SDK you are agreeing with this.
 The TotalCross virtual machine follows another license.
\end_layout

\begin_layout Standard
The VM provided in the SDK is a demo version.
 It will work for 80 non-contiguous hours, regardless of the platform.
 The remaining time is updated every 5 seconds.
\end_layout

\begin_layout Standard
On Android and iOS, it's only necessary to first uninstall and then reinstall
 TotalCross (or your application together with it), so that you will have
 more 80 hours to test.
 This is NOT considered a license violation.
\end_layout

\begin_layout Standard
On Win32 (Windows, XP, Vista, Seven, or 8), this can only be done by reinstallin
g Windows.
\end_layout

\begin_layout Standard
In order to deploy applications, the JDK 1.8 is recommended.
 It's a good idea to install the latest version of Java 1.8.
 
\end_layout

\begin_layout Standard
In most situations, you will install several programs that will share the
 same TCVM.
 For instance, you can install 10 or more samples and a single virtual machine.
 However, if you're deploying an application to your costumer, you can package
 the VM with your application, using the 
\family typewriter
tc.Deploy
\family default
's 
\family typewriter
/p
\family default
 option.
 In this case, a single package is needed.
\end_layout

\begin_layout Section
Directory structure
\end_layout

\begin_layout Standard
The SDK has the following structure: 
\end_layout

\begin_layout Description

\family typewriter
%TOTALCROSS_HOME%
\end_layout

\begin_layout Description

\family typewriter
- dist
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
+ samples
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
+ vm
\end_layout

\end_deeper
\end_deeper
\begin_layout Description

\family typewriter
+ docs
\end_layout

\begin_layout Description

\family typewriter
+ etc
\end_layout

\begin_layout Description

\family typewriter
+ src
\end_layout

\begin_layout Standard
Inside 
\family typewriter
dist
\family default
, we have:
\end_layout

\begin_layout Itemize

\family typewriter
tc.jar
\family default
 : This file contains all 
\family typewriter
totalcross.*
\family default
 base classes and deploy tools, and it should be added to the classpath
 of your chosen IDE.
 Note that 
\family typewriter
TCFont.tcz
\family default
 is needed to run an application on Java.
 It also contains Litebase classes.
\end_layout

\begin_layout Itemize

\family typewriter
tcweb.jar
\family default
 : This file contains all 
\family typewriter
totalcross.*
\family default
 base classes and fonts, to be used if you want to run the application in
 a browser.
 This one is greater in size than 
\family typewriter
tc.jar
\family default
 because of the fonts.
 That is, it is not necessary to add 
\family typewriter
TCFont.tcz.

\family default
 It also contains Litebase classes.
\end_layout

\begin_layout Itemize

\family typewriter
samples
\family default
: Installation files for all samples.
 Litebase samples are also inside, in the folder 
\family typewriter
litebase
\family default
.
 Lets take the TotalCrossAPI sample, located at 
\family typewriter
TotalCrossSDK
\backslash
dist
\backslash

\begin_inset Newline newline
\end_inset

samples
\backslash
TotalCrossAPI
\family default
.
 Inside there's an install folder, and below the following folders:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
applet
\family default
: contains some 
\family typewriter
.html
\family default
 files (representing most used devices) and the application's jar.
 Using a multi-tabbed browser, you should close it every time you open one
 of the samples 
\family typewriter
.html
\family default
, otherwise errors may occur.
 You should also give special permission for file usage so that it is possible
 to manipulate files and Litebase.
\end_layout

\begin_layout Itemize

\family typewriter
win32
\family default
: there are two files, an 
\family typewriter
.exe
\family default
 and a 
\family typewriter
.tcz
\family default
, which must be copied to the same folder where the TotalCross VM for Win32
 is located, or to a sub folder.
 The executable will search for the VM on these locations.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If your desktop has the SDK installed, you may run the application from
 any place, as long as the environment variables set during the installation
 are not changed and the SDK installation folder is not moved.
 If your application can't found the SDK (or the right SDK if you have more
 than one installed), make sure that the environment variable 
\family typewriter
TOTALCROSS3_HOME
\family default
 is pointing to the desired TotalCross installation folder.
 On some systems (Windows 8, for instance), 
\family typewriter
TOTALCROSS3_HOME
\family default
 must be set both in user and system environment variables.
 If there is no 
\family typewriter
TOTALCROSS3_HOME
\family default
, TotalCross will search for the variable used in older TotalCross versions,
 which is 
\family typewriter
TOTALCROSS_HOME
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
wp8
\family default
: a 
\family typewriter
.xap
\family default
 file which includes the sample, TotalCross, and Litebase.
 Note that to install the sample you must enable your phone to allow development
 mode.
\end_layout

\begin_layout Itemize

\family typewriter
linux
\family default
: a 
\family typewriter
.tcz
\family default
 file and a binary file.
 They must be copied to where the VM is, or a folder below.
\end_layout

\begin_layout Itemize

\family typewriter
android
\family default
: an 
\family typewriter
.apk
\family default
 file that contains the binary and the 
\family typewriter
.tcz
\family default
 files.
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
Note
\series default
: There is no 
\family typewriter
iOS
\family default
 folder since to install an application on iOS you MUST have an Apple key.
 It will be explained later on this manual.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
vm
\family default
: virtual machine files that which will interpret your TotalCross code on
 the device and Litebase library.
 Below are instructions of how to install them in each platform:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
TCBase.tcz
\family default
, 
\family typewriter
TCFont.tcz
\family default
, 
\family typewriter
TCUI.tcz
\family default
, and 
\family typewriter
LitebaseLib.tcz
\family default
.
 These files are necessary to run TotalCross and Litebase on Windows 32
 and Linux.
\end_layout

\begin_layout Itemize

\family typewriter
iOS
\family default
: contains the 
\family typewriter
TotalCross.ipa
\family default
 file which must be used to generate the 
\family typewriter
.ipa
\family default
 file for your application and the samples if you have an Apple key.
 It already includes Litebase.
\end_layout

\begin_layout Itemize

\family typewriter
win32
\family default
: have the files 
\family typewriter
TCVM.dll
\family default
 and 
\family typewriter
Litebase.dll
\family default
 on the same folder of the application or install TotalCross properly in
 your operational system.
\end_layout

\begin_layout Itemize

\family typewriter
wp8
\family default
: a 
\family typewriter
TotalCross.xap
\family default
 that must be used to generate the 
\family typewriter
.xap
\family default
 of your application.
 It already includes Litebase.
\end_layout

\begin_layout Itemize

\family typewriter
android
\family default
: just install the file 
\family typewriter
TotalCross.apk
\family default
 (
\family typewriter
adb install -r TotalCross.apk
\family default
), which already includes Litebase.
\end_layout

\begin_layout Itemize

\family typewriter
linux
\family default
: executables (
\family typewriter
.deb
\family default
) for TotalCross and Litebase to be used on linuxes.
\end_layout

\end_deeper
\begin_layout Standard
Inside 
\family typewriter
docs
\family default
, we have:
\end_layout

\begin_layout Itemize

\family typewriter
TotalCross Companion.pdf
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
Litebase Companion.pdf
\family default
.
\end_layout

\begin_layout Itemize
The folder 
\family typewriter
html
\family default
, which contains the generated javadocs for TotalCross and Litebase.
 Open the files 
\family typewriter
index.html
\family default
 to see the javadocs start page.
\end_layout

\begin_layout Itemize
An ant build sample (
\family typewriter
build.xml
\family default
) to deploy a TotalCross application.
\end_layout

\begin_layout Standard
Inside 
\family typewriter
etc
\family default
, we have the following folders:
\end_layout

\begin_layout Itemize

\family typewriter
images
\family default
: contains images used by the SDK.
\end_layout

\begin_layout Itemize

\family typewriter
launchers
\family default
: contains files used by 
\family typewriter
tc.Deploy
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
security
\family default
: contains signature files.
\end_layout

\begin_layout Itemize

\family typewriter
tools
\family default
: contains tools used by 
\family typewriter
tc.Deploy
\family default
.
 Inside this folder, you may use only the folder with some Android tools
 used to install the application or debug on the device.
\end_layout

\begin_layout Standard
Inside 
\family typewriter
src
\family default
:
\end_layout

\begin_layout Itemize

\family typewriter
tc/samples:
\family default
 the sources files of all TotalCross samples.
\end_layout

\begin_layout Itemize

\family typewriter
lb/samples:
\family default
 the sources files of all Litebase samples.
\end_layout

\begin_layout Itemize

\family typewriter
totalcross:
\family default
 the sources files of the TotalCross API used on the desktop.
\end_layout

\begin_layout Section
Running the Samples
\end_layout

\begin_layout Standard
The TotalCross SDK comes with various sample applications along with their
 source code.
 The samples are simple and most of them address a specific feature.
 They were designed to show you the TotalCross main features and to provide
 a starting point for your own applications.
\end_layout

\begin_layout Standard
The built samples can be found on 
\family typewriter
%TOTALCROSS_HOME%/dist/samples
\family default
.
 Just follow the installation instructions from chapter 6 and run the sample
 on your target platform.
\end_layout

\begin_layout Chapter
Building and deploying your first TotalCross application
\end_layout

\begin_layout Standard
TotalCross applications are developed almost exactly like Java applications,
 so anyone familiar with Java should be able to start small TotalCross applicati
ons in a few minutes.
\end_layout

\begin_layout Standard
However, this similarity is often also source of problems, so before writing
 any code, we must first be aware of the differences between Java and TotalCross
 development.
\end_layout

\begin_layout Itemize
The entry point of a TotalCross application is always a class that extends
 the class 
\family typewriter

\begin_inset Newline newline
\end_inset

MainWindow
\family default
 (directly or indirectly) or implements the interface 
\family typewriter
MainClass
\family default
.
 It is not possible to directly run TotalCross applications in Java, in
 this case, you must use the launcher provided with the SDK.
 (see Chapter 4 for details about 
\family typewriter
totalcross.Launcher
\family default
).
\end_layout

\begin_layout Itemize
For your convenience, the TotalCross package 
\family typewriter
totalcross.lang
\family default
 is directly mapped to the Java package 
\family typewriter
java.lang
\family default
.
 Therefore, you may refer to classes from this package, such as 
\family typewriter
Object
\family default
 or 
\family typewriter
String
\family default
, like you would in any Java application, without requiring any explicit
 import.
\end_layout

\begin_deeper
\begin_layout Standard
Unfortunately this feature can be misleading, because the opposite is NOT
 true.
 The 
\family typewriter

\begin_inset Newline newline
\end_inset

java.lang
\family default
 package does have members (interfaces, classes, exceptions, or errors)
 that are not available in 
\family typewriter
totalcross.lang
\family default
 – and some of the members that are available, may not implement all the
 methods provided by the homonymous member.
 Some examples are the 
\family typewriter
Integer
\family default
 class and the method 
\family typewriter
String.replaceFirst()
\family default
, which are not implemented by TotalCross.
\end_layout

\begin_layout Standard
This is one of the most common pitfalls when developing TotalCross applications
 using a Java IDE, because its content assist will show classes and methods
 that are not implemented by TotalCross, and therefore, not available on
 the device.
\end_layout

\begin_layout Standard
To avoid this problem, the TotalCross deployer verifies the class files,
 reporting any invalid references found.
 The deployer will throw an exception if you try to deploy an application
 with references to classes not available in 
\family typewriter
totalcross.lang
\family default
.
 
\end_layout

\end_deeper
\begin_layout Itemize
You should also check TotalCross Javadoc to see if the desired 
\family typewriter
totalcross.lang
\family default
 reference is available so that you won't have to rewrite parts of your
 program during the deployment process.
\end_layout

\begin_layout Itemize
You CANNOT use nor import 
\family typewriter
totalcross.lang
\family default
 package in desktop.
 When 
\family typewriter
tc.Deploy
\family default
 is called, all references to 
\family typewriter
java.lang
\family default
 are replaced by 
\family typewriter
totalcross.lang
\family default
 automatically.
\end_layout

\begin_layout Itemize
To use collection classes, the approch is similar for 
\family typewriter
java.lang
\family default
 classes.
 You must use 
\family typewriter
java.util
\family default
 classes and 
\family typewriter
tc.Deploy
\family default
 will convert them to the correspondent 
\family typewriter
totalcross.util
\family default
 classes.
 Notice that in this case some fields and methods found in the Java classes
 might also be missing in TotalCross classes.
 Therefore, in this case you must also check the javadocs.
\end_layout

\begin_layout Itemize
TotalCross is compatible only with the Java 1.8 class file format or below,
 therefore the class files MUST be generated targeting the JDK 1.8 and the
 source files must be compatible with JDK 1.8.
\end_layout

\begin_deeper
\begin_layout Standard
If you're compiling using 
\family typewriter
javac
\family default
 from command line (or an ANT file), add this to your command line: 
\family typewriter
-target 1.8 -source 1.8
\family default
.
\end_layout

\begin_layout Standard
If you're using a Java IDE, look for its Java Compiler settings and set
 its compliance level to 1.8.
 But please notice that it might happen that the 
\family typewriter
.class
\family default
 generated by an IDE such as Eclipse is not fully compatible with 
\family typewriter
tc.Deploy
\family default
 and an unexpected problem might happen due to this fact.
 If this is the case, try using 
\family typewriter
javac
\family default
 instead (if your program has a lot of classes, use an ANT file to facilitate
 the compilation process).
 
\end_layout

\begin_layout Standard
Again, the deployer will throw an exception if it detects an invalid class
 file format.
\end_layout

\end_deeper
\begin_layout Section
Building a sample application
\end_layout

\begin_layout Standard
For our first application, let's make a typical “Hello World” application
 using just your preferred plain text editor.
\end_layout

\begin_layout Standard
First, make sure you have a JDK installed (preferably the JDK 8) and the
 environment variables are set.
 There should be a JAVA_HOME variable set with the installation path of
 your JDK, like 
\family typewriter
C:
\backslash
Program Files
\backslash
Java
\backslash
jdk1.8.0_25
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that some Java versions have problem when there is a space in the folder
 name, such as 
\family typewriter
Program Files
\family default
 or 
\family typewriter
Arquivos de Programas
\family default
.
 If this is the case, just uninstall Java and reinstall it in a folder without
 space in its name.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And another variable named PATH, which should contain a list of paths, separated
 by semicolons, with the path to the JDK's bin directory, like 
\family typewriter
%JAVA_HOME%
\backslash
bin
\family default
.
 If you don't do this, you will get the error: 
\family typewriter
[preverify] JAR file creation failed with error -1
\family default
.
\end_layout

\begin_layout Standard
You may also add the path to the TotalCross 
\family typewriter
.jar
\family default
 file (located in 
\family typewriter
TotalCrossSDK/dist/tc.
 jar
\family default
) to your CLASSPATH environment variable (or create one if the variable
 does not exists).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The usage of the CLASSPATH variable is usually not advised, because it may
 cause conflicts when different classes share the same package structure.
 Creating an ANT build file and using the command line option 
\family typewriter
-classpath
\family default
 is a better choice.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Open your text editor and write the code below, saving the file as 
\family typewriter
HelloWorld.java
\family default
:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lstinputlisting[label=samplecode,caption=A sample]{companion_resources/listings/
HelloWorld.java}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Don't worry about understanding the code, this will be covered later.
\end_layout

\begin_layout Standard
Now open a command shell at the directory where the 
\family typewriter
HelloWorld.java
\family default
 was saved, and execute the following command:
\end_layout

\begin_layout Standard

\family typewriter
javac -target 1.8 -source 1.8 HelloWorld.java
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember, if you preferred to not use the CLASSPATH variable, you must ALWAYS
 specify the path to the 
\family typewriter
tc.jar
\family default
 file using the 
\family typewriter
-classpath
\family default
 option, like this:
\end_layout

\begin_layout Plain Layout

\family typewriter
javac -classpath C:
\backslash
TotalCrossSDK
\backslash
dist
\backslash
tc.jar -target 1.8 -source 1.8 HelloWorld.java
\end_layout

\begin_layout Plain Layout
Otherwise, the Java compiler won't be able to find the TotalCross classes
 used by the application.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If successful, the Java compiler should finish silently, creating a new
 file named 
\family typewriter
HelloWorld.
 class
\family default
.
\end_layout

\begin_layout Section
Running with the Launcher (on JDK)
\end_layout

\begin_layout Standard
Using the launcher, we can run our application and take a look at the result.
 Using a command shell, execute the following command:
\end_layout

\begin_layout Standard

\family typewriter
java -classpath .;%CLASSPATH% totalcross.Launcher HelloWorld
\end_layout

\begin_layout Standard
Here we are executing the Java application 
\family typewriter
totalcross.Launcher
\family default
, passing the name of our main class (case sensitive) as argument.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
In this case, the usage of the option 
\family typewriter
-classpath
\family default
 is needed because the 
\family typewriter
HelloWorld.class
\family default
 is not in a valid package directory structure, so we must add the current
 folder to the classpath.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following window should appear on your screen:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename companion_resources/images/companion_HelloWorld_JDK.png
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Congratulations, you just started your first TotalCross application running
 on JDK!
\end_layout

\begin_layout Section
Deploying and running on Win32
\end_layout

\begin_layout Standard
The launcher provided us a quick way to look at our application's appearance,
 but that's still a Java application.
 To actually deploy our application to all platforms supported by TotalCross,
 go back to the command shell and execute this command:
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy HelloWorld -all
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember to use the 
\family typewriter
-classpath
\family default
 option with the 
\family typewriter
tc.jar
\family default
 path if you're not using the CLASSPATH environment variable.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This time, we are executing the program 
\family typewriter
tc.Deploy
\family default
, passing the name of our main class as the first argument, and the platforms
 to deploy as the second argument – in this case all platforms.
 (see Chapter 5 for more information about the Deployment process).
\end_layout

\begin_layout Standard
A new folder named 
\family typewriter
install
\family default
 will be created, and inside it you should find several folders, each one
 containing the installer (or the executable) for each supported platform.
\end_layout

\begin_layout Standard
We should be able now to run the Win32 version of our application, so let's
 move to 
\family typewriter
./install/ win32
\family default
 and run the executable 
\family typewriter
HelloWorld.exe
\family default
, which should look like this:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename companion_resources/images/companion_HelloWorld_Win32.png
	scale 75

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default screen size is 240x320.
 You can change the screen size and position by editing the 
\family typewriter
.exe
\family default
 shortcut and adding the parameter 
\family typewriter
/scr x,y,width,height
\family default
.
 The possible values are: -1 to use the default and -2 to center on screen.
 Ex: "
\family typewriter
/scr -2,100,320,-1
\family default
" will open a window horizontally centered at y=100, w=320, h=320 (default
 is 0,0,240,320).
\end_layout

\begin_layout Standard
On the next chapter we'll see installation instructions for each platform.
 Practice by installing our application on different devices and see how
 it looks like on each one.
\end_layout

\begin_layout Chapter
The Launcher 
\end_layout

\begin_layout Standard
The TotalCross Launcher is a Java application that allows you to run a TotalCros
s application over the installed JDK, providing you a quick way to run and
 test your application.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Some people think that running the application on the desktop under an IDE
 (such as Eclipse or Netbeans) will use the TotalCross virtual machine.
 This is not true: the actual virtual machine used is the one provided in
 the Java Development Kit installed (or 
\family typewriter
java.exe
\family default
) on the desktop.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may also pass arguments to the launcher to simulate different resolutions
 and styles, and have an idea of how your application is going to look like
 on a particular device.
\end_layout

\begin_layout Standard
The basic format for using the launcher is:
\end_layout

\begin_layout Standard

\family typewriter
totalcross.Launcher [optional arguments] <main class>
\end_layout

\begin_layout Standard
The optional arguments can be any combination of the following (not case
 sensitive):
\end_layout

\begin_layout Subsection*
Screen resolution and color depth
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

<W>x<H>
\family default
: sets the width and height.
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

<W>x<H>x<bpp>
\family default
: sets the width, height and color depth.
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

Win32
\family default
: Windows 32 (same of 
\family typewriter
/scr 240x320x24
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

iPhone
\family default
: iPhone (same of 
\family typewriter
/scr 320x480x24
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/scr
\begin_inset space ~
\end_inset

android
\family default
: Android (same of 
\family typewriter
/scr 320x480x24
\family default
).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Color depth
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

8
\family default
: emulates 8 bits per pixel screens.
 (256 colors).
 No used anymore on modern devices.
\end_layout

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

16
\family default
: emulates 16 bits per pixel screens.
 (64K colors).
\end_layout

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

24
\family default
: emulates 24 bits per pixel screens.
 (16M colors).
\end_layout

\begin_layout Itemize

\family typewriter
/bpp
\begin_inset space ~
\end_inset

32
\family default
: emulates 32 bits per pixel screens.
 (16M colors without transparency).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
User interface style
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

Flat
\family default
: Flat user interface style.
\end_layout

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

Vista
\family default
: Vista user interface style.
\end_layout

\begin_layout Itemize

\family typewriter
/uiStyle
\begin_inset space ~
\end_inset

Android
\family default
: Android user interface style.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Device characteristics
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/penlessDevice
\family default
: acts as a device that has no touch screen.
 Note that all currently supported devices have touch screen.
 
\end_layout

\begin_layout Itemize

\family typewriter
/geofocus
\family default
: uses geographical focus (also activates 
\family typewriter
penlessDevice
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
/fingerTouch
\family default
: simulates the use of fingers (since a finger is less precise than a pen,
 uses an algorithm to find the control near the finger and also activates
 drag and flick).
\end_layout

\begin_layout Itemize

\family typewriter
/unmovableSip
\family default
: specifies that the Soft Input Panel (SIP) is unmovable, and simulates
 the screen shift that's made when an 
\family typewriter
Edit
\family default
 or 
\family typewriter
MultiEdit
\family default
 gains focus.
\end_layout

\begin_layout Itemize

\family typewriter
/virtualKeyboard
\family default
: specifies that the device does not have a physical keyboard (or it has
 but the keyboard is closed).
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Others
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize

\family typewriter
/pos
\begin_inset space ~
\end_inset

x,y
\family default
: sets the opening position of the application.
\end_layout

\begin_layout Itemize

\family typewriter
/scale
\begin_inset space ~
\end_inset

<0.1
\begin_inset space ~
\end_inset

to
\begin_inset space ~
\end_inset

4>
\family default
: scales the screen, magnifying the contents (if greater than 1) or shrinking
 (if between 0 and 1).
\end_layout

\begin_layout Itemize

\family typewriter
/dataPath
\begin_inset space ~
\end_inset

<path>
\family default
: sets where the PDB and media files are stored.
 This is also the default path for Litebase table files.
\end_layout

\begin_layout Itemize

\family typewriter
/cmdLine
\begin_inset space ~
\end_inset

<...>
\family default
: the rest of the arguments (except the last one) are passed as the command
 line to the application being launched.
\end_layout

\begin_layout Itemize

\family typewriter
/showmousepos
\family default
: shows the mouse position (only when running on JavaSE).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The last argument passed to the launcher is always the qualified name of
 the main class of the application to be launched (for example, 
\family typewriter
tc.samples.api.TotalCrossAPI
\family default
).
\end_layout

\begin_layout Standard
When running the application, the emulator shows some function keys that
 can be used to emulate a device key.
 For example, F6 opens the application menu, F9 tests the screen rotation
 using the launcher, F11 opens the keyboard (or calendar) in an 
\family typewriter
Edit
\family default
 field, and the F2 key saves a screen shot of the application.
 Note that in the last case using 
\family typewriter
/scale 0.5
\family default
 (or any other value) does not affect the final screen shot.
\end_layout

\begin_layout Chapter
Deployment Process
\end_layout

\begin_layout Standard
To deploy your TotalCross application, you must use the Java application
 named 
\family typewriter
tc.Deploy
\family default
, packaged with the 
\family typewriter
tc.jar
\family default
 located at 
\family typewriter
%TOTALCROSS_HOME%/dist
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
To run a Java application from a jar file, you must specify the source 
\family typewriter
.jar
\family default
 to the Java classpath, e.g.
 
\family typewriter
java -classpath %TOTALCROSS_HOME%
\backslash
dist
\backslash
tc.jar tc.Deploy […]
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
tc.Deploy
\family default
 program will, starting in the working directory, create folders with the
 installation files for each platform.
 A 
\family typewriter
.tcz
\family default
 file is outputted with all classes and its dependencies, already translated
 to the target opcodes, and compressed with ZLib to save space.
 We recommend that the original classes are compiled with debug information,
 because line numbers will be included in the 
\family typewriter
.tcz
\family default
 and will be available in the stack trace (all other debug information is
 discarded in the default compilation).
 
\family typewriter
.bmp
\family default
 and 
\family typewriter
.gif
\family default
 files are automatically converted to 24bpp 
\family typewriter
.png
\family default
 files (JPeg are kept in its original format – read more about images below).
 The 
\family typewriter
.tcz
\family default
 file is not compliant with the 
\family typewriter
.zip
\family default
 format, although ZLib is used, because we need to store more information
 in the 
\family typewriter
.tcz
\family default
 file.
 Note that, since we translate the programs to our opcodes, there's no need
 to run obfuscators in the class file, because obfuscation is already done
 by the converter.
 Actually, 
\family typewriter
.tcz
\family default
 files are 1/4 of the original class size, 50% due to our tclass file format
 and 50% more due to the ZLib compression.
 
\end_layout

\begin_layout Section
Parameters
\end_layout

\begin_layout Standard
The basic format is: 
\end_layout

\begin_layout Standard

\family typewriter
tc.Deploy <application/library to deploy> <target platforms> [other options]
\end_layout

\begin_layout Standard
Where:
\end_layout

\begin_layout Enumerate

\family typewriter
<application/library to deploy>
\family default
 must be one of the following:
\end_layout

\begin_deeper
\begin_layout Itemize
The main class file name (the 
\family typewriter
.class
\family default
, not the 
\family typewriter
.java
\family default
).
 You can pass the full path to the main class file instead of its fully
 qualified name (
\family typewriter
App
\family default
 x 
\family typewriter
my.sample.App
\family default
).
\begin_inset Newline newline
\end_inset

For example, to deploy 
\family typewriter
my.sample.App
\family default
 at 
\family typewriter

\begin_inset Newline newline
\end_inset

C:/myprogram/classes/my/sample/App.class
\family default
:
\begin_inset Newline newline
\end_inset


\family typewriter
cd C:/myprogram/classes
\begin_inset Newline newline
\end_inset

tc.Deploy my/sample/App.class
\family default

\begin_inset Newline newline
\end_inset

or
\begin_inset Newline newline
\end_inset


\family typewriter
tc.Deploy c:/myprogram/classes/my/sample/App.class
\family default

\begin_inset Newline newline
\end_inset

The correct package is automatically detected from the class file.
\end_layout

\begin_layout Itemize
The folder that contains a single class that implements 
\family typewriter
MainClass
\family default
 or directly extends one of the following classes: 
\family typewriter
MainWindow
\family default
, 
\family typewriter
TestSuite
\family default
 or 
\family typewriter
GameEngineMainWindow
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
This option will not work if your main class extends a class which in turn
 extends one of the classes listed above.
\end_layout

\begin_layout Standard
For instance:
\end_layout

\begin_layout Standard
Assuming 
\family typewriter
App
\family default
 is the main class, “
\family typewriter
MainWindow
\family default
 
\begin_inset Formula $\Leftarrow$
\end_inset

 
\family typewriter
App
\family default
” will work, but “
\family typewriter
MainWindow
\family default
 
\begin_inset Formula $\Leftarrow$
\end_inset

 
\family typewriter
AnotherClass
\family default
 
\begin_inset Formula $\Leftarrow$
\end_inset

 
\family typewriter
App
\family default
” will not work.
\end_layout

\begin_layout Standard
This option will also fail if the given folder contains more than one valid
 main class.
\end_layout

\begin_layout Standard
The deployer automatically detects and includes 
\family typewriter
Class.forName()
\family default
 references.
 Note that the parameter must be a string literal.
 
\family typewriter
Class.forName()
\family default
 will not work yet if the parameter is a variable containing the class name.
\end_layout

\end_deeper
\begin_layout Itemize
A 
\family typewriter
.jar
\family default
 or 
\family typewriter
.zip
\family default
 file containing all the required files, like 
\family typewriter
tc.Deploy App.jar
\family default
 or 
\family typewriter
tc.Deploy App.zip
\family default
 (a 
\family typewriter
.jar
\family default
 file is basically a 
\family typewriter
.zip
\family default
 file with a new extension).
 To create a 
\family typewriter
.jar
\family default
 file, open the command prompt, change to the class files folder (usually
 
\family typewriter
/bin
\family default
 or 
\family typewriter
/classes
\family default
), and type: 
\family typewriter
jar cvf App.jar
\family default
.
\end_layout

\begin_deeper
\begin_layout Standard
Please notice this is the only option that does not require a main class
 to be used, therefore, it's the only valid option to create libraries (which
 usually does not have a main class).
\end_layout

\begin_layout Standard
To create a library, you must end your 
\family typewriter
.jar
\family default
 name with 
\family typewriter
lib
\family default
 or 
\family typewriter
Lib
\family default
, such as 
\family typewriter
xxxlib.jar
\family default
 or 
\family typewriter
xxxLib.jar
\family default
.
\end_layout

\begin_layout Standard
However, if you use this option to deploy an application, the 
\family typewriter
.jar/.zip
\family default
 file must have the same name of the main class.
 (e.g.
 if your main class is 
\family typewriter
App.class
\family default
, the resulting 
\family typewriter
.jar/.zip
\family default
 file must be either 
\family typewriter
App.jar
\family default
 or 
\family typewriter
App.zip
\family default
).
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

\family typewriter
<platforms to deploy>
\family default
 must be any combination of the following:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
-wp8
\family default
 Creates 
\family typewriter
.xap
\family default
 file.
\end_layout

\begin_layout Itemize

\family typewriter
-win32
\family default
 Creates an executable file to run the application in Win32.
\end_layout

\begin_layout Itemize

\family typewriter
-applet
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

-html
\family default
 Creates the HTML files and a 
\family typewriter
.jar
\family default
 file.
\end_layout

\begin_layout Itemize

\family typewriter
-android
\family default
 Creates the 
\family typewriter
.apk
\family default
 file for Android.
\end_layout

\begin_layout Itemize

\family typewriter
-linux
\family default
 Creates the binary and the 
\family typewriter
.tcz
\family default
 files for Linux.
\end_layout

\begin_layout Itemize

\family typewriter
-iOS
\family default
 or 
\family typewriter
-iPhone
\family default
 Creates an 
\family typewriter
.ipa
\family default
 for iOS.
\end_layout

\begin_layout Itemize

\family typewriter
-all
\family default
 Single command to create all of the above.
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
[other options]
\family default
 may be any combination of the following options:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
/a
\begin_inset space ~
\end_inset

ApId
\family default
 : Assigns the application id; can only be used for libraries or passing
 a 
\family typewriter
.tcz
\family default
 file.
 Under normal situations, set the 
\family typewriter
Settings.applicationId
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
/autostart
\family default
 : automatically starts the application after a boot is completed.
 Currently works for Android only.
\end_layout

\begin_layout Itemize

\family typewriter
/c
\begin_inset space ~
\end_inset

cmd
\family default
 : Specify a command line to be passed to the application.
\end_layout

\begin_layout Itemize

\family typewriter
/i
\begin_inset space ~
\end_inset

platforms
\family default
 : Pass a list of comma-separated platforms to let the generated file be
 installed.
 Currently works on Android and Windows Phone 8.
 The possible options are: 
\family typewriter
/i android
\family default
, 
\family typewriter
/i android,wp8
\family default
, and 
\family typewriter
/i wp8
\family default
.
 On WP8, this parameter also automatically starts the application.
 It is necessary to have the Windows Phone SDK installed to be able to use
 it.
\end_layout

\begin_layout Itemize

\family typewriter
/m
\begin_inset space ~
\end_inset

path
\family default
 : Specifies a path to the mobileprovision and certificate store to deploy
 an 
\family typewriter
.ipa
\family default
 file for iOS.
\end_layout

\begin_layout Itemize

\family typewriter
/n
\begin_inset space ~
\end_inset

name
\family default
 : Overrides the name of the 
\family typewriter
.tcz
\family default
 file with the given one.
 Only works when deploying a 
\family typewriter
.jar
\family default
 or a 
\family typewriter
.tcz
\family default
 file.
\end_layout

\begin_layout Itemize

\family typewriter
/o
\begin_inset space ~
\end_inset

path
\family default
 : Overrides the output folder (defaults to the current folder) to the given
 one.
\end_layout

\begin_layout Itemize

\family typewriter
/p
\begin_inset space ~
\end_inset

type
\family default
 : Packages the VM (and Litebase) with the application, creating a single
 installation file.
 The type parameter can be one of the following: 
\family typewriter
demo
\family default
, 
\family typewriter
demo+ litebase
\family default
, 
\family typewriter
release
\family default
, 
\family typewriter
release+litebase
\family default
 (where demo/release are the virtual machine types you want to include:
 the time-limited demonstration, or the release that requires activation).
\end_layout

\begin_layout Itemize

\family typewriter
/r
\begin_inset space ~
\end_inset

key
\family default
: Signs the 
\family typewriter
.tcz
\family default
 file with the given registration key (used when you purchase a VM license).
\end_layout

\begin_layout Itemize

\family typewriter
/t
\family default
: Only tests if the class is ok to be deployed; no 
\family typewriter
.tcz
\family default
 files nor installation files are generated.
\end_layout

\begin_layout Itemize

\family typewriter
/v
\family default
: Verbose output for information messages.
\end_layout

\begin_layout Itemize

\family typewriter
/w
\family default
: If an error occurs, waits for the ENTER key to be pressed before the window
 closes.
\end_layout

\begin_layout Itemize

\family typewriter
/x
\begin_inset space ~
\end_inset

list
\family default
: Comma-separated list of class names that must be excluded (in a starts-with
 manner).
 Use this to exclude classes included in an already created library.
\end_layout

\end_deeper
\begin_layout Section
Options retrieved from the static initializer
\end_layout

\begin_layout Standard
You may have noticed that there's no need to pass any parameters for the
 application, like creator id or the icon's title.
 All these are inferred from the default constructor and the static initializer
 of the main class.
\end_layout

\begin_layout Standard
The following patterns are used:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Icon
\begin_inset space ~
\end_inset

Title
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value Main class' name.
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
super(“My application”, border_type);
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "My application" is used as the icon's title.
 You may change the application's title to something else if desired: 
\family typewriter
super("My icon title", border_type); setTitle("My app title");
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application Title
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
super("My application" + " " + Settings.appVersion, border_type);
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "My application" is used as the icon's title, but the application
 title would be something like “My application 1.3”.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application
\begin_inset space ~
\end_inset

ID
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value An ID is created based on the name of the main class.
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {Settings.applicationId = "Crtr";}
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "Crtr" will be the creator id (in TotalCross it is called application
 id, which is the correct name that Android, when using a single package,
 application folder).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application
\begin_inset space ~
\end_inset

Version
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {Settings.appVersion = "1.3";}
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "1.3" will be used to set the version of the application in the
 stubs.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Company
\begin_inset space ~
\end_inset

Information
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {
\end_layout

\begin_deeper
\begin_layout Plain Layout

\family typewriter
Settings.companyInfo = "My company information";
\end_layout

\begin_layout Plain Layout

\family typewriter
Settings.companyContact = “me@company.com”;
\end_layout

\begin_layout Plain Layout

\family typewriter
}
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property "My company information" will be used as the company's information.
 You may also use this in an 
\begin_inset Quotes eld
\end_inset

about
\begin_inset Quotes erd
\end_inset

 box in your program.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "c"
hor_pos "c"
has_inner_box 1
inner_pos "c"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Subsection
Application
\begin_inset space ~
\end_inset

Information
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Default
\begin_inset space ~
\end_inset

value 
\family typewriter
null
\end_layout

\begin_layout Labeling
\labelwidthstring Resulting.property0
Code
\begin_inset space ~
\end_inset

inferred 
\family typewriter
static {
\end_layout

\begin_deeper
\begin_layout Plain Layout

\family typewriter
Settings.appCategory = “my products”;
\end_layout

\begin_layout Plain Layout

\family typewriter
Settings.appLocation = “www.mycompany.com”;
\end_layout

\begin_layout Plain Layout

\family typewriter
Settings.appDescription = “This is my program”;
\end_layout

\begin_layout Plain Layout

\family typewriter
}
\end_layout

\end_deeper
\begin_layout Labeling
\labelwidthstring Resulting.property0
Resulting
\begin_inset space ~
\end_inset

property The 
\family typewriter
appCategory
\family default
 is used on the iOS platforms.
\begin_inset Newline newline
\end_inset

The 
\family typewriter
appLocation
\family default
 is used on the iOS platforms.
\begin_inset Newline newline
\end_inset

The 
\family typewriter
appDescription
\family default
 is used on the iOS platforms.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you specify these outside the static initializer, like in the constructor,
 default values will be assumed.
\end_layout

\begin_layout Standard
There are other options that are set by the programmer in the static initializer
: 
\end_layout

\begin_layout Itemize

\family typewriter
Settings.fullScreen
\family default
: makes it full screen at startup.
\end_layout

\begin_layout Itemize

\family typewriter
Settings.fullScreenPlatforms
\family default
: selects which platforms the 
\family typewriter
fullScreen
\family default
 member will be applied to.
\end_layout

\begin_layout Itemize

\family typewriter
Settings.activationServerURI
\family default
 and 
\family typewriter
activationServerNamespace
\family default
: defines the middleware server that will be used to restrict the activations.
 Read more in the Activation Server chapter.
\end_layout

\begin_layout Section
Specifying the Icon
\end_layout

\begin_layout Standard
The easiest way to create an icon is to provide a file whose name ends with
 
\family typewriter
appicon.png
\family default
 of SQUARE size 256x256 and any palette, which will be automatically converted
 to the target icon sizes.
 Put the file in the 
\family typewriter
src
\family default
 folder.
 If your icon source is VECTOR-based, you may create better icons by exporting
 to 
\family typewriter
.png
\family default
 at the following sizes: 
\family typewriter
icon60x60.png
\family default
 (iOS), 
\family typewriter
icon72x72.png
\family default
, 
\family typewriter
icon96x96.png
\family default
, 
\family typewriter
icon144x144.png
\family default
, and 
\family typewriter
icon192x192
\family default
 (Android).
 Note that TotalCross' algorithm used to downscale the icons, CATMULL-ROM,
 is the best of the world for that.
\end_layout

\begin_layout Standard
Be careful with the palette of the 
\family typewriter
.bmp
\family default
 files, never use the MS Paint program; instead, get the 
\family typewriter
.bmp
\family default
 files that are in the 
\family typewriter
etc/images
\family default
 folder and edit them in a software that keeps the original palette, like
 Photoshop and PaintShopPro.
 Use alpha-channel on PNG for better appearance.
\end_layout

\begin_layout Standard
On iOS, if you don't provide all icon sizes for the different iOS devices,
 the deployer will get the icon image with the greatest resolution and scale
 it to match the icon size of the missing necessary sizes.
 
\end_layout

\begin_layout Section
Adding other files to the package
\end_layout

\begin_layout Standard
Optionally, you can create a 
\family typewriter
.pkg
\family default
 file with additional files that will be added to the 
\family typewriter
.apk
\family default
,
\family typewriter
 
\family default
to the 
\family typewriter
.ipa
\family default
, etc.
 The file must have a set of 
\family typewriter
[G]
\family default
 and/or 
\family typewriter
[L]
\family default
 lines followed by the file name (which is searched in the classpath and
 in current folder).
 Files prefixed with 
\family typewriter
[G]
\family default
 were placed in the same folder of the TCVM in the past.
 Nowadays, using 
\family typewriter
[G]
\family default
 is the same of using 
\family typewriter
[L]
\family default
, to put the file in the application's folder.
 If the file ends with a slash, indicating that it's a path, all files inside
 that path will be added.
\end_layout

\begin_layout Standard
The possible 
\family typewriter
.pkg
\family default
 files are: 
\family typewriter
iphone.pkg
\family default
 (also used for iPad and iPod), 
\family typewriter
android.pkg
\family default
, 
\family typewriter
linux.pkg
\family default
, 
\family typewriter
wp8.pkg
\family default
, and 
\family typewriter
win32.pkg
\family default
 – for each platform, or 
\family typewriter
all.pkg
\family default
 for all platforms.
 The files must be 
\family typewriter
.tcz
\family default
s.
 All adicional needed files must be listed in the 
\family typewriter
.pkg
\family default
 file and the main program should be deployed as if it used only one file.
\end_layout

\begin_layout Standard
Example: suppose program 
\family typewriter
A.jar
\family default
 needs two libraries named 
\family typewriter
BLib.jar
\family default
 and 
\family typewriter
CLib.jar
\family default
.
 Then you must deploy each one to create a 
\family typewriter
.tcz
\family default
 and create a 
\family typewriter
.pkg
\family default
 with the following lines:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

[L] BLib.tcz
\end_layout

\begin_layout Plain Layout

[L] CLib.tcz
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
Finally, you deploy your application doing, for instance:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

java tc.Deploy A.jar -all
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See other options running 
\family typewriter
tc.Deploy
\family default
 without parameters.
\end_layout

\begin_layout Chapter
Installing your application
\end_layout

\begin_layout Section
iOS (iPhone/iPad/iPod)
\end_layout

\begin_layout Subsection
Deploying as IPA for enterprise distribution
\end_layout

\begin_layout Standard
After joining Apple's enterprise development program, you'll be able to
 create a certificate to distribute in-house applications.
 Applications signed with this certificate may be distributed 
\emph on
only
\emph default
 for employees of the company that owns the certificate, and may not be
 distributed for third-party companies.
\end_layout

\begin_layout Standard
First, download and install openssl for your OS.
 (For 
\begin_inset CommandInset href
LatexCommand href
name "Win32"
target "http://slproweb.com/products/Win32OpenSSL.html"

\end_inset

)
\end_layout

\begin_layout Standard
Now create a config file with your certificate request info, like this:
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
[ req ]
\end_layout

\begin_layout Plain Layout

\family typewriter
distinguished_name = req_distinguished_name
\end_layout

\begin_layout Plain Layout

\family typewriter
prompt = no
\end_layout

\begin_layout Plain Layout

\family typewriter
[ req_distinguished_name ]
\end_layout

\begin_layout Plain Layout

\family typewriter
emailAddress = john@webmail.com 
\end_layout

\begin_layout Plain Layout

\family typewriter
commonName = John Doe 
\end_layout

\begin_layout Plain Layout

\family typewriter
countryName = BR 
\end_layout

\begin_layout Plain Layout

\family typewriter
stateOrProvinceName = Rio de Janeiro 
\end_layout

\begin_layout Plain Layout

\family typewriter
localityName = Rio de Janeiro
\end_layout

\begin_layout Plain Layout

\family typewriter
organizationName = John's Company
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now run the following command on the shell:
\end_layout

\begin_layout Standard

\family typewriter
openssl req -nodes -newkey rsa:2048 -keyout request.key -out 
\begin_inset Newline newline
\end_inset

request.csr -config config
\end_layout

\begin_layout Standard
If successful, there will be two new files on the folder: 
\family typewriter
request.key
\family default
 and 
\family typewriter
request.csr
\family default
.
\end_layout

\begin_layout Standard
Now go to the iOS Provisioning Portal and request a new distribution certificate.
 When prompted for a certificate request, use the file 
\family typewriter
request.csr
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Uploading the certificate request may fail on some browsers, but it should
 work on Safari, Chrome, or Firefox.
 Try using a different browser if the certificate request is not accepted.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Download the newly created certificate (which name is by default 
\family typewriter
ios_distribution.cer
\family default
) and run the following command:
\end_layout

\begin_layout Standard

\family typewriter
openssl x509 -in ios_distribution.cer -inform DER -out 
\begin_inset Newline newline
\end_inset

ios_distribution.pem -outform PEM
\end_layout

\begin_layout Standard
This command will create the file 
\family typewriter
ios_distribution.pem
\family default
, now run:
\end_layout

\begin_layout Standard

\family typewriter
openssl pkcs12 -export -inkey request.key -in ios_distribution.pem 
\begin_inset Newline newline
\end_inset

-out ios_distribution.p12
\end_layout

\begin_layout Standard
When prompted for a password, just hit enter and leave it empty.
\end_layout

\begin_layout Standard
Now you must go back to the iOS Provisioning Portal to create a new mobile
 provision.
\end_layout

\begin_layout Standard
From the iOS Provisioning Portal, go to "App IDs" to create an id for your
 application.
 Make sure to double check everything when creating ids because once created
 they cannot be removed! There's no limit to the number of app ids you can
 have, but you don't want to end up with dozens of unused ids cluttering
 your page.
\end_layout

\begin_layout Standard
For this first time, we suggest you to use the wildcard app id that should
 come configured by default (if you don't have it, just create one using
 * as Bundle Identifier).
\end_layout

\begin_layout Standard
Now move on to Provisioning, switch to the Distribution tab and click on
 "New Profile".
 In "Distribution Method" choose "In House", and use the same distribution
 certificate and app ids you already created.
 Name it and after submitting use the download option in the Distribution
 tab to download it to the same folder where you have your certificate and
 keystore.
\end_layout

\begin_layout Standard
The mobile provision allows only the application with the specified id to
 run on the device.
 If you create the mobile provision using the wildcard app id, it will allow
 any application signed by you to work on the device, making it very useful
 for testing your applications without creating additional ids that can't
 be removed later.
\end_layout

\begin_layout Standard
After completing this steps you should have the following files:
\end_layout

\begin_layout Description

\family typewriter
\series medium
config
\family default
\series default
 used to create a request certificate, may be deleted now.
\end_layout

\begin_layout Description

\family typewriter
\series medium
request.key
\family default
\series default
 RSA key used to sign your certificate request, it is no longer necessary
 but you should keep it as it is required to create 
\family typewriter
ios_distribution.p12
\family default
.
\end_layout

\begin_layout Description

\family typewriter
\series medium
request.csr
\family default
\series default
 certificate request sent to the iOS Provisioning Portal, may be deleted
 now.
\end_layout

\begin_layout Description

\family typewriter
\series medium
ios_distribution.cer
\family default
\series default
 certificate downloaded from the iOS Provisioning Portal.
 Required to deploy the application, but it may be redownloaded if lost.
\end_layout

\begin_layout Description

\family typewriter
\series medium
ios_distribution.pem
\family default
\series default
 intermediary file used to create 
\family typewriter
ios_distribution.p12
\family default
, may be deleted now.
\end_layout

\begin_layout Description

\family typewriter
\series medium
ios_distribution.p12
\family default
\series default
 key store that contains the keys used to generate the certificate.
 Required to deploy the application and must not be password protected.
\end_layout

\begin_layout Description

\family typewriter
\series medium
<user-defined
\begin_inset space ~
\end_inset

name>.mobileprovision
\family default
\series default
 provisioning file that allows your application to be installed on the device.
\end_layout

\begin_layout Standard
When deploying your application you must use the argument 
\family typewriter
/m
\family default
 with the path to the certificate and key store that will be used to sign
 your iOS application.
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy .....
 -iphone 
\family default
(or 
\family typewriter
-all
\family default
)
\family typewriter
 /m <cert-and-keystore-path>
\end_layout

\begin_layout Subsection
Deploying as IPA for Apple Store
\end_layout

\begin_layout Standard
The process is similar to the above one.
 However, you should use an appropriate key to publish your application
 on the Apple Store.
 You should not use a certificate for distributing in-house applications.
\end_layout

\begin_layout Standard
You should also provide a 
\family typewriter
splash.png
\family default
 image whose size must be 640x1136.
 The image should be with this size and name.
 This image Otherwise, Apple will reject your application.
\end_layout

\begin_layout Standard
For more information, read 
\begin_inset CommandInset href
LatexCommand href
name "iTunes Connect Developer Guide"
target "https://developer.apple.com/library/ios/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Appendices/Properties.html"

\end_inset

.
\end_layout

\begin_layout Subsection
Updating an application on the Apple Store
\end_layout

\begin_layout Enumerate
Go to iTunes Connect (
\begin_inset CommandInset href
LatexCommand href
name "https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa"
target "https://itunesconnect.apple.com/WebObjects/iTunesConnect.woa"

\end_inset

)
\end_layout

\begin_layout Enumerate
Click on Manage Your Apps 
\end_layout

\begin_layout Enumerate
Select an application 
\end_layout

\begin_layout Enumerate
Click on Add version (it will go to "Prepare for upload" state)
\end_layout

\begin_layout Enumerate
Click on the button at the top "Ready for upload".
 Answer the questions until coming back to the screen and the status become
 "Waiting for upload"
\end_layout

\begin_layout Enumerate
Open the Application Loader
\end_layout

\begin_layout Enumerate
Click on 
\begin_inset Quotes eld
\end_inset

Deliver your app
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Enumerate
If you indicate that you don't have an application to send, repeat the steps
 1 to 5
\end_layout

\begin_layout Enumerate
In the Application Information screen, click on Choose and select the 
\family typewriter
.ipa
\family default
 genereated with the distribution certificate
\end_layout

\begin_layout Enumerate
Click on send.
\end_layout

\begin_layout Subsection
OTA (Over the air updates) with Totalcross and iOS
\end_layout

\begin_layout Standard
It is possible to push down over the air updates of your Totalcross application.
\end_layout

\begin_layout Standard
To do this you need the following: 
\end_layout

\begin_layout Itemize
Have a packaged 
\family typewriter
.ipa
\family default
 of your TotalCross application
\end_layout

\begin_layout Itemize
Have 
\begin_inset Quotes eld
\end_inset

iPhone Configuration Utility
\begin_inset Quotes erd
\end_inset

 installed
\end_layout

\begin_layout Itemize
A web server that will host: 
\end_layout

\begin_deeper
\begin_layout Itemize
A 
\family typewriter
.plist
\family default
 file used by iOS to load your application OTA 
\end_layout

\begin_layout Itemize
Your application 
\family typewriter
.ipa
\family default
 file
\end_layout

\end_deeper
\begin_layout Standard
The 
\family typewriter
.plist
\family default
 file is a special type of file that points to the 
\family typewriter
.ipa
\family default
 file of your application on the web server.
 It is used by Safari on iOS to install the application.
 It looks like the below.
 Just copy this into a file and save it with a 
\family typewriter
.plist
\family default
 extension.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/Pro
pertyList-1.0.dtd">
\end_layout

\begin_layout Plain Layout

<plist version="1.0">
\end_layout

\begin_layout Plain Layout

	<dict> 
\end_layout

\begin_layout Plain Layout

		<key>items</key> 
\end_layout

\begin_layout Plain Layout

		<array> 
\end_layout

\begin_layout Plain Layout

		<dict> 
\end_layout

\begin_layout Plain Layout

		<key>assets</key> 
\end_layout

\begin_layout Plain Layout

		<array>
\end_layout

\begin_layout Plain Layout

		<dict> 
\end_layout

\begin_layout Plain Layout

		<key>kind</key> 
\end_layout

\begin_layout Plain Layout

		<string>software-package</string> 
\end_layout

\begin_layout Plain Layout

		<key>url</key>
\end_layout

\begin_layout Plain Layout

		<string>http://yourserver/yourapplication.ipa
\end_layout

\begin_layout Plain Layout

		</string> 		
\end_layout

\begin_layout Plain Layout

		</dict> 
\end_layout

\begin_layout Plain Layout

		</array> 
\end_layout

\begin_layout Plain Layout

		<key>metadata</key>
\end_layout

\begin_layout Plain Layout

		<dict>
\end_layout

\begin_layout Plain Layout

		<key>bundle-identifier</key>
\end_layout

\begin_layout Plain Layout

		<string>application identifier</string>
\end_layout

\begin_layout Plain Layout

		<key>bundle-version</key>
\end_layout

\begin_layout Plain Layout

		<string>1.0</string>
\end_layout

\begin_layout Plain Layout

		<key>kind</key>
\end_layout

\begin_layout Plain Layout

		<string>software</string>
\end_layout

\begin_layout Plain Layout

		<key>title</key>
\end_layout

\begin_layout Plain Layout

		<string>application name</string>
\end_layout

\begin_layout Plain Layout

		</dict> 
\end_layout

\begin_layout Plain Layout

		</dict> 
\end_layout

\begin_layout Plain Layout

		</array> 
\end_layout

\begin_layout Plain Layout

	</dict> 
\end_layout

\begin_layout Plain Layout

</plist>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Then you need to edit the 
\family typewriter
.plist
\family default
 file in the following way: 
\end_layout

\begin_layout Itemize
Edit the URL
\family typewriter
 <string>
\family default
 element to point to your 
\family typewriter
.ipa
\family default
 file as available via your web server 
\end_layout

\begin_layout Itemize
Edit the bundle-identifier 
\family typewriter
<string>
\family default
 element to the identifier of your application 
\end_layout

\begin_layout Itemize
To get the bundle-identifier you can use the 
\begin_inset Quotes eld
\end_inset

iPhone Configuration Utility
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Itemize
You need to load your 
\family typewriter
.ipa
\family default
 file into the application, then click on the "applications" section under
 "Library" and it will display the identifier there.
 
\end_layout

\begin_layout Itemize
Finally change the key 
\family typewriter
<string>
\family default
 element to your application name.
\end_layout

\begin_layout Standard
One last step and you will be able to install your application over the
 air.
 Create a web page 
\family typewriter
test.html
\family default
 on the web server that contains an anchor element as follows: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<a href="itms-services://?action=download-manifest&url=http://yourserver/yourfil
e.plist">Application Name>>></a>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
At this point if you have setup everything correctly you will be able to
 manually update / install your application by pointing the iOS Safari browser
 to 
\family typewriter
test.html
\family default
 on you hosted web server.
 When you click on the link iOS will popup a screen asking if you would
 like to install the application.
\end_layout

\begin_layout Standard
So now you can manually update your TotalCross application.
 If you want to be able to do automatic updates via TotalCross all you need
 to do is execute the following once your application detects a new version
 is available
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.exec("url","itms-services://?action=download-manifest&url=http://yourserv
 er/yourfile.plist")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will launch Safari and execute the same process as doing an update
 manually.
\end_layout

\begin_layout Standard
Of course your application has to have a mechanism to detect when a new
 version is available and be able to update itself, but that is outside
 the scope of these instructions.
\end_layout

\begin_layout Standard
So there you have it, how to do OTA updates on iOS without needing the App
 Store.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that after iOS 7.1, the plist file must be server over an https connection.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Standard
On iOS one can get the 
\family typewriter
debugConsole.txt
\family default
 and other program files by installing a program called DiskAid.
 It is only necessary to open the program, connect the device, go to the
 application folder and them access its files.
 Using this program one can even copy the device files to the computer.
 Before stalling DiskAid, it is desirable to install iTunes.
 Moreover, some configurations must be done in order to show a TotalCross
 Application.
 Just go to DiskAid-->Preferences and check the options to show all files,
 applications, etc.
 Your application is inside Apps.
 Just double-click it to see the application folders.
 The application files are located in the folder 
\family typewriter
Documents
\family default
.
\end_layout

\begin_layout Section
Windows Phone 8
\end_layout

\begin_layout Subsection
Manual installation
\end_layout

\begin_layout Standard
When you generate a 
\family typewriter
.xap
\family default
 of your application, which includes TotalCross and Litebase, you can install
 it yourself if you enable development mode on your device.
 Follow the instructions in
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff769508(v=vs.105).aspx"
target "http://msdn.microsoft.com/en-us/library/windowsphone/develop/ff769508(v=vs.105).aspx"

\end_inset

 in order to register your phone for development.
 To do this, firstly you MUST have a computer running a Windows 8.
 Then, you need to download and install Windows Phone SDK 8.0, which can
 be downloaded from 
\begin_inset CommandInset href
LatexCommand href
name "http://www.microsoft.com/en-us/download/details.aspx?id=35471"
target "http://www.microsoft.com/en-us/download/details.aspx?id=35471"

\end_inset

.
 Notice that to generate a 
\family typewriter
.xap
\family default
 you only need to pass 
\family typewriter
-wp8
\family default
 as a parameter to 
\family typewriter
tc.Deploy
\family default
.
 There is no pre-requisite to generate it.
 After installing the Windows Phone SDK 8.0, it's only necessary to open
 Application Deployment, choose the target (the WP8 device), and select
 the desired application 
\family typewriter
.xap
\family default
.
\end_layout

\begin_layout Standard
To install the XAP file without using 
\family typewriter
tc.Deploy
\family default
, you can run this command: 
\family typewriter

\begin_inset Newline newline
\end_inset


\backslash
TotalCross3
\backslash
etc
\backslash
tools
\backslash
xap
\backslash
XapDeployCmd.exe /install <xap file> /targetdevice:de
\end_layout

\begin_layout Standard
Phones registered for development can only have one TotalCross application
 installed at the same time.
\end_layout

\begin_layout Subsection
Windows Store
\end_layout

\begin_layout Standard
It is possible to install a TotalCross application from the Windows Store.
 To do that, your application must follow some rules in order to be accepted
 in the store.
 Here is a link with detailed information:
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj247547(v=vs.105).aspx"
target "http://msdn.microsoft.com/en-us/library/windowsphone/develop/jj247547(v=vs.105).aspx"

\end_inset

.
\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Standard
You can fetch DebugConsole.txt and other application files using the Isolated
 Storage Explorer command-line tool for Windows Phone.
 This is inside the Windows Phone SDK.
 You can also use it to put files in the application folder on the device.
 To know how to use it, read the following tutorial: 
\begin_inset CommandInset href
LatexCommand href
name "http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh286408(v=vs.105).aspx"
target "http://msdn.microsoft.com/en-us/library/windowsphone/develop/hh286408(v=vs.105).aspx"

\end_inset

.
\end_layout

\begin_layout Section
Android
\end_layout

\begin_layout Subsection
Installing the device
\end_layout

\begin_layout Standard
After you purchase the device, you have to install the USB driver, which
 can be downloaded from here:
\end_layout

\begin_layout Standard
http://developer.android.com/sdk/oem-usb.html
\end_layout

\begin_layout Standard
If a device that is not recognized, search for “adb driver <device name>”
 in your preferred search engine.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note: There is a program called PdaNet for Android that can recognize almost
 all Androids.
 This can be downloaded from 
\begin_inset CommandInset href
LatexCommand href
name "http://pdanet.co/"
target "http://pdanet.co/"

\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Deployment
\end_layout

\begin_layout Standard
How to deploy your application to Android:
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy .....
 -android (or -all)
\end_layout

\begin_layout Standard
A directory named 
\family typewriter
install
\backslash
android
\family default
 will be created with a single 
\family typewriter
.apk
\family default
 inside.
 This 
\family typewriter
.apk
\family default
 contains your application's TCZ and the launcher.
 You can install additional files by creating an 
\family typewriter
android.pkg
\family default
 (or 
\family typewriter
all.pkg
\family default
).
 The deployer will search for a file named 
\family typewriter
icon72x72.png
\family default
 as a special icon for it (remember to use alpha channel in the PNG for
 better appearance); if it doesn't find the file, it will resize the file
 ended with 
\family typewriter
appicon.gif
\family default
 (already used in other platforms) to 72x72 and use it.
 The first time that TotalCross, Litebase, and your application run, it
 will take longer because the 
\family typewriter
.tcz
\family default
 (and possibly other libraries) will be being decompressed and installed
 in the application's data folder.
 
\end_layout

\begin_layout Standard
IMPORTANT: On Android you can only read/write from 
\family typewriter
Settings.appPath
\family default
 (which is 
\family typewriter
/data/ data/totalcross.app.<your application name here>
\family default
 or 
\family typewriter
/data/data/
\begin_inset Newline newline
\end_inset

totalcross.app<application id>
\family default
 if using single package).
 Trying to access a file or a path elsewhere will fail with permission error.
 You can't even list the files from elsewhere.
\end_layout

\begin_layout Subsection
Installing on the Device
\end_layout

\begin_layout Standard
The ADB (Android Debugging Bridge) is the tool that is used to install applicati
ons in the device, and also to get the log from it.
 This tool is released with the TotalCross SDK and is located at 
\family typewriter
%TOTALCROSS_HOME%
\backslash
etc
\backslash
tools
\backslash
android
\family default
.
 If you plan to use it from the command-line, add it to the PATH environment
 variable of your computer.
\end_layout

\begin_layout Standard
Be sure that the Android device is connected to USB and that the driver
 was installed.
 To be able to find if the Android device is ok, type (from cmd):
\end_layout

\begin_layout Standard

\family typewriter
adb devices
\end_layout

\begin_layout Standard
If the device is ok, it will be listed (like this):
\end_layout

\begin_layout Standard

\family typewriter
List of devices attached
\end_layout

\begin_layout Standard

\family typewriter
HT9A3LV00045 device
\end_layout

\begin_layout Standard
The number above is the serial number of the device.
\end_layout

\begin_layout Standard
To install the file on the device, you can use:
\end_layout

\begin_layout Standard

\family typewriter
adb install -r xxx.apk
\end_layout

\begin_layout Standard
Note: if you're running on Windows and installed 
\family typewriter
TotalCrossSDK.exe
\family default
, the 
\family typewriter
setup.bat
\family default
 file at the root has created a registry entry that adds an “Install APK”
 file to the right-button click in Windows Explorer.
 This greatly helps installing any application in the device.
 So, just open Windows Explorer, select the APK file, right-click your mouse
 button, and select “Install APK”.
 The file will then be uploaded to the device.
 Note that the registry key adds this menu option to all file types, so,
 be careful to use it only with 
\family typewriter
.apk
\family default
 files.
\end_layout

\begin_layout Standard
So, if you want to test the 
\family typewriter
TotalCrossAPI.apk
\family default
, from the command line, use:
\end_layout

\begin_layout Standard

\family typewriter
adb install -r TotalCrossAPI.apk
\end_layout

\begin_layout Standard
Remember to install the TotalCross and Litebase 
\family typewriter
.apk
\family default
 (if your application is not deployed as a single package) as:
\end_layout

\begin_layout Standard

\family typewriter
adb install -r %TOTALCROSS_HOME%
\backslash
dist
\backslash
vm
\backslash
android
\backslash
TotalCross.apk
\end_layout

\begin_layout Standard
You can look at other adb commands just typing:
\end_layout

\begin_layout Standard

\family typewriter
adb
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that from Android version 4.3, you can't downgrade a program installed
 on the device.
 Therefore, if your currently installed application version (as in
\family typewriter
 Settings.appVersion
\family default
) is greater than the version of the same application to be replaced, you
 won't be able to reinstall it.
 You must first uninstall the newer program version and them install the
 old program version.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Standard
The 
\family typewriter
Vm.debug()
\family default
 outputs to a file named 
\family typewriter
DebugConsole.txt
\family default
 at the application's folder.
 You can alternatively set the output to the ADB logger by calling 
\family typewriter
Vm.debug(Vm.ALTERNATIVE_DEBUG)
\family default
.
 Open the command prompt and type:
\end_layout

\begin_layout Standard

\family typewriter
adb logcat TotalCross:I *:S
\end_layout

\begin_layout Standard
This is the same of using the 
\family typewriter
.bat
\family default
 file located at:
\family typewriter

\begin_inset Newline newline
\end_inset

%TOTALCROSS_HOME%/etc/tools/android/debug_console.bat
\family default
.
 It greatly helps debugging.
\end_layout

\begin_layout Standard
If, for some reason, the application crashes, do this imediately after it:
\end_layout

\begin_layout Standard

\family typewriter
adb bugreport >bug.txt
\end_layout

\begin_layout Standard
Then zip this 1MB file and send to us.
\end_layout

\begin_layout Subsection
More on ADB
\end_layout

\begin_layout Standard
On some devices it is not easy to access the debugging or using other commands
 using ADB.
 Moreover, since an Android device can be built from different enterprises,
 their settings and configuration menu will look differently from each other.
 
\end_layout

\begin_layout Standard
For instance, the following steps leads you to get USB debugging turned
 on the Galaxy S4, OS 4.3.
 On other Androids, it may be different.
\end_layout

\begin_layout Standard
From within the GS4 you have to enable the "unknown sources" option for
 the installation of applications, though the "allow debug" checkbox doesn't
 seem to be included anymore.
 It should be in Developer Options.
 If your device is running Android 4.2, 
\begin_inset Quotes eld
\end_inset

Developer Options
\begin_inset Quotes erd
\end_inset

 is hidden by default.
 To enable it: 
\end_layout

\begin_layout Enumerate
Go into Settings > About Device 
\end_layout

\begin_layout Enumerate
Tap on the Build Number entry seven times (a status pop up will appear to
 help you keep count) 
\end_layout

\begin_layout Enumerate
Press BACK, and 
\begin_inset Quotes eld
\end_inset

Developer Options
\begin_inset Quotes erd
\end_inset

 should be in the 
\begin_inset Quotes eld
\end_inset

Settings
\begin_inset Quotes erd
\end_inset

 list
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\series bold
Note
\series default
: When you connect a device running Android 4.2.2 or higher to your computer,
 the system shows a dialog asking whether to accept an RSA key that allows
 debugging through this computer.
 This security mechanism protects user devices because it ensures that USB
 debugging and other adb commands cannot be executed unless you're able
 to unlock the device and acknowledge the dialog.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
After that, when issuing the following ADB command, you will get as result:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

C:
\backslash
Users
\backslash
User
\backslash
Documents
\backslash
workspace42>adb devices 
\end_layout

\begin_layout Plain Layout

* daemon not running.
 starting it now on port 5037 * 
\end_layout

\begin_layout Plain Layout

* daemon started successfully *
\end_layout

\begin_layout Plain Layout

List of devices attached 
\end_layout

\begin_layout Plain Layout

0e9def03 offline
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note above that the device status is still listed as "offline".
 Give your device a minute or so and it will pop up a dialog asking to accept
 an RSA key.
 Confirm that this is OK.
 Now, when you reissue the adb devices command, you should see your device
 in the list, and its no longer offline, so you can now use adb as expected.
 
\end_layout

\begin_layout Chapter
Using the Release Vms
\end_layout

\begin_layout Standard
When you decide to release the application to your client, you must purchase
 TotalCross+Litebase licenses.
 See the correct approach going to the TotalCross 
\begin_inset CommandInset href
LatexCommand href
name "site"
target "http://www.totalcross.com"

\end_inset

 and clicking the buy item at the horizontal menu.
 Once we detect the payment, we will then create an activation key and enable
 it at the site.
 Login in the account and press the “Check activation keys and licenses”.
\end_layout

\begin_layout Standard
The TotalCross site has two types of accounts: one for the user that downloads
 the SDK, and one for the user that purchases licenses.
 They can even have the same e-mail, however, the passwords are necessarily
 different.
 The account that is used to download the SDK cannot see the activation
 VMs, however, the account that is used to download the activation VMs can
 see both.
 So, if you login using the SDK user and password, you will NOT be able
 to download the VMs, neither see the “Check activation keys and licenses”
 submenu.
\end_layout

\begin_layout Standard
If you have lots of costumers, you can create new activation keys and transfer
 credits between them.
 All this can be done at the site.
 Note that an activation key cannot be deleted.
\end_layout

\begin_layout Standard
More information can be found at the TotalCross site, under the Products
 menu.
\end_layout

\begin_layout Section
Signing your application
\end_layout

\begin_layout Standard
Once you get access to the activation key, you must sign your application
 with it, using the deploy's 
\family typewriter
/r
\family default
 option.
 Just do something like:
\end_layout

\begin_layout Standard

\family typewriter
java tc.Deploy … /r <activation key>
\end_layout

\begin_layout Section
Activating your application
\end_layout

\begin_layout Standard
After you login with the right account, download the TotalCross VMS package.
 This package is complimentary to the TotalCross SDK: it only contains special
 virtual machines that will authenticate to our server (hosted at Rackspace
 – Boston USA) at the first time that the application runs.
\end_layout

\begin_layout Standard
The VM uses the port 80 and connects a to webservice located at www.superwaba.net
 server.
 So, if you're behind a firewall or a proxy, remember to allow connections
 to this site.
\end_layout

\begin_layout Standard
The first time that the application runs on the device, it generates a file
 named 
\family typewriter
tcreq.pdb
\family default
 at the application's folder, containing the IMEI and the serial number.
 Then it connects to the server and, if succeed, replaces the file with
 a 
\family typewriter
tcsuc.pdb
\family default
.
\end_layout

\begin_layout Standard
If the device is hard-reseted (looses everything), a new connection to the
 server will be made once the program runs again.
 However, a new license will NOT be consumed, since the device was already
 activated once.
\end_layout

\begin_layout Standard
If you upgrade the device's firmware, the serial number may change.
 In this case, when a new activation is done, it will consume a new license,
 since the information that is used to track the device was changed.
\end_layout

\begin_layout Standard
The license is per-device.
 If the device is stolen, broken, or the costumer replaces it by another
 one, a new license is consumed.
\end_layout

\begin_layout Standard
There's a special contract that can be made with us that will allow you
 to replace a device and return the license.
 Contact us at the site if you desire to be covered by this special agreement.
\end_layout

\begin_layout Standard
Some devices may not have an IMEI nor a serial number accessible by software.
 On these devices, a hard-reset will result in the consumption of one more
 lisence if there is no backup of the activation file.
\end_layout

\begin_layout Standard
If you sign your application with two activation keys, the license will
 be discounted again.
\end_layout

\begin_layout Section
Manual Activation
\end_layout

\begin_layout Standard
If you don't have Internet connection from the device, you can do a manual
 activation:
\end_layout

\begin_layout Enumerate
Try to activate the device once.
\end_layout

\begin_layout Enumerate
Copy the 
\family typewriter
tcreq.pdb
\family default
 from the application's folder on the device.
\end_layout

\begin_layout Enumerate
Run the manual activation application, located at:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
- %TOTALCROSS_HOME%
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
- dist
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
- samples
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
ManualActivation
\backslash
install
\backslash
win32
\backslash
ManualActivation.exe
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Standard
(a linux version is available at 
\family typewriter
install
\backslash
linux folder
\family default
).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If a message stating that the 
\family typewriter
tcvm.dll
\family default
 was not found, copy the 
\family typewriter
tcvm.dll
\family default
, 
\family typewriter
tcbase.tcz
\family default
, 
\family typewriter
TCUI.tcz
\family default
, and 
\family typewriter
tcfont.tcz
\family default
 for Windows 32 to this folder and try again.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Select the 
\family typewriter
tcreq.pdb
\family default
 file from within the program.
\end_layout

\begin_layout Enumerate
Our server will be contacted and will write back a 
\family typewriter
tcsuc.pdb
\family default
 file.
\end_layout

\begin_layout Enumerate
Replace the 
\family typewriter
tcreq.pdb
\family default
 by the 
\family typewriter
tcsuc.pdb
\family default
 at the same folder in the device.
 On Android, you will have to root your device to copy a file to it.
 On iOS, you can use DiskAind to copy files from/to the device.
\end_layout

\begin_layout Standard
The ManualActivation also accepts a 
\family typewriter
tcreq.pdb
\family default
 from the command line.
\end_layout

\begin_layout Section
Using a third server to control licenses
\end_layout

\begin_layout Standard
Suppose that you release your signed application to the customer and he
 starts spreading the application to other people.
 We created a way to allow a company to control which costumers will use
 the activated VM.
\end_layout

\begin_layout Standard
You can instruct the VM to call a custom web service created by yourself.
 This web service will process the login/password to allow or deny the activatio
n, and then will call our web service which will return data to the application
 running at the device.
\end_layout

\begin_layout Standard
Follow these steps:
\end_layout

\begin_layout Enumerate
Download the web service
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "(http://www.totalcross.com/activation/Activation_sample.rar) sample"
target "http://www.totalcross.com/activation/Activation_sample.rar"

\end_inset

.
 
\end_layout

\begin_layout Enumerate
In the folder “Sample Webservice” there's a class named 
\family typewriter
ActivationService
\family default
, which is an Axis web service created in Java (like the sample in this
 companion), but which also uses TotalCross classes.
 
\end_layout

\begin_deeper
\begin_layout Itemize
You can host the web service in any kind of server, such as Tomcat, .NET
 and Ruby.
\end_layout

\end_deeper
\begin_layout Enumerate
In the folder "Sample Application", there's a sample application named Activatio
nTest.
 Change the 
\family typewriter
Settings.activationServerURI
\family default
 field (at your application's static initializer!) to point to your web
 service, and make the deploy using the 
\family typewriter
build_sdk.bat
\family default
 (demo version) or 
\family typewriter
build_vms.bat
\family default
 (release version).
 In 
\family typewriter
build_vms.bat
\family default
, change the KEY to your activation key.
 Execute the application to see the results.
 
\end_layout

\begin_layout Enumerate
You can change the file 
\family typewriter
activation.html
\family default
 as you wish, but the property 
\family typewriter
name
\family default
 of the confirmation button must be 
\family typewriter
SubmitActivation
\family default
.
\end_layout

\begin_layout Enumerate
Besides the 
\family typewriter
activation.html
\family default
, there are three optional files: 
\family typewriter
activation_success.
 html
\family default
 (which is shown if the activation succeeds), 
\family typewriter
activation_error.html
\family default
 (shown if the server rejects the activation), and 
\family typewriter
activation_nointernet.html
\family default
 (a test is made before calling the web service to make sure that there's
 Internet, if there's not, this page is shown).
 This way you can customize all messages in your own language.
\end_layout

\begin_layout Enumerate
From your web service, you can check the data that was received and you
 may return an error message to interrupt the activation.
\begin_inset Newline newline
\end_inset

So, this is a summary of what you have to do in your application:
\end_layout

\begin_deeper
\begin_layout Itemize
Specify the address of the web service using 
\family typewriter
Settings.activationServerURI
\family default
 (and optionally also the namespace using 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

activationServerNamespace
\family default
).
 This must be done inside the static initializer of your main class.
\end_layout

\begin_layout Itemize
Optionally, if you want to create a custom screen to show at startup, follow
 the instructions described previously.
\end_layout

\begin_layout Itemize
Note that its impossible to run any code from your application before the
 activation.
 The only possible way to show a custom screen is from the 
\family typewriter
.html
\family default
.
\end_layout

\begin_layout Itemize
Your web service must obey the given interface:
\begin_inset Newline newline
\end_inset


\family typewriter
public static String[] activate(String request, String[] keys, String[]
 values) throws Exception
\end_layout

\begin_deeper
\begin_layout Itemize
The request parameter cannot be changed and must be passed to our web service.
\end_layout

\begin_layout Itemize
The keys and values contains some basic information used by the activation,
 such as the device model, the serial number, the IMEI, and also any other
 parameters defined in the 
\family typewriter
.html
\family default
.
\end_layout

\begin_layout Standard
After you apply your own logic to confirm if this is a valid user (like
 checking the login and password), you must connect to our web service,
 sending the request string as parameter.
\end_layout

\begin_layout Standard
The return of this method must be:
\end_layout

\begin_layout Itemize
If error: an array with a single element with the error message that will
 be displayed to the user (like new 
\family typewriter
String[]{“Invalid password
\begin_inset Quotes erd
\end_inset

}
\family default
).
\end_layout

\begin_layout Itemize
If success: a two dimensional array, where the first element is a message
 that will be displayed to the user, and the second element is the answer
 received from our server.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
Attention: the activation server that this web service uses is our production
 server, so, one credit will be consumed each time that the activation succeeds
 in a computer that was never activated.
 In other words, be aware that your tests will consume a license.
\end_layout

\begin_layout Standard
You can use this piece of code to control if a device has already been activated
 so that you can control the devices your customers use.
 It assumes the following strings as parameters: 
\family typewriter
imei
\family default
, 
\family typewriter
nserial
\family default
, and 
\family typewriter
platform
\family default
.
 You can use other parameters as filters to the query, such as a customer
 unique identifier ID.
 This example is specially important when activating desktop machines, since
 it has no hardware serial number (its value is created by TotalCross using
 some machine device identifiers).
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String filterImeiSerial;        
\end_layout

\begin_layout Plain Layout

if (imei == null) imei = "";
\end_layout

\begin_layout Plain Layout

if (nserial == null || nserial.equalsIgnoreCase("unknown")) nserial = "";
 
\end_layout

\begin_layout Plain Layout

// On win32 the verification is harder, the serial number must be splitted
 and checked with like if its pieces already exist.
\end_layout

\begin_layout Plain Layout

if (plataform.equalsIgnoreCase("Win32") && !nserial.equals(""))
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String[] nn = nserial.split("-");
\end_layout

\begin_layout Plain Layout

	filterImeiSerial = " and (nserial like '%"+nn[0]+"%'";
\end_layout

\begin_layout Plain Layout

	for (int i = 1; i < nn.length; i++)
\end_layout

\begin_layout Plain Layout

		filterImeiSerial += " or nserial like '%"+nn[i]+"%'";
\end_layout

\begin_layout Plain Layout

	filterImeiSerial += ")";
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else if (!imei.equals("") && !nserial.equals(""))
\end_layout

\begin_layout Plain Layout

	filterImeiSerial = " and (imei='"+imei+"' and  nserial='"+nserial+"')";
\end_layout

\begin_layout Plain Layout

else if (!imei.equals(""))
\end_layout

\begin_layout Plain Layout

	filterImeiSerial = " and imei='"+imei+"'";
\end_layout

\begin_layout Plain Layout

else 
\end_layout

\begin_layout Plain Layout

	filterImeiSerial = " and nserial='"+nserial+"'";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

rs = bd.executeQuery("select * from device where filterImeiSerial = "+filterImeiS
erial); 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
TotalCross 3.1 Differences
\end_layout

\begin_layout Standard
First of all, the support for Windows CE and Windows Mobile platforms are
 back since they are still used specially because of collectors.
\end_layout

\begin_layout Standard
Additionally, it is now possible to install a TotalCross application from
 the Windows Store.
\end_layout

\begin_layout Standard
Moreover, now it is possible to use some Java 8 features that were not supported
 before.
 To use java 8, just change the ant files, IDE settings, or 
\family typewriter
javac
\family default
 command line to use target 1.8 and source 1.8.
 If you use a feature not supported yet, an exception will be thrown during
 the deploying process.
\end_layout

\begin_layout Standard
New features that are now supported and some of them are detailed below:
\end_layout

\begin_layout Itemize
JSON;
\end_layout

\begin_layout Itemize
enuns;
\end_layout

\begin_layout Itemize
generics;
\end_layout

\begin_layout Itemize
for each;
\end_layout

\begin_layout Itemize
varargs;
\end_layout

\begin_layout Itemize
switch with strings;
\end_layout

\begin_layout Itemize
clone;
\end_layout

\begin_layout Itemize
the keyword 
\family typewriter
synchronized
\family default
 now works with objects that are not 
\family typewriter
Lock
\family default
;
\end_layout

\begin_layout Itemize
many collection classes, interfaces, and exceptions (without serialization
 yet);
\end_layout

\begin_layout Itemize
more interfaces, classes and exceptions in 
\family typewriter
java.lang
\family default
, and
\end_layout

\begin_layout Itemize
many more methods in 
\family typewriter
String
\family default
 and 
\family typewriter
StringBuffer
\family default
.
 
\end_layout

\begin_layout Section
Collections
\end_layout

\begin_layout Standard
The following exceptions, interfaces, abstract classes, and classes are
 now supported.
 Please check the javadoc to see which methods and fields are allowed.
\end_layout

\begin_layout Itemize
Exceptions: 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ConcurrentModificationException 
\end_layout

\begin_layout Itemize

\family typewriter
EmptyStackException
\end_layout

\begin_layout Itemize

\family typewriter
NoSuchElementException
\end_layout

\end_deeper
\begin_layout Itemize
Interfaces:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Collection 
\end_layout

\begin_layout Itemize

\family typewriter
Comparator 
\end_layout

\begin_layout Itemize

\family typewriter
Deque 
\end_layout

\begin_layout Itemize

\family typewriter
Enumeration 
\end_layout

\begin_layout Itemize

\family typewriter
Iterator 
\end_layout

\begin_layout Itemize

\family typewriter
List 
\end_layout

\begin_layout Itemize

\family typewriter
ListIterator 
\end_layout

\begin_layout Itemize

\family typewriter
NavigableMap 
\end_layout

\begin_layout Itemize

\family typewriter
NavigableSet 
\end_layout

\begin_layout Itemize

\family typewriter
Map 
\end_layout

\begin_layout Itemize

\family typewriter
Queue 
\end_layout

\begin_layout Itemize

\family typewriter
RandomAccess 
\end_layout

\begin_layout Itemize

\family typewriter
Set 
\end_layout

\begin_layout Itemize

\family typewriter
SortedMap 
\end_layout

\begin_layout Itemize

\family typewriter
SortedSet 
\end_layout

\end_deeper
\begin_layout Itemize
Abstract classes:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
AbstractCollection 
\end_layout

\begin_layout Itemize

\family typewriter
AbstractList 
\end_layout

\begin_layout Itemize

\family typewriter
AbstractMap 
\end_layout

\begin_layout Itemize

\family typewriter
AbstractQueue 
\end_layout

\begin_layout Itemize

\family typewriter
AbstractSequentialList 
\end_layout

\begin_layout Itemize

\family typewriter
AbstractSet 
\end_layout

\begin_layout Itemize

\family typewriter
Dictionary
\end_layout

\begin_layout Itemize

\family typewriter
EnumSet
\end_layout

\end_deeper
\begin_layout Itemize
Classes:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ArrayList 
\end_layout

\begin_layout Itemize

\family typewriter
Arrays 
\end_layout

\begin_layout Itemize

\family typewriter
BitSet 
\end_layout

\begin_layout Itemize

\family typewriter
Collections 
\end_layout

\begin_layout Itemize

\family typewriter
EnumMap 
\end_layout

\begin_layout Itemize

\family typewriter
HashMap 
\end_layout

\begin_layout Itemize

\family typewriter
HashSet 
\end_layout

\begin_layout Itemize

\family typewriter
HashTable
\end_layout

\begin_layout Itemize

\family typewriter
IdentityHashMap 
\end_layout

\begin_layout Itemize

\family typewriter
LinkedHashMap 
\end_layout

\begin_layout Itemize

\family typewriter
LinkedHashSet 
\end_layout

\begin_layout Itemize

\family typewriter
LinkedList 
\end_layout

\begin_layout Itemize

\family typewriter
PriorityQueue 
\end_layout

\begin_layout Itemize

\family typewriter
Stack
\end_layout

\begin_layout Itemize

\family typewriter
TreeMap 
\end_layout

\begin_layout Itemize

\family typewriter
TreeSet
\end_layout

\begin_layout Itemize

\family typewriter
Vector
\end_layout

\end_deeper
\begin_layout Standard
Note that now there are two 
\family typewriter
Vector
\family default
 and two 
\family typewriter
Hashtable
\family default
 classes.
 Two from 
\family typewriter
totalcross.util
\family default
 and the others from 
\family typewriter
java.util
\family default
.
 To use the ones from the Collections API, use 
\family typewriter
java.util.Vector
\family default
 and 
\family typewriter
java.util.Hashtable
\family default
.
\end_layout

\begin_layout Section
Additions in 
\family typewriter
java.lang
\end_layout

\begin_layout Itemize
Exceptions:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
CloneNotSuportedException
\end_layout

\begin_layout Itemize

\family typewriter
UnsupportedOperationException
\end_layout

\end_deeper
\begin_layout Itemize
Interfaces:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Cloneable
\end_layout

\begin_layout Itemize

\family typewriter
Comparable 
\end_layout

\begin_layout Itemize

\family typewriter
Iterable
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Object.clone()
\end_layout

\begin_layout Itemize

\family typewriter
Float.compare()
\family default
, 
\family typewriter
Float.floatToIntBits()
\family default
, and 
\family typewriter
Float.floatToRawIntBits()
\end_layout

\begin_layout Itemize

\family typewriter
Double.compare()
\family default
, 
\family typewriter
Double.doubleToLongBits()
\family default
, and 
\family typewriter
Double.doubleToRawLongBits()
\end_layout

\begin_layout Itemize

\family typewriter
String
\family default
 now extends 
\family typewriter
Comparable<String>
\family default
, that is, it is now a 
\family typewriter
Comparable
\family default
 object.
\end_layout

\begin_layout Section
Additions in 
\family typewriter
String
\family default
 and 
\family typewriter
StringBuffer
\end_layout

\begin_layout Itemize

\family typewriter
String
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
String(StringBuffer buffer)
\end_layout

\begin_layout Itemize

\family typewriter
boolean contains(String part)
\end_layout

\begin_layout Itemize

\family typewriter
boolean contentEquals(StringBuffer buffer)
\end_layout

\begin_layout Itemize

\family typewriter
int compareToIgnoreCase(String str)
\end_layout

\begin_layout Itemize

\family typewriter
boolean regionMatches(int toffset, String other, int ooffset, int len)
\end_layout

\begin_layout Itemize

\family typewriter
boolean regionMatches(boolean ignoreCase, int toffset, String other, int
 ooffset, int len)
\end_layout

\begin_layout Itemize

\family typewriter
boolean matches(String regex)
\end_layout

\begin_layout Itemize

\family typewriter
replaceAll(String regex, String replacement)
\end_layout

\begin_layout Itemize

\family typewriter
String[] split(String regex)
\end_layout

\begin_layout Itemize

\family typewriter
String valueOf(char[] data)
\end_layout

\begin_layout Itemize

\family typewriter
String valueOf(char[] data, int offset, int count)
\end_layout

\begin_layout Itemize

\family typewriter
boolean isEmpty()
\end_layout

\begin_layout Itemize

\family typewriter
String replace (String target, String replacement)
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
StringBuffer
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
StringBuffer append(StringBuffer stringBuffer)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer deleteCharAt(int index)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer replace(int start, int end, String str)
\end_layout

\begin_layout Itemize

\family typewriter
String substring(int beginIndex)
\end_layout

\begin_layout Itemize

\family typewriter
String substring(int beginIndex, int endIndex)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, char[] str, int str_offset, int len)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, Object obj)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, String str)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, char[] data)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, boolean bool)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, char ch)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, int inum)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, long lnum)
\end_layout

\begin_layout Itemize

\family typewriter
StringBuffer insert(int offset, double dnum)
\end_layout

\begin_layout Itemize

\family typewriter
int indexOf(String str)
\end_layout

\begin_layout Itemize

\family typewriter
int indexOf(String str, int fromIndex)
\end_layout

\begin_layout Itemize

\family typewriter
int lastIndexOf(String str)
\end_layout

\begin_layout Itemize

\family typewriter
int lastIndexOf(String str, int fromIndex)
\end_layout

\begin_layout Itemize

\family typewriter
boolean regionMatches(int toffset, String other)
\end_layout

\end_deeper
\begin_layout Chapter
TotalCross 3.0 Differences
\end_layout

\begin_layout Section
Platforms
\end_layout

\begin_layout Standard
 Note that Litebase 2.7 works for TotalCross 1.7 (and up), and TotalCross
 2.0 (and up).
 TotalCross 3.0 (and up) uses Litebase 2.8.
 Litebase differences for TotalCross 3.0 are just some small path changes
 to run on WP8.
 
\end_layout

\begin_layout Standard
What we recommend is that you use TotalCross 2.0 only for those two platforms,
 and use TotalCross 3.0 for all other platforms.
 Many SDKs can coexist in the same machine, just rename them.
\end_layout

\begin_layout Standard
What we recommend is that you use TotalCross 1.7 only for those two platforms,
 and use TotalCross 2 for all other platforms.
 Both SDKs can coexist in the same machine, just rename them.
\end_layout

\begin_layout Standard
So:
\end_layout

\begin_layout Enumerate
Developing for all currently supported platforms: use 
\family typewriter
TotalCross3/dist/tc.jar
\family default
 
\end_layout

\begin_layout Enumerate
Deploying for Android, iOS, Windows 32, Linux, Windows Phone 8, and browser:
 use 
\family typewriter

\begin_inset Newline newline
\end_inset

TotalCross3/dist/tc.jar
\family default
 
\end_layout

\begin_layout Enumerate
Deploying for Windows CE: use 
\family typewriter
TotalCross2/dist/tc.jar
\end_layout

\begin_layout Enumerate
Deploying for Palm OS and Blackberry: use 
\family typewriter
TotalCross1.7/dist/tc.jar
\end_layout

\begin_layout Standard
The great main improvement in TotalCross 3.0 is the support of the new and
 rapidly growing Windows Phone 8.
 We opt to not give support to Windows Phone 7 since its market share is
 small and Microsoft decided to develop WP8 just some time later.
\end_layout

\begin_layout Section
Installation Package
\end_layout

\begin_layout Standard
Now it is only needed to download and install one 
\family typewriter
.exe
\family default
 for TotalCross and Litebase SDK and VM.
 Make sure to change the paths used in your deploying process to reflect
 this change.
\end_layout

\begin_layout Section
Graphics
\end_layout

\begin_layout Standard
For Windows Phone 8, DirectX is used instead of the old scheme of bitmaps.
 In the furure releases, DirectX will also be used for Windows 32 in order
 to improve graphics performance.
 However, older Windows 32 releases won't be supported anymore.
\end_layout

\begin_layout Standard
On iOS 7 or above use the field 
\family typewriter
Windows.taskbarColor
\family default
 in order to paint the iOS floating task bar.
 It defaults to the application's background color.
 
\end_layout

\begin_layout Section
Font
\end_layout

\begin_layout Standard
The only change is that now there is no size limit to the font.
 However, fonts whose size is greater than 160 will be blurred.
\end_layout

\begin_layout Section
Reflection
\end_layout

\begin_layout Standard
Now the reflection API of Java 1.1 is full implemented.
 To know more about it, please check javadoc or take a look at this link
 explaining it:
\begin_inset Newline newline
\end_inset

 
\begin_inset CommandInset href
LatexCommand href
name "http://www.tns.lcs.mit.edu/manuals/java-1.1.1/guide/reflection/index.html"
target "http://www.tns.lcs.mit.edu/manuals/java-1.1.1/guide/reflection/index.html"

\end_inset


\end_layout

\begin_layout Section
SQLite and TDBC
\end_layout

\begin_layout Standard
Now there is another database option in TotalCross.
 SQLite was included in the platorm, so that TotalCross will use the same
 SQLite version for all supported platforms.
 If it used the one available on the device when it has one, there could
 be differences in the API or table format.
 But remember that Litebase eases the task of synchronizing the device tables
 with tables on server databases such as SQLServer or Oracle by using the
 class 
\family typewriter
RowIterator
\family default
.
 If you want to do something similar using SQLite, you will have to do it
 from scratch.
\end_layout

\begin_layout Standard
The currently SQLite version used is 3.8.
 If you intend to use it, please take a look at its documentation at 
\begin_inset CommandInset href
LatexCommand href
name "http://www.sqlite.org/"
target "http://www.sqlite.org/"

\end_inset

.
\end_layout

\begin_layout Standard
The access to SQLite is through TDBC, a JDBC driver for TotalCross.
 The TDBC implementation was based on JDBC 2.1.
 We did not implement everything.
 Below is a list of JDBC classes and interfaces that were and were not implement
ed:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="23" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="left" valignment="top" width="0">
<column alignment="center" valignment="top" width="40page%">
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Feature
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Was it implemented?
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Array
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
CallableStatement
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DatabaseMetaData
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Ref
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SQLData 
\family default
interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SQLInput 
\family default
interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SQLOutput 
\family default
interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Struct 
\family default
interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Blob
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Connection 
\family default
interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All the methods except for 
\family typewriter
getMetaData()
\family default
, 
\family typewriter
getTypeMap()
\family default
, 
\family typewriter
prepareCall()
\family default
, and 
\family typewriter
setTypeMap()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Driver
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
PreparedStatement
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All the methods except for 
\family typewriter
setArray()
\family default
,
\family typewriter
 setAsciiStream()
\family default
,
\family typewriter
 setBinaryStream()
\family default
,
\family typewriter
 setCharacterStream()
\family default
,
\family typewriter
 setClob()
\family default
,
\family typewriter
 setFloat()
\family default
,
\family typewriter
 setObject()
\family default
,
\family typewriter
 setRef()
\family default
, and
\family typewriter
 setUnicodeStream()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ResultSet
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All the methods except for 
\family typewriter
deleteRow()
\family default
, 
\family typewriter
getArray()
\family default
, 
\family typewriter
getAsciiStream()
\family default
, 
\family typewriter
getBinaryStream()
\family default
, 
\family typewriter
getCaracterStream()
\family default
, 
\family typewriter
getClob()
\family default
, 
\family typewriter
getObject()
\family default
, 
\family typewriter
getRef()
\family default
, 
\family typewriter
getUnicodeStream()
\family default
, 
\family typewriter
insertRow()
\family default
, 
\family typewriter
moveToInsertRow()
\family default
, and 
\family typewriter
update()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ResultSetMetaData
\family default
 interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Statement 
\family default
interface
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
All the methods except for 
\family typewriter
setEscapeProcessing()
\family default
 and 
\family typewriter
setMaxFieldSize()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DriverPropertyInfo 
\family default
class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
SQLPermission
\family default
 class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
no
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date
\family default
 class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DriverManager
\family default
 class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Time
\family default
 class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Timestamp
\family default
 class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Types
\family default
 class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
yes
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Take a look at JDBC specification 2.1 at 
\begin_inset CommandInset href
LatexCommand href
name "http://www.tlu.ee/~matsak/oracle/jdbc2_1-spec.pdf"
target "http://www.tlu.ee/~matsak/oracle/jdbc2_1-spec.pdf"

\end_inset

.
 You can check TDBC javadoc in the package 
\family typewriter
totalcross.db.sqlite
\family default
.
 In the future, other databases might be added to TotalCross using JDBC
 specification.
 It is also intended to provide Litebase access using the JDBC API.
\end_layout

\begin_layout Chapter
TotalCross 2 Differences
\end_layout

\begin_layout Section
Platforms
\end_layout

\begin_layout Standard
In TotalCross 2 we dropped support for Palm OS and BlackBerry platforms,
 since these platforms are discontinued or replaced in the market by Android
 and iOS.
\end_layout

\begin_layout Standard
If you want to support these platforms, you must download TotalCross 1.7,
 which still supports these platforms.
 
\end_layout

\begin_layout Standard
What we recommend is that you use TotalCross 1.7 only for these two platforms.
\end_layout

\begin_layout Standard
Applications created with TotalCross 2 can be hosted at Apple's Appstore,
 using the developer distibution certificate, so we dropped support for
 Cydia in TotalCross 2.
 Due to this, all iOS samples are not included in the SDK, because to install
 them you need a certificate.
 We intend to put some samples at Apple´s Appstore.
 
\end_layout

\begin_layout Section
Graphics
\end_layout

\begin_layout Standard
TotalCross 2 was created to improve graphics perfomance.
 We made a full rewrite of the native Graphics API to use Open GL.
\end_layout

\begin_layout Standard
In TotalCross 1, the screen is drawn in a native bitmap, and then the bitmap
 is drawn on the screen using the device's graphics API.
 Everything, like lines, filled rectangles, and images are rendered by software.
\end_layout

\begin_layout Standard
In TotalCross 2, we use Open GL, where everything is rendered by the hardware
 graphics processor.
 So, when you load an image, it is moved inside the video memory, and then
 all draws of the image are instantaneous.
\end_layout

\begin_layout Standard
Open GL is used on Android and iOS.
 For Java SE and Windows 32, it uses the old scheme of bitmaps.
\end_layout

\begin_layout Standard
Besides the speed performance that Open GL provides, there are some drawbacks.
 The main one is that Open GL requires that the whole screen is painted
 on each screen update.
 For example, in TotalCross 1, when an Edit's cursor is blinking, only the
 cursor is painted at each screen update, while in TotalCross 2, the whole
 screen is painted each time the cursor blinks.
\end_layout

\begin_layout Standard
Another consequence of this requirement is that you cannot update the screen
 in a thread.
 So, in TotalCross 1, the spinner class was able to draw only the spinner
 in a thread; this is impossible in TotalCross 2, which makes the spinner
 useless under some circunstances.
\end_layout

\begin_layout Standard
An advantage of Open GL is that it supports alpha channel by hardware.
 Due to this, we removed support for the 
\family typewriter
Image
\family default
's transparent color.
 So, all 
\family typewriter
Image
\family default
 methods that would receive a transparent color were deprecated (like rotate,
 scale, etc), and you must use images with alpha-channel.
\end_layout

\begin_layout Standard
In Open GL, the 
\family typewriter
getPixels()
\family default
 operation is veeeeryyyy sloooowwww, and can cut all the performance gain
 that you have with Open GL, so we removed support and deprecated for all
 graphics methods that requires the read of the screen pixels (the methods
 are still there but their effects are ignored):
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.useAA
\family default
 (for smooth antialiased lines) 
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.drawOp
\family default
 for controls that use 
\family typewriter
DRAW_SPRITE
\family default
, call the 
\family typewriter
Image.
\begin_inset Newline newline
\end_inset

setTransparentColor()
\family default
 method.
 
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.drawHighlightFrame()
\family default
,
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.eraseRect()
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.getVistaColors()
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.fillCursor()
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.drawCursor()
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.drawDottedCursor()
\end_layout

\begin_layout Itemize

\family typewriter
Graphics.getPixel()
\end_layout

\begin_layout Standard
We also deprecated these: 
\end_layout

\begin_layout Itemize

\family typewriter
Image.NO_TRANSPARENT_COLOR
\family default
 (removed) 
\end_layout

\begin_layout Itemize

\family typewriter
Image.useAlpha
\family default
 (now all images use alpha channel) 
\end_layout

\begin_layout Itemize

\family typewriter
TabbedContainer
\family default
: the constructor that receives a transparent color 
\end_layout

\begin_layout Itemize

\family typewriter
Window.highResPrepared
\end_layout

\begin_layout Itemize

\family typewriter
Settings.useNewFont
\end_layout

\begin_layout Standard
And added: 
\end_layout

\begin_layout Itemize

\family typewriter
Image.applyChanges()
\family default
: in TotalCross 2, moves the image inside the video memory; in TotalCross
 1, does nothing.
 Note that you do not have to call this method.
 
\end_layout

\begin_layout Section
Font
\end_layout

\begin_layout Standard
The original font of TotalCross was a Tahoma font generated inside a Windows
 CE device.
 When we moved it to Open GL, the results were very poor, so we decided
 to change the font to the Android's default font and created the font inside
 an Android 4.1 device.
 This font is used in both TotalCross 1.7 and 2.0.
 We also changed the minimum size to 7 and the maximum size to 48.
 This new font is a bit narrower than the previous one, so it may not cause
 impacts in the user interface.
 
\end_layout

\begin_layout Section
Litebase
\end_layout

\begin_layout Standard
Please notice that all indices files must be erased in order to use Litebase
 tables created with version 2.67 with Litebase 2.7 and vice-versa.
 Moreover, tables using cryptography created in version 2.7 can't be used
 with version 2.67.
\end_layout

\begin_layout Chapter
Litebase to SQLite Conversion
\end_layout

\begin_layout Standard
Since TotalCross now supports SQLite using TDBC, some programmers might
 want to migrate a program that uses Litebase to use SQLite.
 Here is a guide to help the conversion process:
\end_layout

\begin_layout Enumerate
The supported SQL commands are described in the link 
\begin_inset CommandInset href
LatexCommand href
name "http://sqlite.org/lang.html"
target "http://sqlite.org/lang.html"

\end_inset

.
\end_layout

\begin_layout Enumerate
Use 
\family typewriter
totalcross.db.sqlite.ui.DBListBox
\family default
 instead of 
\family typewriter
litebase.ui.DBListBox
\family default
.
\end_layout

\begin_layout Enumerate
The class 
\family typewriter
totalcross.db.sqlite.SQLiteUtil
\family default
 methods will make the process much easier.
 Take a look at them.
\end_layout

\begin_layout Enumerate
There is no way to go back when navigating in a 
\family typewriter
ResultSet
\family default
 using something such as 
\family typewriter
ResultSet.prev()
\family default
.
 You can only navigate forward (using 
\family typewriter
ResultSet.next()
\family default
), never backward.
 There are also no 
\family typewriter
first()
\family default
, 
\family typewriter
last()
\family default
, 
\family typewriter
beforeFirst()
\family default
, 
\family typewriter
afterLast()
\family default
, 
\family typewriter

\begin_inset Newline newline
\end_inset

absolute()
\family default
, or 
\family typewriter
relative()
\family default
.
 All result set pointers are before the first result set record when created.
 If it is necessary to go backwards in a result set, you must close and
 recreate it.
\end_layout

\begin_layout Enumerate
When fetching a DATETIME field with 
\family typewriter
ResultSet.getString()
\family default
, notice that Litebase will return the field in the format 
\family typewriter
YYYY/MM/DD HH:MM:SS
\family default
 whereas SQLite returns in the format 
\family typewriter
YYYYMMDDHHMMSSmmm
\family default
.
\end_layout

\begin_layout Enumerate
The class which deals with connections is called 
\family typewriter
Connection
\family default
, not 
\family typewriter
LitebaseConnection
\family default
.
\end_layout

\begin_layout Enumerate
There is no multiple languages in SQLite messages.
 All messages from database exceptions are only in English.
\end_layout

\begin_layout Enumerate

\family typewriter
litebase.DriverException
\family default
 must be changed to 
\family typewriter
java.sql.SQLException
\family default
.
 It won't work if you use 
\family typewriter
totalcross.sql.SQLException
\family default
!
\end_layout

\begin_layout Enumerate

\family typewriter
LitebaseConnection.getInstance(XXXX)
\family default
 must be changed to 
\family typewriter
DriverManager.
\begin_inset Newline newline
\end_inset

getConnection("jdbc:sqlite:XXXX
\backslash

\backslash
YYYY.db")
\family default
, where 
\family typewriter
XXXX
\family default
 is the desired path and 
\family typewriter
YYYY
\family default
 is the database name.
 
\end_layout

\begin_layout Enumerate

\family typewriter
LitebaseConnection.closeAll()
\family default
 must be changed to 
\family typewriter
Connection.close()
\family default
.
\end_layout

\begin_layout Enumerate

\family typewriter
LitebaseConnection.execute
\family default
/
\family typewriter
executeUpdate()
\family default
 must be changed to 
\family typewriter
Connection.
\begin_inset Newline newline
\end_inset

createStatement().execute
\family default
/
\family typewriter
executeUpdate()
\family default
.
\end_layout

\begin_layout Enumerate
All methods throws 
\family typewriter
SQLException
\family default
.
\end_layout

\begin_layout Enumerate
In Litebase, in order to not create a table if it exists, you should do
 something such as
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (!conn.exists("table_name"))
\end_layout

\begin_layout Plain Layout

   conn.execute("create table table_name...");
\end_layout

\end_inset

In SQLite, there is a single command that does it: 
\family typewriter

\begin_inset Newline newline
\end_inset

create table if not exists table_name
\family default
.
\end_layout

\begin_layout Enumerate
There is also a command to only drop a table if it exists: 
\family typewriter

\begin_inset Newline newline
\end_inset

drop table if exists table_name
\family default
.
\end_layout

\begin_layout Enumerate
Use 
\family typewriter
SQLiteUtil.getColCount()
\family default
 to get the number of columns of a 
\family typewriter
ResultSet
\family default
.
\end_layout

\begin_layout Enumerate
There is no way to get the total number of rows of a 
\family typewriter
ResultSet
\family default
 using SQLite.
\end_layout

\begin_layout Enumerate
Use 
\family typewriter
SQLiteUtil.tableExists()
\family default
 instead of 
\family typewriter
LitebaseConnection.exists()
\family default
.
\end_layout

\begin_layout Enumerate
Use 
\family typewriter
ResultSet.getMetaData()
\family default
 instead of 
\family typewriter
ResultSet.getResultSetMetaData()
\family default
.
\end_layout

\begin_layout Enumerate
All data returned in the SQLite metadata methods are in uppercase, whereas
 in Litebase they are always in lowercase.
\end_layout

\begin_layout Enumerate
There is no cryptography in the free SQLite version, the one included in
 TotalCross.
\end_layout

\begin_layout Enumerate
Change 
\family typewriter
nocase
\family default
 to 
\family typewriter
collate nocase
\family default
 in order to make a field case insensitive.
 You can also use 
\family typewriter
collate nocase
\family default
 to make a comparison case insensitive.
 However, the first option is preferable if the column will always be used
 in a case insensitive way because it is faster.
\end_layout

\begin_layout Enumerate
Change from 
\family typewriter
ResultSetMetaData.XXXX_TYPE
\family default
 to 
\family typewriter
Types.XXXX
\family default
.
\end_layout

\begin_layout Enumerate
Change from 
\family typewriter
ResultSet.getBlob()
\family default
 to 
\family typewriter
ResultSet.getBytes()
\family default
 when dealing with a blob column.
\end_layout

\begin_layout Enumerate
Change from 
\family typewriter
ResultSet.getStrings()
\family default
 to one of the methods 
\family typewriter
SQLUtil.
\begin_inset Newline newline
\end_inset

getStrings()
\family default
 to fetch all rows from the current result set pointer.
 To fetch only some rows, you must implement it yourself, or use the keywords
 
\family typewriter
LIMIT
\family default
 and 
\family typewriter
OFFSET
\family default
 in your SQLite select statement.
 
\end_layout

\begin_layout Enumerate
Change from 
\family typewriter
LitebaseConnection.listAllTables()
\family default
 to 
\family typewriter
SQLUtil.
\begin_inset Newline newline
\end_inset

ListAllTables()
\family default
.
 
\end_layout

\begin_layout Enumerate
To create a memory database, use 
\family typewriter
DriverManager.
\begin_inset Newline newline
\end_inset

getConnection("jdbc:sqlite::memory:")
\family default
.
 By default, the database is created in the application folder (
\family typewriter
/device
\family default
).
\end_layout

\begin_layout Enumerate
Change from 
\family typewriter
LitebaseConnection.getRowCount()
\family default
 to 
\family typewriter
SQLiteUtil.
\begin_inset Newline newline
\end_inset

getRowCount()
\family default
.
\end_layout

\begin_layout Enumerate
There is nothing similar to 
\family typewriter
RowIterator
\family default
.
 You must simulate the updates in the table manually, creating new columns
 or moving data to another table and then select it.
 Just remember that the space used by a deleted row might be reused if SQLite
 needs it.
\end_layout

\begin_layout Enumerate
Change from 
\family typewriter
LitebaseConnection.purge()
\family default
 to 
\family typewriter
Connection.
\begin_inset Newline newline
\end_inset

execute("vacuum;")
\family default
.
 In SQLite you do a 
\begin_inset Quotes eld
\end_inset

purge
\begin_inset Quotes erd
\end_inset

 in all tables in the database, not in a specific table such as in Litebase.
\end_layout

\begin_layout Enumerate
In SQLite the 
\family typewriter
PreparedStatement
\family default
 index begin with 1, not 0.
\end_layout

\begin_layout Enumerate
There is no size definition when creating a blob column.
\end_layout

\begin_layout Enumerate
Use 
\family typewriter
Time.getSQLString()
\family default
 or 
\family typewriter
Date.getSQLString()
\family default
 to format time and date in the SQL format, respectively.
\end_layout

\begin_layout Enumerate
There is no type checking in SQLite.
 You can put whatever you want in any column.
 If you don't want to insert data in a column with wrong data type, your
 program must ensure that it behaves as expected.
\end_layout

\begin_layout Enumerate
All string data inserted is stored in unicode.
 It's not possible to create an ascii database in order to save space.
\end_layout

\begin_layout Enumerate
It is not possible to erase all indices in a single SQL statement such as
 the one used in Litebase: 
\family typewriter
drop index * on table_name
\family default
.
 Moreover, to drop a specific index, you must drop it using its name, using
 
\family typewriter
drop index IDX_NAME
\family default
, not 
\family typewriter
drop index on 
\begin_inset Newline newline
\end_inset

table_name(column_name)
\family default
.
\end_layout

\begin_layout Enumerate
You can't alter a table to add or drop a primary key in SQLite.
 
\end_layout

\begin_layout Enumerate
Important rules about date and time in SQLite:
\end_layout

\begin_layout Itemize

\family typewriter
DATE
\family default
 type: must be in the form: 
\family typewriter
YYYY-MM-DD
\end_layout

\begin_layout Itemize

\family typewriter
TIME
\family default
 type: must be in the form: 
\family typewriter
YYYY-MM-DD HH:MM:SS.MMM
\end_layout

\begin_deeper
\begin_layout Standard
When using 
\family typewriter
BETWEEN
\family default
 or any other date/time comparation, the arguments MUST MATCH the type form.
 So, in 
\family typewriter
select borndate from test where borndate between 
\begin_inset Newline newline
\end_inset

'2014-12-10' and '2014-12-14'
\end_layout

\end_deeper
\begin_layout Itemize
If 
\family typewriter
borndate
\family default
 is a 
\family typewriter
DATE
\family default
, the comparison will succeed.
 
\end_layout

\begin_layout Itemize
If 
\family typewriter
borndate
\family default
 is a 
\family typewriter
TIME
\family default
, the comparison will fail.
 To make it work, use 
\family typewriter
select borndate from test where borndate between '2014-12-10 00:00:00.000'
 and 
\begin_inset Newline newline
\end_inset

'2014-12-14 00:00:00.000'
\family default
.
\end_layout

\begin_layout Chapter
SuperWaba to TotalCross Conversion
\end_layout

\begin_layout Standard
In order to make the conversion easier, we created a program, 
\family typewriter
tc.tools.SW2TC
\family default
 (included in 
\family typewriter
tc.jar
\family default
), which recursively reads a set of folders and change the names of the
 old SuperWaba packages, classes and methods to the new ones.
\end_layout

\begin_layout Standard
This program does not create a backup, it simply overwrites the original
 files, so you should backup your files before running the program.
\end_layout

\begin_layout Standard
This converter takes care of about 99% of the problems, remaining only 1%
 for you to manually update.
 Also, the program is just a token replacer, therefore, it cannot find that
 in "xxx.yyy", xxx is a ListBox nor a hotdog, so it cannot replace tokens
 based on the type.
 Always refer to this table 
\begin_inset Newline newline
\end_inset

(
\begin_inset CommandInset href
LatexCommand href
target "http://www.totalcross.org/en/sw2tc.asp"

\end_inset

), where we summarize the package, class, and method changes.
\end_layout

\begin_layout Section
General Tips
\end_layout

\begin_layout Standard
Some important tips to finish the conversion after running the SW2TC:
\end_layout

\begin_layout Itemize
SW2TC cannot change some method names, refer to the javadocs for the new
 name of these methods.
\end_layout

\begin_layout Itemize
The return type of some methods were changed, most of them used to return
 a 
\family typewriter
boolean
\family default
 or 
\family typewriter
int
\family default
 value to indicate success or failure and now return 
\family typewriter
void
\family default
.
 Errors handling is done with exceptions.
\end_layout

\begin_layout Itemize
Many methods now throw checked exceptions, which must be handled accordingly.
 In TotalCross, there were almost no validation on the arguments passed to
 the methods; in TotalCross, nearly all methods perform argument validation,
 throwing the appropriate exception for each case (in the future, this will
 be extended to all arguments and methods).
 To easily display the exception to the user, you can use the static method
 
\family typewriter
MessageBox.showException
\family default
.
 Read the tip described in the next section.
\end_layout

\begin_layout Standard
ALWAYS handle the exceptions thrown.
 Ignoring exceptions or simply logging the error without handling the exception
 is just wrong.
 Also remember that unchecked exceptions are usually caused by bad programming
 and are not supposed to be caught, unless you're using an unchecked exception
 instead of testing a condition.
\end_layout

\begin_layout Standard
E.g., instead of:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

int sum = 0;
\end_layout

\begin_layout Plain Layout

for (int i = 0 ; i < values.length ; i++)
\end_layout

\begin_layout Plain Layout

	sum += values[i];
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may use:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

int sum = 0;
\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	for (int = 0 ; ; i++)
\end_layout

\begin_layout Plain Layout

		sum+= values[i];
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (ArrayIndexOutOfBoundsException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	// do nothing, it only means we finished reading the array.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice we are not discussing the performance of each approach, just
 showing an example.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Some packages and classes were removed or changed, like the 
\family typewriter
datergf
\family default
 package and the 
\family typewriter
IntVector(DataStream)
\family default
 constructor.
 Most of them can be easily replaced by other classes or methods in TotalCross.
 But if needed, you may grab their code from SuperWaba, convert to TotalCross
 and add to your project.
 
\end_layout

\begin_layout Itemize

\family typewriter
Color
\family default
 is now an 
\family typewriter
int
\family default
, in the format 0xRRGGBB.
 Change all 
\family typewriter
Color
\family default
 to 
\family typewriter
int
\family default
.
 Instead of comparing or initializing the color to null, use -1.
\end_layout

\begin_layout Standard
Instead of:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

Color c1 = ...;
\end_layout

\begin_layout Plain Layout

Color c2 = c1.brighter();
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[label=samplecode,caption=A sample]
\end_layout

\begin_layout Plain Layout

int c1 = ...;
\end_layout

\begin_layout Plain Layout

int c2 = Color.brighter(c1);
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
The method 
\family typewriter
isOpen()
\family default
 was removed from all streams.
 Their constructors now throw an 
\family typewriter
IOException
\family default
 (or a subclass of it, like 
\family typewriter
FileNotFoundException
\family default
) if the operation fails.
\end_layout

\begin_layout Itemize
In SuperWaba some classes had a 
\family typewriter
lastError
\family default
 field that had a platform dependent error code; in TotalCross this field
 no longer exists, the exception message contains a platform dependent error
 message identifying the error.
 This error message is provided by the underlying OS and may not be as helpful
 as expected, but it's still better than an error value.
 If the OS is unable to find a given error code on its error table, the
 exception message will have only the error code.
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
onStart()
\family default
 and 
\family typewriter
onAdd()
\family default
 were respectively renamed to 
\family typewriter
initUI()
\family default
 and 
\family typewriter

\begin_inset Newline newline
\end_inset

onAddAgain()
\family default
.
 The SW2TC should perform these changes, but if the screen appears blank
 for some reason, check if the method 
\family typewriter
onStart()
\family default
 was not renamed.
\end_layout

\begin_layout Itemize
The 
\family typewriter
WINDOW_MOVED
\family default
 event was removed.
 It was usually used to update the 
\family typewriter
myg
\family default
 (my Graphics) object.
 Now the correct approach is to do a 
\family typewriter
getGraphics()
\family default
 in all places 
\family typewriter
myg
\family default
 was used.
 
\end_layout

\begin_layout Itemize

\family typewriter
Settings.onDevice
\family default
 is now called 
\family typewriter
onJavaSE
\family default
 (Standard Edition), but notice it has the opposite meaning! Be sure to
 search for this field and make sure it is being used correctly.
 For instance:
\begin_inset Newline newline
\end_inset


\family typewriter
if (Settings.onDevice)
\family default
 replaced 
\family typewriter
for if(!Settings.onJavaSE)
\end_layout

\begin_layout Itemize
All classes that extend 
\family typewriter
Container
\family default
 must explicitly set 
\family typewriter
focusTraversable = true
\family default
 in the constructor, otherwise the class will not be able to receive focus
 using the keyboard in penless devices.
 This flag defaults to true in SuperWaba, but to false in TotalCross.
 
\end_layout

\begin_layout Section
Correct way to handle Exceptions
\end_layout

\begin_layout Standard
We decided to write this to explain to programmers how to deal with exceptions.
 It does not apply only to TotalCross, but also to all other languages that
 make use of exceptions.
 One of the main differences between SuperWaba and TotalCross is the dispatch
 of exceptions by the API.
 Careless programmers tend to code this way:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	File f = new File(...);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception e){}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In other words, just ignore the exception that is being thrown.
 A programmer that codes this way should be fired for carelessness.
 A variation of this approach is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Vm.debug("An exception was thrown");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here the programmer informs itself that the exception was thrown but completely
 ignores crucial information that can help to resolve the problem.
 And he will see the exception only if he opens the 
\family typewriter
DebugConsole.txt
\family default
.
\end_layout

\begin_layout Standard
The second error is to handle exceptions in the same method it was thrown,
 like in this sample:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Report
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	File f;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	void createReport()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		createFile();
\end_layout

\begin_layout Plain Layout

		runReport();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	void createFile()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		f = new File("report.txt", File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		e.printStackTrace();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
What's the problem here? Simple: the 
\family typewriter
createReport()
\family default
 method is unable to confirm that the file was created or failed.
 
\end_layout

\begin_layout Standard
So, what's the correct way? The correct implementation is always throw the
 exception to the caller, and this to its caller, and so on, until you reach
 a root method that cannot pass the exception along, like the 
\family typewriter
initUI()
\family default
 and 
\family typewriter
onEvent()
\family default
 methods (since these methods are overriden and you cannot change the method's
 signature).
\end_layout

\begin_layout Standard
Therefore, the correct implementation is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class Report
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	File f;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	void createReport() throws IOException
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		createFile();
\end_layout

\begin_layout Plain Layout

		runReport();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	void createFile() throws IOException
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		f = new File("report.txt", File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Implementing this way, in the root method, we would do:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	createReport();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(e,true);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this approach is not yet perfect, because the 
\family typewriter
createFile()
\family default
 method is throwing 
\family typewriter
Exception
\family default
, while 
\family typewriter
new File()
\family default
 throws three exceptions: 
\family typewriter
IllegalArgumentIOException
\family default
, 
\family typewriter
FileNotFoundException
\family default
 and 
\family typewriter
IOException
\family default
.
 Hence, the correct is that each exception be declared on its own in the
 throws clause of the method, and that your program handle them in the correct
 way.
 For example, 
\family typewriter
IllegalArgumentIOException
\family default
 occurs most times by a coding error and should never occur in production
 code.
 However, there may exist some exceptions that are less serious than others
 and can be ignored or handled locally, letting others to be passed along
 to the caller.
 Under situations that the handling is the same for all exceptions, there
 is no problem in catching them in a single 
\family typewriter
catch (Exception e)
\family default
 block.
 
\end_layout

\begin_layout Standard
Finally, what's the correct way to handle the exception? The most common
 is call
\begin_inset Newline newline
\end_inset


\family typewriter
printStackTrace()
\family default
.
 This is a classic and BAD coding, because the stack trace is logged in
 the debug console (the same output of 
\family typewriter
Vm.debug()
\family default
), and thus the programmer will NOT know that the exception was thrown unless
 he exits the program and looks at the output file (note that in Eclipse
 or any other IDE the 
\family typewriter
printStackTrace()
\family default
 shows up in the console panel, not in the file).
 The ideal is that the exceptions are informed in real time, even if this
 can cause some bad impressions in your costumer.
 
\end_layout

\begin_layout Standard
TotalCross has a method in the 
\family typewriter
MessageBox
\family default
 class that shows the exception in a dialog.
 Its format is shown in the previous example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(e,true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first parameter is the exception itself, and the second parameter indicates
 if
\begin_inset Newline newline
\end_inset


\family typewriter
printStackTrace()
\family default
 should be called.
 This method shows the stack trace on screen, along with the exception's
 class name and a description message, if any.
 You can change the title through the 
\family typewriter
MessageBox.showExceptionTitle
\family default
 member.
\end_layout

\begin_layout Standard
The use of exceptions is one of the most powerful features of Java, and
 can greatly simplify finding errors, if it is used correctly.
\end_layout

\begin_layout Standard
TotalCross has checked and unchecked exceptions.
 The checked exceptions are 
\family typewriter
Exception
\family default
 subclasses and if they might happen in a code block, it must be surrounded
 by a try-catch.
 The unchecked exceptions are 
\family typewriter
RuntimeException
\family default
 subclasses and do not need to be treated.
 The first kind of exceptions are usually errors that occur in a program,
 whereas the second one are usually a programming bug.
\end_layout

\begin_layout Standard
Below there are all TotalCross possible exceptions (except for Litebase
 exceptions) and their description:
\end_layout

\begin_layout Itemize

\family typewriter
Throwable
\family default
 Base class of all Exceptions.
 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Error
\family default
 General Error class.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
NoClassDefFoundError
\family default
 Thrown when a class was not found during the parse of 
\family typewriter
xxx.class
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
NoSuchFieldError
\family default
 Thrown when a field was not found.
 
\end_layout

\begin_layout Itemize

\family typewriter
NoSuchMethodError 
\family default
Thrown when a method was not found.
 
\end_layout

\begin_layout Itemize

\family typewriter
OutOfMemoryError
\family default
 Thrown when no more memory exists to continue the execution of the last
 requested operation.
 You should exit the program immediately.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Exception
\family default
 General exception class.
 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
AddressException
\family default
 Thrown by the 
\family typewriter
Address
\family default
 constructor if the given string address is invalid.
\end_layout

\begin_layout Itemize

\family typewriter
AuthenticationException
\family default
 When an authentication fails.
\end_layout

\begin_layout Itemize

\family typewriter
CryptoException
\family default
 Thrown when something wrong occurs at the cryptographic algorithms.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
NoSuchAlgorithmException
\family default
 This exception is thrown when a particular cryptographic algorithm is requested
 but is not available in the environment.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
ElementNotFoundException
\family default
 Thrown when an element of a 
\family typewriter
Vector
\family default
 or a 
\family typewriter

\begin_inset Newline newline
\end_inset

Hashtable
\family default
 is not found.
 
\end_layout

\begin_layout Itemize

\family typewriter
FTPConnectionClosedException
\family default
 This exception is thrown when a FTP connection is closed, maybe explicitly
 or by timeout.
\end_layout

\begin_layout Itemize

\family typewriter
ImageException
\family default
 This class is used to throw an exception when an image could not be loaded
 for any reason.
 
\end_layout

\begin_layout Itemize

\family typewriter
InstantiationException
\family default
 Thrown when an abstract class or an interface is trying to be 
\family typewriter
Class.newInstance()
\family default
'd.
\end_layout

\begin_layout Itemize

\family typewriter
IntHashtable.DuplicatedKeyException
\family default
 Exception thrown when 
\family typewriter

\begin_inset Newline newline
\end_inset

allowDuplicateKeys
\family default
 is set to 
\family typewriter
false
\family default
 in an 
\family typewriter
IntHashtable
\family default
 and one tries to add a repeated key.
 
\end_layout

\begin_layout Itemize

\family typewriter
InvalidDateException
\family default
 Represents a date that is invalid.
 
\end_layout

\begin_layout Itemize

\family typewriter
InvalidNumberException
\family default
 Thrown when you try to convert a string that does not represents a valid
 number.
 
\end_layout

\begin_layout Itemize

\family typewriter
InvocationTargetException
\family default
 Thrown when using reflection that wraps an exception thrown by an invoked
 method or constructor.
\end_layout

\begin_layout Itemize

\family typewriter
IOException
\family default
 Base class of all input/output exceptions.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
EOFException
\family default
 Signals that an end of file or end of stream has been reached unexpectedly
 during input.
 This exception is mainly used by data input streams to signal end of stream.
 Note that many other input operations return a special value on end of
 stream rather than throwing an exception.
\end_layout

\begin_layout Itemize

\family typewriter
FileNotFoundException
\family default
 Thrown when a file was not found.
\end_layout

\begin_layout Itemize

\family typewriter
IllegalArgumentIOException
\family default
 Illegal argument passed to an IO method.
\end_layout

\begin_layout Itemize

\family typewriter
SocketTimeoutException
\family default
 Thrown when a socket times out in a connect, read, or write operation.
\end_layout

\begin_layout Itemize

\family typewriter
UnknownHostException
\family default
 Thrown when you try to connect to a host that was not found.
 
\end_layout

\begin_layout Itemize

\family typewriter
ZipException
\family default
 Signals that a Zip exception of some sort has occurred.
 
\end_layout

\begin_layout Itemize

\family typewriter
ZLibException
\family default
 May be dispatched by zLib routines.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
MessagingException
\family default
 Thrown when a write operation fails when sending a
\family typewriter

\begin_inset Newline newline
\end_inset

Message
\family default
, or when an unexpected code is received from the remote host.
 
\end_layout

\begin_layout Itemize

\family typewriter
NotSupportedByDeviceException
\family default
 Thrown when something isn't supported on the given device when using PIM.
\end_layout

\begin_layout Itemize

\family typewriter
ReaderException
\family default
 General exception class thrown when something goes wrong during decoding
 of a barcode.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ChecksumException
\family default
 Thrown when a barcode was successfully detected and decoded, but was not
 returned because its checksum feature failed.
\end_layout

\begin_layout Itemize

\family typewriter
FormatException
\family default
 Thrown when a barcode was successfully detected, but some aspect of the
 content did not conform to the barcode's format rules.
\end_layout

\begin_layout Itemize

\family typewriter
NotFoundException
\family default
 Thrown when a barcode was not found in the image.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
SecurityException
\family default
 Used in reflection and is actually never thrown.
 
\end_layout

\begin_layout Itemize

\family typewriter
SOAPException
\family default
 Thrown when a problem when using 
\family typewriter
SOAP
\family default
 occurs.
\end_layout

\begin_layout Itemize

\family typewriter
SQLException
\family default
 Base TDBC exception.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
BatchUpdateException
\family default
 Counts the successful updates in each statement in a batch that was successfull
y updated prior to an error.
\end_layout

\begin_layout Itemize

\family typewriter
SQLWarning
\family default
 A TDBC warning.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
SyntaxException
\family default
 Exception thrown by the 
\family typewriter
XmlTokenizer
\family default
 when a syntax error is found.
\end_layout

\begin_layout Itemize

\family typewriter
WriterException
\family default
 Base class which covers the range of exceptions which may occur when encoding
 a barcode.
\end_layout

\begin_layout Itemize

\family typewriter
XmlRpcException
\family default
 Used to alert the user of xml-rpc errors.
 
\end_layout

\begin_layout Itemize

\family typewriter
ZLibException
\family default
 This exception may be dispatched by zlib routines.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
RuntimeException
\family default
 General runtime exception class.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
AppExitException
\family default
 This exception is thrown when 
\family typewriter
Event.handleOneEvent()
\family default
 encounters an event that requires the application to exit.
 The main purpose of this event is to unwind the stack all the way back
 to the main event loop so that the application can properly exit.
 It is mostly used to exit the VM when a 
\family typewriter
Window
\family default
 is open with the 
\family typewriter
popup()
\family default
 method.
\end_layout

\begin_layout Itemize

\family typewriter
ArithmeticException 
\family default
Thrown when an arithmetic problem occurs, usually a division by zero.
\end_layout

\begin_layout Itemize

\family typewriter
ArrayStoreException
\family default
 Thrown when the source and target arrays are not compatible when using
\family typewriter
 Vm.arrayCopy()
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
AssertionFailedError
\family default
 Exception dispatched when an assertion fails.
 
\end_layout

\begin_layout Itemize

\family typewriter
ClassCastException
\family default
 Thrown when a class is casted to an incompatible class.
 
\end_layout

\begin_layout Itemize

\family typewriter
ClassNotFoundException
\family default
 Thrown when a class is not found.
 Were all required tcz/pdb files installed?
\end_layout

\begin_layout Itemize

\family typewriter
GameEngineException
\family default
 An exception related to a game funcionality in the game engine.
\end_layout

\begin_layout Itemize

\family typewriter
IllegalAccessException
\family default
 Thrown when you try to load a private class using 
\family typewriter
Class.newInstance()
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
IllegalArgumentException 
\family default
Thrown when an illegal argument was passed to a method.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
NumberFormatException
\family default
 Thrown when an invalid number was passed to 
\family typewriter
valueOf()
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
PatternSyntaxException
\family default
 Thrown when 
\family typewriter
Pattern
\family default
 constructor's argument doesn't conform the Perl5 regular expression syntax.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
IllegalStateException
\family default
 Signals that a method has been invoked at an illegal or inappropriate time.
 
\end_layout

\begin_layout Itemize

\family typewriter
IndexOutOfBoundsException
\family default
 Thrown when an index is used outside of the defined bounds.
 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ArrayIndexOutOfBoundsException
\family default
 Thrown when you try to access an array index that is < 0 or >= 
\family typewriter
array.length
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
StringIndexOutOfBoundsException
\family default
 Thrown when you try to create a 
\family typewriter
String
\family default
 using the constructor that receives a byte array, an offset and the length.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
IntHashtable.DuplicatedKeyException
\family default
 Tthrown when 
\family typewriter
IntHashtable.
\begin_inset Newline newline
\end_inset

allowDuplicateKeys
\family default
 is set to 
\family typewriter
false
\family default
 and one tries to insert a duplicated key in the 
\family typewriter
IntHashtable
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
NegativeArraySizeException
\family default
 Thrown when you try to create an array with negative size.
\end_layout

\begin_layout Itemize

\family typewriter
NullPointerException
\family default
 Thrown when a 
\family typewriter
null
\family default
 object has being used in the last operation.
\end_layout

\end_deeper
\end_deeper
\begin_layout Chapter
Exit Codes
\end_layout

\begin_layout Standard
When the VM exits, it returns an exit code.
 Obviously, this chapter only concerns TotalCross applications running on
 Windows 32, iOS, Android, and Windows Phone 8, since on Java SE the TotalCross
 VM is not used.
 
\end_layout

\begin_layout Standard
The codes and their description are:
\end_layout

\begin_layout Itemize
100 If it was not possible to initialize the application current context.
\end_layout

\begin_layout Itemize
101 If it was not possible to load 
\family typewriter
TCBase.tcz
\family default
.
 
\family typewriter
TCBase.tcz
\family default
 was not found or is corrupted.
\end_layout

\begin_layout Itemize
102 If it was not possible to initialize the event handler.
\end_layout

\begin_layout Itemize
103 If it was not possible to load 
\family typewriter
TCUI.tcz
\family default
.
 
\family typewriter
TCUI.tcz
\family default
 was not found or is corrupted.
\end_layout

\begin_layout Itemize
104 If it was not possible to load the application 
\family typewriter
.tcz
\family default
.
 One of the most common errors.
\end_layout

\begin_layout Itemize
105 If the 
\family typewriter
Settings
\family default
 class could not be loaded.
\end_layout

\begin_layout Itemize
106 If it is not possible to run multiple instances of the application and
 the application is already running.
 This only happens on Windows 32.
 One of the most common errors.
\end_layout

\begin_layout Itemize
107 It it was not possible to initialize the graphics before the 
\family typewriter
MainWindow
\family default
 settings is loaded.
 One of the most common errors.
\end_layout

\begin_layout Itemize
108 If it was not possible to retrive the settings.
\end_layout

\begin_layout Itemize
109 If it was not possible to initialize the graphics after the 
\family typewriter
MainWindow
\family default
 settings is loaded.
 
\end_layout

\begin_layout Itemize
111 If the class 
\family typewriter
ras.ActivationClient
\family default
 can' t be loaded or an exception occurs when loading it during the activation
 check.
 Its most probable cause is the corruption of the 
\family typewriter
TCBase.
\begin_inset Newline newline
\end_inset

tcz
\family default
 file.
\end_layout

\begin_layout Itemize
112 If the method 
\family typewriter
getInstance()
\family default
 can't be loaded from the class 
\family typewriter
ras.ActivationClient
\family default
 during the activation check.
 Its most probable cause is the corruption of the 
\family typewriter
TCBase.tcz
\family default
 file.
\end_layout

\begin_layout Itemize
113 If the method 
\family typewriter
getInstance()
\family default
 during the activation check throws an exception.
\end_layout

\begin_layout Itemize
114 If the method 
\family typewriter
isActivatedSilent()
\family default
 can't be loaded from the class 
\family typewriter
ras.
\begin_inset Newline newline
\end_inset

ActivationClient
\family default
 during the activation process.
 Its most probable cause is the corruption of the 
\family typewriter
TCBase.tcz
\family default
 file.
\end_layout

\begin_layout Itemize
115 If an error occurs when loading the TotalCross libraries.
\end_layout

\begin_layout Itemize
116 If the main class could not be loaded (has thrown an exception, was
 not found or is corrupted).
\end_layout

\begin_layout Part
USER INTERFACE
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
The following chapters will introduce you to the main aspects of user interface
 in TotalCross, including graphical interface controls and events support.
\end_layout

\begin_layout Chapter
User Interface styles
\end_layout

\begin_layout Section
List of types
\end_layout

\begin_layout Standard
TotalCross has five look-and-feel types of user interfaces:
\end_layout

\begin_layout Itemize

\family typewriter
Flat
\family default
 – Defines a FLAT user interface style that looks like the Pocket PC look-and-fe
el.
 It's basically the old 
\family typewriter
WinCE
\family default
 style with flat controls.
\end_layout

\begin_layout Itemize

\family typewriter
Vista
\family default
 – Defines a Windows Vista user interface style.
 It's like the Flat style with a shaded background.
 It looks better on 16bpp+.
\end_layout

\begin_layout Itemize

\family typewriter
Android
\family default
 – Defines an Android user interface style.
 Its like the Vista but with round borders.
 Its almost identical to the controls used by the Android platform.
\end_layout

\begin_layout Standard
The style can be switched to by using 
\family typewriter
MainWindow.setUIStyle(int type)
\family default
, and it is platform-idenpendent (can be used in any device of any platform).
 Here is an example of use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Foo extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Foo()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Hi bar", TAB_ONLY_BORDER);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The decision of which user interface to use must be made in the main window's
 constructor.
 If nothing is changed, Vista with a blue background is used.
 Changing the user interface outside the main window's constructor can crash
 your application.
 If you try to change it more than once, a 
\family typewriter
RuntimeException
\family default
 will be thrown.
 The other possible values to 
\family typewriter
type
\family default
 are: 
\family typewriter
Settings.Flat
\family default
, and 
\family typewriter
Settings.Vista
\family default
.
\end_layout

\begin_layout Standard
In the pictures below you can see snapshots of the of the old UIGadgets
 sample running on JDK using different resolutions and user interface styles.
 After each picture you'll find the command line options provided to the
 launcher on each case:
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="50col%">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_Android.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_iPhone.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\align left

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

android
\begin_inset space ~
\end_inset

/uiStyle
\begin_inset space ~
\end_inset

android
\family default
:
\end_layout

\begin_layout Plain Layout
\align left

\size small
Android (320x480x16)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

iPhone
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
iPhone
\begin_inset space ~
\end_inset

(320x480x24)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="50col%">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_Win32.png
	scale 82

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/scr
\begin_inset space ~
\end_inset

Win32
\family default
:
\family typewriter

\begin_inset space ~
\end_inset


\family default
Windows
\begin_inset space ~
\end_inset

32
\begin_inset space ~
\end_inset

(240x320x24)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\align center

\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features tabularvalignment="middle" tabularwidth="100col%">
<column alignment="center" valignment="top" width="50col%">
<column alignment="center" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_uiStyleFlat.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_uiStyleVista.png
	width 40col%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/uiStyle Flat
\family default
: Flat user interface style
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/uiStyle Vista
\family default
: Vista user interface style
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center

\size small
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size small
\begin_inset Graphics
	filename companion_resources/images/companion_UIGadgets_bbStorm.png
	scale 60

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\size small
/penlessDevice
\family default
: Acts as a device without touch screen.
 (notice the highlighted control)
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Support for devices without pen
\end_layout

\begin_layout Standard
The iOS and Android platforms introduced the use of finger instead of pen
 (however, some new Android works better with pens than with finger, such
 as some devices with barcode scanner).
 A finger is much less precise than a pen, thus an algorithm is used to
 locate the closest control.
 These platforms also introduced the concept of drag and flick: drag means
 that you placed your finger in the screen and moved it while pressed, and
 flick means that you suddenly lifted the finger, to continue the scroll
 even while your finger is up.
 The scroll then slows down until a complete stop or if you press the finger
 again.
\end_layout

\begin_layout Standard
TotalCross 1.3 added support for this, activated when you set the user interface
 style to Android or when making 
\family typewriter
Settings.fingerTouch = true
\family default
.
 
\end_layout

\begin_layout Standard
The following controls supports flicking: button menu, grid, list box, list
 container, multi edit, scroll container (and its subtypes), tabbed container,
 and tree.
\end_layout

\begin_layout Standard
When 
\family typewriter
fingerTouch
\family default
 is true, controls that can be flicked replace the scroll bar by a scroll
 position control, which only appears while the control is being scrolled
 or flicked.
\end_layout

\begin_layout Chapter
Font Support
\end_layout

\begin_layout Standard
To keep the user interface consistent across different platforms, TotalCross
 applications uses its own font types instead of using the device's font
 type.
 The basic font type chosen for TotalCross is the Tahoma font, included
 on the SDK as the 
\family typewriter
TCFont.tcz file
\family default
.
 It contains fonts with no size limit, regular and bold.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout
Unicode fonts are not included in the default font file!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The base size of the application's font is defined as 
\family typewriter
Font.NORMAL_SIZE
\family default
, which is a constant initialized at runtime based on the screen resolution.
 This way you may select another size by using a relative value, like 
\family typewriter
Font.NORMAL_SIZE+2
\family default
 (which is equal to 
\family typewriter
Font.BIG_SIZE
\family default
), and the font will be correctly scaled among different resolutions.
 The constants 
\family typewriter
Font.MIN_FONT_SIZE
\family default
 and 
\family typewriter
Font.MAX_FONT_SIZE
\family default
 have the minimum and maximum font size, respectively.
 Their default values are 7 and 80 (48 for Windows 32), respectively, but
 can be changed.
\end_layout

\begin_layout Standard
Finally, 
\family typewriter
Font.TABSIZE
\family default
 is the number of spaces that will drawn when a tab character is found by
 the VM.
 You can define the number of spaces that will be drawn setting this field.
 It defaults to 3, but you can change it at any time.
 
\end_layout

\begin_layout Standard
To create your own font files you may use the 
\family typewriter
FontGenerator
\family default
 (included in the 
\family typewriter
tc.jar
\family default
).
 It creates a compressed file with your own set of bitmap fonts, and supports
 anti-aliased fonts, which makes the font appear rounded and improves legibility.
 The created font must be based on the TrueType fonts.
\end_layout

\begin_layout Standard
Some usage examples (here we assume the 
\family typewriter
tc.jar
\family default
 is in the classpath):
\end_layout

\begin_layout Itemize
Anti-aliased Arial font:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
java tc.tools.FontGenerator Arial /aa
\end_layout

\end_deeper
\begin_layout Itemize
Anti-aliased Arial font, but including only the sizes 12 and 14.
 Reducing the final font file from 158kb to 16kb:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
java tc.tools.FontGenerator Arial /sizes:12,14 /aa /rename:TCFont
\end_layout

\end_deeper
\begin_layout Itemize
Anti-aliased Arial font with Unicode characters up to 1279, but including
 only sizes 20, 24 and 28, and excluding bold fonts:
\end_layout

\begin_deeper
\begin_layout Standard

\family typewriter
java tc.tools.FontGenerator Arial /aa /sizes:20,24,28 /nobold
\begin_inset Newline newline
\end_inset

/rename:TCFont /u 32-255 256-383 402-402 1024-1279
\end_layout

\end_deeper
\begin_layout Standard
To see if the font you created is installed on the target device, query
 its name after the creation.
 If the font is not found, its name is changed to match the default font.
 When the parameter 
\family typewriter
/rename:
\family default
 is used with 
\family typewriter
TCFont
\family default
, the default font is changed to the new created font.
\end_layout

\begin_layout Standard
The default font name used is stored in 
\family typewriter
Font.DEFAULT
\family default
.
 
\end_layout

\begin_layout Standard
Read 
\family typewriter
totalcross.ui.font.Font
\family default
 JavaDoc for more information.
 Check also 
\family typewriter
totalcross.
\begin_inset Newline newline
\end_inset

ui.font.FontMetrics
\family default
.
\end_layout

\begin_layout Chapter
The MainWindow class
\end_layout

\begin_layout Standard
Every TotalCross program must have one and only one class that extends 
\family typewriter
totalcross.ui.
 MainWindow
\family default
.
 It is the interface between the VM and the TotalCross program: it receives
 all events and dispatches them.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Foo extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Foo()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Hi handheld world", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		gradientTitleStartColor = Color.getRGB(88, 130, 239);
\end_layout

\begin_layout Plain Layout

		gradientTitleEndColor = Color.getRGB(10, 36, 106);
\end_layout

\begin_layout Plain Layout

		titleColor = Color.WHITE;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// add controls here
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onExit()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// close stuff here
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The VM first calls the 
\family typewriter
MainWindow
\family default
 default constructor (in this case, 
\family typewriter
Foo()
\family default
) and after that it enqueues a timer event, which will then call the 
\family typewriter
initUI()
\family default
 method (inherited from the class 
\family typewriter
Container
\family default
).
 You 
\emph on
must
\emph default
 initialize all the user interface in the 
\family typewriter
initUI()
\family default
 method.
 Initializing the user interface on the constructor might crash the application,
 and some operations can only be performed after the 
\family typewriter
MainWindow
\family default
's 
\family typewriter
initUI()
\family default
 method is reached.
\end_layout

\begin_layout Standard
The 
\family typewriter
onExit()
\family default
 method is called when the VM exits under normal circumstances , i.e., if
 the user closes the application or the programmer ends the application
 by using 
\family typewriter
exit()
\family default
 or 
\family typewriter
exec()
\family default
, or even when the application is halted by an unhandled exception.
 However, under abnormal circumstances where a fatal error occurs, reseting
 the device, the 
\family typewriter
onExit()
\family default
 method is not called.
 When this is called, all threads are already killed.
 
\end_layout

\begin_layout Standard
To change the font used by all controls created, you must call the method
 
\family typewriter
setDefaultFont()
\family default
 on the 
\emph on
first line
\emph default
 of the 
\family typewriter
MainWindow
\family default
's constructor.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If you're going to set the 
\family typewriter
MainWindow
\family default
's title and/or style, you should use 
\family typewriter
super(title, style)
\family default
 instead of the methods 
\family typewriter
setTitle()
\family default
 and 
\family typewriter
setBorderStyle()
\family default
 to improve performance.
 However, you can't use 
\family typewriter
super()
\family default
 and 
\family typewriter
setDefaultFont()
\family default
 together because both must be the on first line of the constructor.
 That means you'll have to use 
\family typewriter
setTitle()
\family default
 and 
\family typewriter
setBorderStyle()
\family default
 instead of 
\family typewriter
super(title, style)
\family default
 to be able to use 
\family typewriter
setDefaultFont()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The style can be: 
\family typewriter
Window.NO_BORDER
\family default
, 
\family typewriter
Window.RECT_BORDER
\family default
, 
\family typewriter
Window.ROUND_BORDER
\family default
, 
\family typewriter
Window.TAB_BORDER
\family default
, or 
\family typewriter
Window.TAB_ONLY_BORDER
\family default
.
\end_layout

\begin_layout Section
The Application lifecycle
\end_layout

\begin_layout Standard
The application on TotalCross has a predefined life cycle, handled by methods
 defined in 
\family typewriter
MainWindow
\family default
:
\end_layout

\begin_layout Enumerate

\family typewriter
initUI()
\family default
: called when the application starts.
\end_layout

\begin_layout Enumerate

\family typewriter
onMinimize()
\family default
: called when the user press the home key, or when a call is received, or
 when the screen turns off.
 On Android and Windows 32, the application execution is not paused.
 On Windows Phone 8 and iOS, it is paused.
 
\end_layout

\begin_layout Enumerate

\family typewriter
onResume()
\family default
: called after the call ends, the screen is turned on again, or the program
 was exited softly on Android.
 It is also called again if the user clicks on the application icon on Android
 and iOS.
 On WP8, it is necessary to press back in the main menu and click on the
 opened application.
 Clicking on its icon in the list of applications will kill the current
 instance and relaunches it again.
\end_layout

\begin_layout Enumerate

\family typewriter
onExit()
\family default
: called when the system decides that is time to finish the application.
 If the home key was pressed, this method is called when another TotalCross
 application is launched on Android if the application is not installed
 as a single package.
 
\end_layout

\begin_layout Standard
If the user press the home key and then forces the application to stop (by
 going to the Settings / Applications) on Android and iOS, then all Litebase
 tables may be corrupted (actually, no data is lost, but a 
\family typewriter
TableNotClosedException
\family default
 will be issued).
 So, it's a good thing to call 
\family typewriter

\begin_inset Newline newline
\end_inset

LitebaseConnection.closeAll()
\family default
 in your Litebase instances in the 
\family typewriter
onMinimize()
\family default
 method and recover them in the 
\family typewriter
onResume()
\family default
 method.
 Just remember that all prepared statements, row iterators and result sets
 will be invalid and can't be reused.
 Notice that the application might also be killed by the system if it's
 on background.
\end_layout

\begin_layout Standard
On WP8, there is no way to kill an application.
 To kill it, you must restore it pressing back in the main menu and them
 openning the application again.
 Then, press back until finishing the application.
\end_layout

\begin_layout Standard
It is also a good practice to save all necessary data and application state
 so that the when the user goes back to the application it won't need to
 do a task again, such as entering data again in a form which was lost when
 the application was closed by the system.
 Of course there are situations where the user must retype data, such as
 login and password and when using bank applications.
\end_layout

\begin_layout Standard
Remember that applications for Android, iOS, and Windows Phone 8 shouldn't
 have an exit button or an exit option in the menu.
 The application should be designed to be opened all the time and only the
 system should close it when needed.
 Again, there are exceptions, for example when the user doesn't agree with
 an eula and the application can't continue running.
\end_layout

\begin_layout Standard
Finally, it is a good idea to map the device back key on Android and WP8
 to go back to the last window/menu used.
 Just remember that on WP8 back is back, you just can use it to go back
 to the last screen used.
 On the first screen, back should exit the application.
 The only exception are games, where back during a game play goes to the
 pause window.
 
\end_layout

\begin_layout Standard
To know more detais about 
\family typewriter
totalcross.ui.MainWindow
\family default
, read its JavaDocs.
\end_layout

\begin_layout Chapter
Adding Controls
\end_layout

\begin_layout Standard
The class 
\family typewriter
totalcross.ui.Control
\family default
 is the base class of all user interface controls, like buttons and labels.
\end_layout

\begin_layout Standard
Controls must be added to a 
\family typewriter
Container
\family default
 or one of its subclasses, like 
\family typewriter
MainWindow
\family default
.
 This container is referred as the parent of the control.
 To set the control bounds in the container, you can use the method 
\family typewriter
setRect(x,y,width,height)
\family default
.
\end_layout

\begin_layout Section
Relative positioning
\end_layout

\begin_layout Standard
TotalCross lets you place controls in two ways:
\end_layout

\begin_layout Standard
The hard and 
\emph on
wrong
\emph default
 way, by setting the control bounds with numbers.
 
\begin_inset Newline newline
\end_inset

E.g.: 
\family typewriter
control.setRect(10,10,80,12);
\end_layout

\begin_layout Standard
The smart way, by using constants for relative coordinates.
 The idea of the relative positioning is to let the programmer concentrate
 mainly on the position and let the sizes be computed automatically.
 The constants are:
\end_layout

\begin_layout Subsection*
Coordinate X
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
LEFT
\family default
 places the control at the position 0 horizontal.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the left of the window’s client rect.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
RIGHT
\family default
 aligns the control at the right.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the right of the window’s client rect (relative
 to the screen).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
RIGHT_OF
\family default
 aligns the control at the right of the last control (relative to a control).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
CENTER
\family default
 centers horizontally the control in the container (relative to the screen).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
CENTER_OF
\family default
 centers horizontally based on the last control's width (relative to a control).
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
BEFORE
\family default
 places the control before the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
AFTER
\family default
 places the control after the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
SAME
\family default
 places the control at the same x coordinate of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring CENTER.OF00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Coordinate Y
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
TOP
\family default
 places the control at position 0 vertical.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the top of the window’s client rect.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
BOTTOM
\family default
 places the control at the bottom of the container.
 If the parent is a 
\family typewriter
Window
\family default
, aligns the control at the bottom of the window’s client rect.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
CENTER
\family default
 centers vertically the control in the container.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
CENTER_OF
\family default
 centers vertically based on the last control's height.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
BEFORE
\family default
 places the control before the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
AFTER
\family default
 places the control after the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
SAME
\family default
 places the control at the same y coordinate of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
BOTTOM_OF
\family default
 aligns the control at the bottom of the last control.
\end_layout

\begin_layout Labeling
\labelwidthstring BOTTOM.OF00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Width
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
PREFERRED
\family default
 lets the control determine its best width.
 This is normally computed using the control’s text width in the selected
 font.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
FILL
\family default
 the control’s width will fill the space left until the end of the container.
 Cannot be used with 
\family typewriter
RIGHT
\family default
/
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SAME
\family default
 sets the control's width with the same width of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
FIT
\family default
 sets the control's width to fit between the specified x position and the
 last control added x position.
 For example, if you place a label at 
\family typewriter
LEFT
\family default
, a button at 
\family typewriter
RIGHT
\family default
 and want to place an edit between those two controls, use 
\family typewriter
FIT
\family default
 as the control's width using the 
\family typewriter
L
\family default
abel as relative control.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SCREENSIZE
\family default
 computes the width as a percentage of the screen's size (width).
 The percentage is passed as a number with + sign.
 E.G.: 
\family typewriter
SCREEN_SIZE+20
\family default
 will take the width as 20% of the screens size.
 Note that the size will change when the device is rotated.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
WILL_RESIZE
\family default
 sets that the width will be resized later, when all controls were added.
 You cannot use 
\family typewriter
RIGHT
\family default
 or 
\family typewriter
CENTER
\family default
 for placing controls when using 
\family typewriter
WILL_RESIZE
\family default
.
 After all items were added, call the 
\family typewriter
resizeWidth()
\family default
 method.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
PARENTSIZE 
\family default
computes the width as a percentage of the parent control size (will use
 parent's width).
 If the parent is unknown, the screen size will be used instead.
 
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SCREENSIZEMIN
\family default
 uses screen's minimum size between width and height.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SCREENSIZEMAX
\family default
 uses screen's maximum size between width and height.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Height
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
PREFERRED
\family default
 lets the control determine its best height.
 This is normally computed using the control’s text height in the selected
 font.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
FILL
\family default
 the control’s height will fill the space left until the end of the container.
 Cannot be used with 
\family typewriter
BOTTOM
\family default
/
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SAME
\family default
 sets the control's height with the same height of the last control added.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
FIT
\family default
 sets the control's height to fit between the specified y position and the
 last control added y position.
 For example, if you place a button at 
\family typewriter
TOP
\family default
, a label at 
\family typewriter
BOTTOM
\family default
, and want to place a list box between both, use 
\family typewriter
FIT
\family default
 as the control's height using the button as relative control.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SCREENSIZE
\family default
 computes the height as a percentage of the screen's size (height).
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
WILL_RESIZE
\family default
 sets that the height will be resized later, when all controls were added.
 You cannot use 
\family typewriter
BOTTOM
\family default
 or 
\family typewriter
CENTER
\family default
 for placing controls when using 
\family typewriter
WILL_RESIZE
\family default
.
 After all items were added, call the 
\family typewriter
resizeHeight()
\family default
 method.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
KEEP
\family default
 keeps the last position used.
 To be used with 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
PARENTSIZE 
\family default
computes the height as a percentage of the parent control size (will use
 parent's height).
 If the parent is unknown, the screen size will be used instead.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SCREENSIZEMIN
\family default
 uses screen's minimum size between width and height.
\end_layout

\begin_layout Labeling
\labelwidthstring SCREENSIZEMIN00

\family typewriter
SCREENSIZEMAX
\family default
 uses screen's maximum size between width and height.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
Before calling 
\family typewriter
setRect()
\family default
, the control must be added to the container and have its characteristics
 (like font, border type, etc) set.
 This is needed because the control position is computed based on its parent
 container and the control's size is computed based on its characteristics.
 And all this is computed at 
\family typewriter
setRect()
\family default
.
\end_layout

\begin_layout Itemize
The control's coordinates are always relative to its parent coordinates.
\end_layout

\begin_layout Itemize
If you use 
\family typewriter
LEFT
\family default
/
\family typewriter
TOP
\family default
/
\family typewriter
RIGHT
\family default
/
\family typewriter
BOTTOM
\family default
 with the first control added to a window, it will use the coordinates of
 the window’s client rect, which are the container's area excluding the
 title and the borders, if any.
\end_layout

\begin_layout Itemize
You cannot use 
\family typewriter
FIT
\family default
 in both width/height.
 It won't work as expected because you can't specify two controls to make
 it relative to.
 The width/height is always related to the last control added.
\end_layout

\begin_layout Itemize
See the sources for the controls 
\family typewriter
ColorChooserBox
\family default
, 
\family typewriter
NumericBox
\family default
, and 
\family typewriter
TimeBox
\family default
 to learn how to use 
\family typewriter
WILL_RESIZE
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The use of relative positioning is 
\emph on
highly
\emph default
 recommended.
 It makes the program portable between different resolutions and fonts.
\end_layout

\begin_layout Section
Making UI adjustments
\end_layout

\begin_layout Standard
The constants described above have one important feature: a variable or
 a number can be used to increment/decrement the result value.
 Examples: 
\family typewriter
CENTER+2
\family default
, 
\family typewriter
BOTTOM-5
\family default
, 
\family typewriter
PREFERRED+4
\family default
, 
\family typewriter
FILL+2
\family default
, 
\family typewriter
BEFORE-5
\family default
.
 This value cannot be higher than 5, otherwise your interface will not be
 properly shown in other resolutions.
 Using something like 
\family typewriter
LEFT+10
\family default
 or 
\family typewriter
BOTTOM-15
\family default
 is as bad as using absolute values.
\end_layout

\begin_layout Standard
However, these values suffer a problem: a pixel's size may vary depending
 on the screen's density (also known as DPI).
 So, 4 may be good at a 240x320 screen, but too small in a 600x1024 tablet.
\end_layout

\begin_layout Standard
To bypass these limitations, we introduced a way to compute that adjustment
 based on the current's font size instead of a fixed pixel value.
 To enable it, you must set the following property at the application's
 static initializer:
\begin_inset Newline newline
\end_inset


\family typewriter
Settings.uiAdjustmentsBasedOnFontHeight = true;
\end_layout

\begin_layout Standard
After doing this, the adjustment you make will be a percentage of the font's
 height.
 So, 
\family typewriter
AFTER+50
\family default
 is 
\family typewriter
AFTER+
\family default
(50% of font's height), 
\family typewriter
PREFERRED+20
\family default
 is 
\family typewriter
PREFERRED+(
\family default
20% of font's height), and so on.
\end_layout

\begin_layout Standard
However, this feature is not supported by all controls.
 To disable this feature for a particular control the property 
\family typewriter
uiAdjustmentsBasedOnFontHeightIsSupported
\family default
 is set to 
\family typewriter
false
\family default
 in the class constructor.
\end_layout

\begin_layout Standard
The controls can be traversed using the 5-way navigation present on most
 PDAs and Smartphones.
 It is automatically activated on penless devices, but can be activated
 on pen devices by setting the property 
\family typewriter
Settings.keyboardFocusTraversable
\family default
 to 
\family typewriter
true
\family default
.
 Controls are traversed according to the order of elements in the field
 
\family typewriter
Container.tabOrder
\family default
.
 The controls are added to the vector in the order as they are added to
 the container.
 This may not be optimal; you may assign a new order by adding the controls
 to the vector:
\end_layout

\begin_layout Standard

\family typewriter
this.tabOrder = new Vector(new Object[]{ed1,btn1,btn2,ed2});
\end_layout

\begin_layout Section
Useful members
\end_layout

\begin_layout Standard
More details and more members can be found in the 
\family typewriter
totalcross.ui.Control
\family default
 JavaDoc.
\end_layout

\begin_layout Itemize

\family typewriter
FontMetrics
\begin_inset space ~
\end_inset

fm
\family default
 The 
\family typewriter
FontMetrics
\family default
 object created from the control’s assigned 
\family typewriter
Font
\family default
.
 Always recreated when the font changes.
 
\end_layout

\begin_layout Itemize

\family typewriter
int
\begin_inset space ~
\end_inset

appId
\family default
 A public variable that can be assigned by the application with any value.
 For example, the 
\family typewriter
Keyboard
\family default
 class uses this to store the 
\family typewriter
PushButtonGroup
\family default
 index and discover which one of the five had issued the event.
\end_layout

\begin_layout Itemize

\family typewriter
Object
\begin_inset space ~
\end_inset

appObj
\family default
 Same of 
\family typewriter
appId
\family default
, but it's an 
\family typewriter
Object
\family default
 instead of an 
\family typewriter
int
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
int
\begin_inset space ~
\end_inset

clearValueInt
\family default
 Value used to clear a control that uses an index as the active value.
 The default is: 0.
\end_layout

\begin_layout Itemize

\family typewriter
String
\begin_inset space ~
\end_inset

clearValueStr
\family default
 Value used to clear a control that uses a string as the active value.
 The default is an empty string: “”.
\end_layout

\begin_layout Itemize

\family typewriter
isHighlighting
\family default
 If 
\family typewriter
true
\family default
, the user is using the arrows to navigate across the controls, that is
 the keyboard arrows will be used to highlight the controls until one is
 selected.
 If 
\family typewriter
false
\family default
, the currently focused control is using the keys for its own purposes.
 If the device is penless and the control is lost, try setting this to 
\family typewriter
true
\family default
.
\begin_inset Newline newline
\end_inset

Setting this to 
\family typewriter
true
\family default
 will cause the 
\family typewriter
KeyEvent
\family default
 to be intercepted and handled by the method
\family typewriter

\begin_inset Newline newline
\end_inset

changeHighlighted()
\family default
.
 When the user press the ACTION (or ENTER) key to use the control, this
 flag is set to 
\family typewriter
false
\family default
 and the focus will be set to the control, so it be able to use the arrows
 to navigate inside it.
 The control must then set this to 
\family typewriter
true
\family default
 when finish using it or press the ACTION button again (which then sets
 the flag to 
\family typewriter
true
\family default
).
 
\end_layout

\begin_layout Itemize

\family typewriter
setRect(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height)
\family default
 Sets the control bounds with the given parameters.
 If relative coordinates are used, they will be relative to the last added
 control.
\end_layout

\begin_layout Itemize

\family typewriter
setRect(Rect
\begin_inset space ~
\end_inset

r)
\family default
 Same as 
\family typewriter
setRect(r.x, r.y, r.width, r.height)
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
setRect(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

relative)
\family default

\begin_inset Newline newline
\end_inset

Same as the first one, but coordinates will be relative to the given control
 instead of the last one added.
\end_layout

\begin_layout Itemize

\family typewriter
setRect(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

relative,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

screenChanged)
\family default
 Same as above, but with the parameter 
\family typewriter
screenChanged
\family default
, which indicates that a screen change (resize, collapse) occured and the
 
\family typewriter
reposition()
\family default
 method is calling this method.
 Set by the system.
 If you call this method directly, always pass 
\family typewriter
false
\family default
 to it.
 
\end_layout

\begin_layout Itemize

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, PREFERRED, PREFERRED);
\end_layout

\begin_layout Itemize

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

Control
\begin_inset space ~
\end_inset

relative)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, PREFERRED, PREFERRED, relative);
\end_layout

\begin_layout Itemize

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, width, height);
\end_layout

\begin_layout Itemize

\family typewriter
add(Control
\begin_inset space ~
\end_inset

control,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height,
\begin_inset Newline newline
\end_inset

Control
\begin_inset space ~
\end_inset

relative)
\family default
 Same as:
\family typewriter

\begin_inset Newline newline
\end_inset

add(control);
\begin_inset Newline newline
\end_inset

control.setRect(x, y, width, height, relative);
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The last four methods are useful when you’re adding controls that do not
 need to have any of its characteristics (like font or border) changed.
 Changing the control's characteristics 
\emph on
after
\emph default
 those methods will give you unpredictable results.
 This happens because the control does not reposition/resize itself when
 you change its characteristics (just as an example, suppose that the default
 font has 11 in height, and you add the control; then you change the font
 to one with height 22; the control will not be resized and you'll see only
 half of the text).
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
addTimer(int
\begin_inset space ~
\end_inset

millis)
\family default
 Calls 
\family typewriter
MainWindow.addTimer()
\family default
 to add a timer whose target is this control.
 Each time the timer ticks, a TIMER event will be posted to the control.
 The timer does not interrupt the program during its execution at the timer
 interval, it is scheduled along with application events.
 The 
\family typewriter
Timer
\family default
 object returned from this method can be passed to 
\family typewriter
removeTimer()
\family default
 to remove the timer.
 On Windows, the timer has a minimum resolution of 55 ms due to the native
 Windows system clock resolution of 55 ms.
 On the other platforms, the minimum timer resolution is 10 ms.
 
\begin_inset Newline newline
\end_inset

If the control that holds the timer is removed from screen, the timer is
 also disabled.
 Consider using the dispatch-listener event model (
\family typewriter
addTimerListener()
\family default
) instead of creating a control just to catch the event (if this is the
 case).
 
\end_layout

\begin_layout Itemize

\family typewriter
removeTimer(Timer
\begin_inset space ~
\end_inset

timer)
\family default
 Calls 
\family typewriter
MainWindow.removeTimer()
\family default
 to remove a timer associated with this control.
 Removes a timer from a control.
 
\family typewriter
true
\family default
 is returned if the timer was found and removed and 
\family typewriter
false
\family default
 is returned if the timer could not be found (meaning it was not active).
\end_layout

\begin_layout Itemize

\family typewriter
getX()
\family default
,
\family typewriter

\begin_inset space ~
\end_inset

getY()
\family default
,
\family typewriter

\begin_inset space ~
\end_inset

getWidth()
\family default
,
\family typewriter

\begin_inset space ~
\end_inset

getHeight()
\family default
 Returns the control’s bounds.
\end_layout

\begin_layout Itemize

\family typewriter
getX2()
\family default
,
\family typewriter

\begin_inset space ~
\end_inset

getY2()
\family default
 Returns 
\family typewriter
x+width-1
\family default
 and 
\family typewriter
y+height-1
\family default
, respectively.

\family typewriter
 
\end_layout

\begin_layout Itemize

\family typewriter
getParentWindow()
\family default
 Returns the parent window of this control.
 This is needed because the control’s parent may be a container, whose parent
 may be another container, and so on.
 It returns 
\family typewriter
null
\family default
 if there's no parent (e.
 g.: control still not added to any container).
 If this control is a window, will return itself.
\end_layout

\begin_layout Itemize

\family typewriter
repaint()
\family default
 Marks the control for repaint.
 When you call 
\family typewriter
repaint()
\family default
, the absolute area of the control regarding its parent window is invalidated
 (marked for repaint); then, the next time an event (a keypress, a timer,
 a pen event) occurs, the screen is updated.
 If you call 
\family typewriter
repaint()
\family default
 and the control isn't effectively repainted, you can use the 
\family typewriter
repaintNow()
\family default
 method.
 
\begin_inset Newline newline
\end_inset

If you want to avoid a method call, you can do 
\family typewriter
Window.needsPaint = true;
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
repaintNow()
\family default
 Redraws the control immediately.
 If this control is a window, the whole window area is marked for repaint
 (useful if you're removing some controls from a container) .
\end_layout

\begin_layout Itemize

\family typewriter
setEnabled(boolean
\begin_inset space ~
\end_inset

enabled)
\family default
 Enables/disables the control to receive events.
 The control’s appearance is also changed to reflect the state.
\end_layout

\begin_layout Itemize

\family typewriter
setBackColor(int
\begin_inset space ~
\end_inset

back)/getBackColor()
\family default
 Gets or sets the background color for the control.
\end_layout

\begin_layout Itemize

\family typewriter
setForeColor(int
\begin_inset space ~
\end_inset

fore)/getForeColor()
\family default
 Gets or sets the foreground color for the control.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
getForeColor()
\family default
 and 
\family typewriter
getBackColor()
\family default
 returns the color depending if the control’s state is enabled or disabled.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
clear()
\family default
 The clear method in this class is a placeholder for the other controls.
 It implements an easy way to clear all the controls in the screen.
 When you call the clear method of a container or a window, it recursively
 calls the clear method of all child controls.
 Each control will use 
\family typewriter
clearValueInt()
\family default
 or 
\family typewriter
clearValueStr()
\family default
 (both defined in this class) as the clear value, depending on the characteristi
cs of the control.
 For example, a 
\family typewriter
ListBox
\family default
 will use the 
\family typewriter
clearValueInt()
\family default
 to set it as the selected index, while an 
\family typewriter
Edit
\family default
 will use the 
\family typewriter
clearValueStr()
\family default
 as the text inside.
 If you want to change the clear value, just assign a new value to one of
 these two fields.
\end_layout

\begin_layout Itemize

\family typewriter
reposition()
\family default
 Repositions the control after something has been changed.
 This method is called by the VM to reposition all controls on screen when
 a rotation occurs.
 It calls again 
\family typewriter
setRect()
\family default
 with the original parameters.
 
\end_layout

\begin_layout Itemize

\family typewriter
onPaint(Graphics
\begin_inset space ~
\end_inset

g)
\family default
 This is the method called when the control is going to be painted.
 You can use the given 
\family typewriter
Graphics
\family default
 object to draw what you need on screen.
 The default's control font is already set, and the clipping is also set
 to the control's bounds.
 When this method is called, the 
\family typewriter
Graphics
\family default
 object passed has been translated into the coordinate system of the control
 and the area behind the control has already been painted.
 
\end_layout

\begin_layout Itemize

\family typewriter
onBoundsChanged()
\family default
 Called after the user invoked the 
\family typewriter
setRect()
\family default
 method.
 Good to compute positions that are dependant on the bounds.
\end_layout

\begin_layout Itemize

\family typewriter
onWindowPaintFinished()
\family default
 Every time 
\family typewriter
_doPaint()
\family default
 finishes paintings all controls, this method is called.
 You can then do actions needed after the screen has finished the paint.
 Note that this method is only called on controls that extends window and
 on the focused control.
\end_layout

\begin_layout Chapter
Events
\end_layout

\begin_layout Standard
Events represent all activity that goes on between the user and the application.
 When the user interacts with a program, the VM creates an event representing
 the action and communicates these actions to the programs using events.
\end_layout

\begin_layout Standard
This chapter is organized into the following sections to provide a quick
 start on event handling in TotalCross:
\end_layout

\begin_layout Description
Control
\begin_inset space ~
\end_inset

Events briefly explains the basic types of events handled by controls.
\end_layout

\begin_layout Description
Handling
\begin_inset space ~
\end_inset

Events explains the event-handling models available in TotalCross.
\end_layout

\begin_layout Description
The
\begin_inset space ~
\end_inset

Event
\begin_inset space ~
\end_inset

class describes this class in more detail.
\end_layout

\begin_layout Standard
If you're new to TotalCross and want to get things started quickly, skip
 the Delegation Event Model in section two – “Handling Events”.
\end_layout

\begin_layout Standard
If you're familiar with TotalCross and wants to know more about events,
 make sure you understand both event-handling models.
\end_layout

\begin_layout Section
Control Events
\end_layout

\begin_layout Standard
There are two basic types of events: pen events and key events.
 These events are handled by the window, which creates a new event of the
 proper type (pen event or key event) and forwards it to the target control.
 These events are handled by the control, which may convert them to other
 events, defined on the class 
\family typewriter
ControlEvent
\family default
.
\end_layout

\begin_layout Standard
Below we can see how each event defined on 
\family typewriter
ControlEvent
\family default
 is handled by each control:
\end_layout

\begin_layout Description

\family typewriter
\series medium
CURSOR_CHANGED
\family default
 
\series default
event sent when user calls 
\family typewriter
Edit.setCursorPos()
\family default
.
\end_layout

\begin_layout Description

\family typewriter
\series medium
PRESSED
\family default
\series default
 this event is posted by controls when they receive a 
\family typewriter
PEN_DOWN
\family default
 (like check, radio, tab panel), and a 
\family typewriter
PEN_UP
\family default
 (button, list box, push button group, scrollBar) or even a 
\family typewriter

\begin_inset Newline newline
\end_inset

WINDOW_CLOSED
\family default
 (comboBox).
\end_layout

\begin_layout Description

\family typewriter
\series medium
FOCUS_IN
\family default
\series default

\begin_inset space ~
\end_inset


\series medium
and
\begin_inset space ~
\end_inset


\family typewriter
FOCUS_OUT
\family default
\series default
 posted by the window when a control different from the current one is clicked.
 The 
\family typewriter
FOCUS_OUT
\family default
 is first posted to the old control, and the event 
\family typewriter
FOCUS_IN
\family default
 is then posted to the new control.
\end_layout

\begin_layout Description

\family typewriter
\series medium
TIMER
\family default
\series default
 this is a special event that is posted to the control that has a timer
 assigned to it; it is called when the timer countdown has reached zero.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
WINDOW_CLOSED
\family default
\series default
 posted by the unpop method to notify all controls that a window has been
 closed.
 Some controls, like combo box, has a pop list assigned to it; when the
 pop list issues a 
\family typewriter
WINDOW_CLOSED
\family default
 event, the combo box receives it and converts to a 
\family typewriter
PRESSED
\family default
 event.
\end_layout

\begin_layout Description

\family typewriter
\series medium
SIP_CLOSED
\family default
 
\series default
The event type fot the SIP being closed by the system.
 Works on Android and iOS.
 The application cannot see this event since it is interpected by the topmost
 window.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
HIGHLIGHT_IN
\family default

\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset


\family typewriter
HIGHLIGHT_OUT
\family default
\series default
 these events are posted by the window when the user changes the focus to
 another control and the field 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

keyboardFocusTraversable
\family default
 is set to 
\family typewriter
true
\family default
.
 The 
\family typewriter
HIGHLIGHT_OUT
\family default
 event is first posted to the old control, and the event 
\family typewriter
HIGHLIGHT_IN
\family default
 is then posted to the new control.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The field 
\family typewriter
Settings.keyboardFocusTraversable
\family default
 default value is 
\family typewriter
true
\family default
 for penless devices and 
\family typewriter
false
\family default
 for touchscreen devices.
 You may set it to 
\family typewriter
true
\family default
 on touchscreen devices to allow navigation through arrow keys.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Take a look at 
\family typewriter
totalcross.ui.event.ControlEvent
\family default
 JavaDoc for more details.
\end_layout

\begin_layout Standard
Some controls have its own event class.
 They are 
\family typewriter
Animation
\family default
, 
\family typewriter
Grid
\family default
, and 
\family typewriter
ListContainer
\family default
.
 Take a look at 
\family typewriter
totalcross.game.AnimationEvent
\family default
, 
\family typewriter
totalcross.ui.event.GridEvent
\family default
, and 
\family typewriter
totalcross.ui.event.ListContainerEvent
\family default
 JavaDocs for more details about their respectively event classes.
\end_layout

\begin_layout Standard
Take a look also at 
\family typewriter
totalcross.ui.event.EnabledStateChangeEvent
\family default
 JavaDocs.
 This class represent an event generated when the enabled status of a control
 changes.
 This will occur when the method 
\family typewriter
setEnabled()
\family default
 is issued.
\end_layout

\begin_layout Section
Event Handling
\begin_inset CommandInset label
LatexCommand label
name "sec:Event-Handling"

\end_inset


\end_layout

\begin_layout Standard
TotalCross implements two event-handling models.
\end_layout

\begin_layout Subsection
Inheritance Event Model
\end_layout

\begin_layout Standard
Similar to the Java 1.0 event model, this approach requires you to subclass
 UI components and override the event handling method – 
\family typewriter
onEvent(Event e)
\family default
 – in order to catch and process UI events.
 When a control posts an event (using the 
\family typewriter
postEvent()
\family default
 method) it is propagated sequentially up the UI hierarchy until it is either
 consumed, or the root of the hierarchy is reached.
\end_layout

\begin_layout Standard
If we have a button inside a tab panel in a window, and this button receives
 an event, the event is propagated up the hierarchy:
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 20col%
\end_inset


\family typewriter
Window.onEvent()
\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 29col%
\end_inset


\begin_inset Formula $\nwarrow$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 24col%
\end_inset


\family typewriter
TabPanel.onEvent()
\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 33col%
\end_inset


\begin_inset Formula $\nwarrow$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 28col%
\end_inset


\family typewriter
Container.onEvent()
\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 37col%
\end_inset


\begin_inset Formula $\nwarrow$
\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset space \hspace*{}
\length 34col%
\end_inset


\family typewriter
Button.onEvent()
\family default
 
\begin_inset Formula $\Longleftarrow$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After handling the event, you can break the event propagation by setting
 the 
\family typewriter
Event.consumed
\family default
 field to 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Standard
Here's a simple example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button pushB;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(pushB = new Button("Push me
\backslash
nPlease"), CENTER, TOP);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		switch (event.type)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

				if (event.target == pushB)
\end_layout

\begin_layout Plain Layout

					// handle pushB being pressed
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
Disabled controls can only post 
\family typewriter
TIMER
\family default
 events.
 The method 
\family typewriter
postEvent()
\family default
 returns immediately if the control is not enabled and the type of the event
 received is not 
\family typewriter
TIMER
\family default
.
 The only exception to this occurs on fingertouch devices, to allow the
 flick stop or start when a 
\family typewriter
PEN_DOWN
\family default
 occurs in a disabled control.
\end_layout

\begin_layout Itemize
The event propagation stops if the control is moved to another container.
 For example, when you pop up the keyboard, the target edit is removed from
 its parent and added to the keyboard window; at this time, the event propagatio
n (of the key event) stops.
\end_layout

\begin_layout Itemize
The 
\family typewriter
MainWindow
\family default
 does not receive an event posted by a control in a popup window.
 The only exception for this is the 
\family typewriter
WINDOW_CLOSED
\family default
, which is posted to the window that popped it.
\end_layout

\begin_layout Itemize
A control that is not added to a container (or any parent of its container
 is not added to a window) will never receive events nor be repainted.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Small programs can handle the events by implementing the 
\family typewriter
onEvent()
\family default
 method in the
\family typewriter

\begin_inset Newline newline
\end_inset

MainWindow
\family default
 class, but it can become confusing if the program gets bigger.
 An alternative is to create classes that extend 
\family typewriter
Container
\family default
 and swap them on the 
\family typewriter
MainWindow
\family default
 as the user navigates through the program.
 Each class implementing the 
\family typewriter
onEvent()
\family default
 method will have to handle its own events.
\end_layout

\begin_layout Subsection
Delegation Event Model
\end_layout

\begin_layout Standard
Similar to the event model introduced by Java 1.1, but this approach solves
 some limitations of the Inheritance Event Model, which are:
\end_layout

\begin_layout Itemize
To be able to handle events, a class must subclass 
\family typewriter
Control
\family default
 and implement the 
\family typewriter
onEvent()
\family default
 method.
\end_layout

\begin_layout Itemize
Since all event types are filtered through the 
\family typewriter
onEvent()
\family default
 method, the method is executed whenever the control receives an event,
 regardless of its type.
 If a particular event type is ignored by the whole program, it will never
 be handled and consumed.
 Instead, it will keep going up on the hierarchy until it reaches the root,
 wasting resources in the process.
 The only way to avoid it – handling all event types, consuming events that
 are no handled anywhere on the program as soon as they are received – is
 discouraged and can lead to complex and error-prone code.
\end_layout

\begin_layout Itemize
Events are supposed to be handled only by the control that receives the
 event.
 Handling events received by a control in another class is a hard task.
 An example is the tooltip control, which works by handling the pen events
 received by the control it refers to.
\end_layout

\begin_layout Standard
In this model, an event is propagated from a “source” object to a “listener”
 object by invoking a method on the listener.
 and passing in the instance of the event subclass, which defines the event
 type generated.
\end_layout

\begin_layout Standard
A listener is an object that implements a specific 
\family typewriter
EventListener
\family default
 interface.
 An 
\family typewriter

\begin_inset Newline newline
\end_inset

EventListener
\family default
 interface defines one or more methods which are to be invoked by the event
 source in response to each specific event type handled by the interface.
\end_layout

\begin_layout Standard
An event source is an object which originates events.
 The source defines the set of events it emits by providing a set of 
\family typewriter
add<EventType>Listener(<EventType>Listener)
\family default
 methods which are used to register specific listeners for those events.
\end_layout

\begin_layout Standard
Here's the same example, using an 
\family typewriter
EventListener()
\family default
 instead of overriding 
\family typewriter
onEvent()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button pushB;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(pushB = new Button("Push me
\backslash
nPlease"), CENTER, TOP);
\end_layout

\begin_layout Plain Layout

		pushB.addPressListener(
\end_layout

\begin_layout Plain Layout

			new PressListener()
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				public void controlPressed(ControlEvent e)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					// handle pushB being pressed
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Creating listeners using the new 
\family typewriter
<EventType>Listener
\family default
, as indicated above, makes your program bigger and should be used with
 care.
 If you will add listeners of the same event type to many controls, implement
 the listener in the class like this:
\family typewriter

\begin_inset Newline newline
\end_inset

public class MyProgram extends MainWindow implements PressListener
\end_layout

\end_inset


\end_layout

\begin_layout Section
The Event class
\end_layout

\begin_layout Standard
Let's now look at the details of each event class.
 TotalCross has ten event classes in the 
\family typewriter
totalcross.
\begin_inset Newline newline
\end_inset

ui
\family default
 package: the already described 
\family typewriter
ControlEvent
\family default
, 
\family typewriter
AnimationEvent
\family default
, 
\family typewriter
GridEvent
\family default
,
\family typewriter

\begin_inset Newline newline
\end_inset

ListContainerEvent
\family default
, 
\family typewriter
EnabledStateChangeEvent
\family default
; and 
\family typewriter
MediaClipEvent, KeyEvent
\family default
, 
\family typewriter
PenEvent
\family default
, 
\family typewriter
ScanEvent
\family default
,
\family typewriter

\begin_inset Newline newline
\end_inset

TimerEvent
\family default
, and 
\family typewriter
UIRobotEvent
\family default
.
 Their parent class is 
\family typewriter
Event
\family default
, which provides some useful members:
\end_layout

\begin_layout Itemize

\family typewriter
int
\begin_inset space ~
\end_inset

type
\family default
 This is the event number, used to detect which event was posted.
\end_layout

\begin_layout Itemize

\family typewriter
Object
\begin_inset space ~
\end_inset

target
\family default
 This one informs who is receiving the event (e.
 g.: the VM posts a 
\family typewriter

\begin_inset Newline newline
\end_inset

PenEvent.PEN_DOWN
\family default
 to a control) or who is posting it (e.
 g.: the control posts an 
\family typewriter

\begin_inset Newline newline
\end_inset

ControlEvent.PRESSED
\family default
).
 For user-interface events, this is the control the event is associated
 with.
 
\end_layout

\begin_layout Itemize

\family typewriter
int
\begin_inset space ~
\end_inset

timeStamp
\family default
 Contains the timestamp at which the event was created.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Be careful with the timestamp.
 There is no way to convert it to the current 
\family typewriter
hh:mm:ss:millis
\family default
.
 It is just useful for comparison purposes; or to compute the time elapsed
 since the last event occurred.
 You can use it to simulate a double-click, by checking the elapsed time
 between two clicks.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
boolean
\begin_inset space ~
\end_inset

consumed
\family default
 When set to true during the event propagation, breaks the propagation chain.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
To keep memory usage low, some VM routines reuse 
\family typewriter
PenEvent
\family default
s and 
\family typewriter
KeyEvent
\family default
s objects; so, if you just save a reference to the object instead of the
 timestamp itself, you may get unexpected results.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Event class has also a static method called 
\family typewriter
getNextAvailableEventId()
\family default
 to avoid conflicts when your application or library creates a new 
\family typewriter
Event
\family default
 type.
 
\end_layout

\begin_layout Standard
For more detais about the 
\family typewriter
totalcross.ui.event.Event
\family default
 class, take a look at its JavaDoc.
\end_layout

\begin_layout Standard
The event classes that have not been described before are:
\end_layout

\begin_layout Subsection
PenEvent
\end_layout

\begin_layout Standard

\family typewriter
PenEvent
\family default
 is a pen down, up, move, or drag event.
 A pen drag occurs when the pen moves while the screen is pressed.
 For more detais about the 
\family typewriter
totalcross.ui.event.PenEvent
\family default
 class, take a look at its JavaDoc.
\end_layout

\begin_layout Subsection
KeyEvent
\end_layout

\begin_layout Standard
A 
\family typewriter
KeyEvent
\family default
 is a key press event.
 The 
\family typewriter
key
\family default
 field is the key pressed or entered by other means (grafitti input).
 This is either a normal character key (if the value is < 70000, values
 from the ASCII table) or one of the special keys defined in the 
\family typewriter
DeviceKeys
\family default
 interface.
\end_layout

\begin_layout Standard
Some of the keys defined in 
\family typewriter
totalcross.sys.SpecialKeys
\family default
 need a special code to be manipulated: they are not handled by the application
 unless the application requests it.
 For example, the 
\family typewriter
totalcross.sys.SpecialKeys.UP
\family default
 and 
\family typewriter
totalcross.sys.SpecialKeys.DOWN
\family default
 are automatically sent to the application's event queue, but the 
\family typewriter
SpecialKeys.KEYBOARD_*
\family default
 and 
\family typewriter
SpecialKeys.HARD*
\family default
, not.
 To be able to intercept these keys, you must use the method 
\family typewriter
Vm.
 interceptSpecialKeys(mask)
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The 
\family typewriter
SpecialKeys
\family default
 interface does not have all possible keys mapped.
 If you have a particular device, you can learn the code of a key by creating
 a test application and calling 
\family typewriter
Vm.showKeyCodes(boolean on)
\family default
.
 When this mode is on, each time a key is pressed, the VM shows an alert
 with the code.
 Then use this key code in the 
\family typewriter
Vm.interceptSpecialKeys()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more detais about the 
\family typewriter
totalcross.ui.event.KeyEvent
\family default
 class, take a look at its JavaDoc.
\end_layout

\begin_layout Subsection
MediaClipEvent 
\end_layout

\begin_layout Standard
This class represents the events posted by a soundclip control.
 For more detais about the 
\family typewriter
totalcross.
\begin_inset Newline newline
\end_inset

ui.media.MediaClipEvent
\family default
 class, take a look at its JavaDoc.
\end_layout

\begin_layout Subsection
ScanEvent
\end_layout

\begin_layout Standard

\family typewriter
ScanEvent
\family default
 is an event thrown by the barcode scanner.
 Used in the 
\family typewriter
Scanner
\family default
 class.
 For more detais about the 
\family typewriter
totalcross.io.device.scanner.ScanEvent
\family default
 class, take a look at its JavaDoc.
\end_layout

\begin_layout Subsection
TimerEvent
\end_layout

\begin_layout Standard

\family typewriter
TimerEvent
\family default
 represents a control's timer.
 Timers are created and destroyed using the 
\family typewriter
addTimer()
\family default
 and 
\family typewriter
removeTimer()
\family default
 methods present in the 
\family typewriter
Control
\family default
 class.
 For more detais about the 
\family typewriter
totalcross.
\begin_inset Newline newline
\end_inset

ui.eventTimerEvent
\family default
 class, take a look at its JavaDoc.
\end_layout

\begin_layout Subsection
UIRobotEvent
\end_layout

\begin_layout Standard
Event sent when a robot runs.
 The target is always the 
\family typewriter
MainWindow
\family default
's instance.
 For more detais about the 
\family typewriter
totalcross.unit.UIRobotEvent
\family default
 class, take a look at its JavaDoc.
\end_layout

\begin_layout Section
Listener Interfaces
\end_layout

\begin_layout Standard
This subsection lists the interfaces used to add listeners to use the delegation
 event model.
 All of them are in the package 
\family typewriter
totalcross.ui.event
\family default
.
 For more details about them, take a look at their JavaDocs.
\end_layout

\begin_layout Itemize

\family typewriter
EnabledStateChangeListener
\end_layout

\begin_layout Itemize

\family typewriter
FocusListener
\end_layout

\begin_layout Itemize

\family typewriter
GridListener
\end_layout

\begin_layout Itemize

\family typewriter
HighlightListener
\end_layout

\begin_layout Itemize

\family typewriter
KeyListener
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
ListContainerListener
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
MouseListener 
\end_layout

\begin_layout Itemize

\family typewriter
PenListener
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
PressListener
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
TimerListener 
\end_layout

\begin_layout Itemize

\family typewriter
WindowListener
\family default
 
\end_layout

\begin_layout Chapter
Basic Controls
\end_layout

\begin_layout Standard
In this chapter we will learn the details of all basic controls in the package
 
\family typewriter
totalcross.ui
\family default
: button, edit, label, check, radio, radio group controller, combo box,
 list box, multi edit, grid, and tooltip.
\end_layout

\begin_layout Standard
Each control can have its font, foreground/background colors and state (enabled/
disabled) set.
 Their look depends on the look-and-feel set on the 
\family typewriter
MainWindow
\family default
 constructor (
\family typewriter
Vista
\family default
 is the default).
\end_layout

\begin_layout Standard
For each control we’ll see its characteristics, how to create them with
 the provided constructors, and how to handle their events.
\end_layout

\begin_layout Standard
You can see most of the user interface controls available in TotalCross
 looking at the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember you must set the characteristics of the controls before calling
 
\family typewriter
setRect()
\family default
/
\family typewriter
add()
\family default
 to set their bounds.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Button
\end_layout

\begin_layout Standard
Buttons are the most used types of controls.
 They are used to invoke an action or to confirm something, like [ok] or
 [cancel].
 Here are some screenshots from some buttons using the Android style from
 the old samples UIGadgets and UIControls (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/button_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Some characteristics of TotalCross buttons are:
\end_layout

\begin_layout Itemize
It supports multi-lined text, mixed with images.
\end_layout

\begin_layout Itemize
It has five border styles:
\end_layout

\begin_deeper
\begin_layout Description

\family typewriter
\series medium
BORDER_NONE
\family default
\series default
 Specifies no border for this button.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_SIMPLE
\family default
 
\series default
Specifies a single-lined border for this button.
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_3D
\family default
\series default
 Specifies a 3d border for this button.
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_3D_GRADIENT_VERTICAL_GRADIENT
\family default
\series default
 Specifies a vertical 3d-gradient border for this button.
 Note that, in this mode, the back and fore colors are set using the
\family typewriter

\begin_inset Newline newline
\end_inset

borderColor3DG
\family default
, 
\family typewriter
topColor3DG
\family default
, and 
\family typewriter
bottomColor3DG
\family default
 properties.
 
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_3D_GRADIENT_HORIZONTAL_GRADIENT
\family default
 
\series default
Specifies a horizontal 3d-gradient border for this button.
 Note that, in this mode, the back and fore colors are set using the 
\family typewriter
borderColor3DG
\family default
, 
\family typewriter
topColor3DG
\family default
, and 
\family typewriter
bottomColor3DG
\family default
 properties.
\end_layout

\begin_layout Description

\family typewriter
\series medium
BORDER_GRAY_IMAGE
\family default
 Specifies that the image passed in the constructor is a gray image that
 will be recolorized and resized to the text's size.
 To create the image that will work with this border type, do this:
\series default
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Get an empty image from somewhere in the web (
\begin_inset CommandInset href
LatexCommand href
target "http://www.aaa-buttons.com/"

\end_inset

 is a good place; choose a light background image to prevent problems described
 in step 5).
 
\end_layout

\begin_layout Enumerate
Do not resize the button.
 
\end_layout

\begin_layout Enumerate
Convert the button to grayscale (you can download IrfanView (
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "http://www.irfanview.com/"
target "http://www.irfanview.com/"

\end_inset

) and choose menu Image / Convert to Grayscale.
 
\end_layout

\begin_layout Enumerate
When saving the image (as 
\family typewriter
.png
\family default
), don't forget to save the transparent color (IrfanView has an option to
 save it in the save dialog).
 
\end_layout

\begin_layout Enumerate
Images with a smooth round border should have the background colorized to
 the target background color; otherwise, the results will not be perfect.
\end_layout

\begin_layout Standard
Important: you must set the button colors before calling 
\family typewriter
setBorder()
\family default
.
 Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Button btn = new Button("Barbara
\backslash
nHazan", new Image("button1.png"), CENTER, 8);
\end_layout

\begin_layout Plain Layout

Itn.setBackColor(backColor);
\end_layout

\begin_layout Plain Layout

btn.borderColor3DG = 0x008800; // used to colorize the image
\end_layout

\begin_layout Plain Layout

btn.setFont(font.asBold());
\end_layout

\begin_layout Plain Layout

btn.setBorder(Button.BORDER_GRAY_IMAGE);
\end_layout

\begin_layout Plain Layout

add(btn,CENTER,CENTER); 
\end_layout

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
A button can be made sticky by setting the 
\family typewriter
isSticky
\family default
 field.
 It keeps pressed until the next click.
 Note that this disables 
\family typewriter
autoRepeat
\family default
.
 
\end_layout

\begin_layout Itemize
If you create an image button and add a text using the 
\family typewriter
setText()
\family default
 method, both of them will appear on the control.
\end_layout

\begin_layout Itemize
If the button has an image, you can change the image that is displayed while
 the button is pressed by changing the 
\family typewriter
pressedImage
\family default
 field.
 Below is a sample: 
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img = btn.getImage().getFrameInstance(0); // gets a copy of the image
\end_layout

\begin_layout Plain Layout

img.applyColor(Color.RED); // colorize as red
\end_layout

\begin_layout Plain Layout

btn.pressedImage = img;
\end_layout

\begin_layout Plain Layout

// another option: btn.pressedImage = btn.getImage().getFadedInstance(Color.RED);
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you create an image for the button, make sure that it's a PNG with alpha-chan
nel (transparency).
\end_layout

\begin_layout Itemize
You can make a button fire more than one event while it is pressed changing
 the field 
\family typewriter

\begin_inset Newline newline
\end_inset

autoRepeat
\family default
.
 The 
\family typewriter
PRESSED
\family default
 event will be sent while this button is held.
 The field 
\family typewriter
INITIAL_ DELAY
\family default
 is the initial delay to start the auto-repeat, which defaults to 600 ms,
 and the field 
\family typewriter
AUTO_DELAY
\family default
 is the frequency in which the 
\family typewriter
PRESSED
\family default
 event will be posted after the 
\family typewriter
INITIAL_ DELAY
\family default
 was reached, which defaults to 150 ms.
 
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
setImage()
\family default
 (sets the image that is displayed in the button; the
\family typewriter

\begin_inset Newline newline
\end_inset

transparentColor
\family default
 property of the 
\family typewriter
Image
\family default
 must be set before calling this method) and 
\family typewriter
setText()
\family default
 don't resize the button to fit the image.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method is ignored by the 
\family typewriter
Button
\family default
 class.
\end_layout

\begin_layout Itemize
The class 
\family typewriter
Button
\family default
 has the static field 
\family typewriter
commonGap
\family default
.
 It defines the internal gap between the button content and its borders.
 Changing this value affects all buttons created after the new value was
 set – it does not affect buttons previously created.
 This is useful when you're creating the buttons but don't want to keep
 calling the 
\family typewriter
setGap()
\family default
 method.
 Note that this value will be added to the value of gap.
 A good practice is to set the field for the desired value before you create
 the buttons (at the beginning of 
\family typewriter
initUI()
\family default
 for instance) and reset it back to zero after you finish (at the end of
 
\family typewriter
initUI()
\family default
).
 Changing this also affects the size of the 
\family typewriter
ScrollBars
\family default
 created.
 
\end_layout

\begin_layout Itemize
You can change the color used when the button is pressed using the 
\family typewriter
setPressedColor()
\family default
 method.
 This changes the color that the button's background will go ('armed color')
 when the button gets a 
\family typewriter
PENDOWN
\family default
 event.
 The default is the cursor color for the background.
 In Android user interface style, using a bright color may result in a white
 background.
 Use a darker color in this case.
 
\end_layout

\begin_layout Itemize
You can simulate the button being pressed by calling the method 
\family typewriter
press()
\family default
 and passing 
\family typewriter
true
\family default
 as parameter.
 Passing 
\family typewriter
false
\family default
 simulates a release.
 This method does not generate events.
 
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button btn1 = new Button("Clients", img, TOP, 1);
\end_layout

\begin_layout Plain Layout

	btn1.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn1, LEFT+5, TOP+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn2 = new Button("Clients", img, BOTTOM, 1);
\end_layout

\begin_layout Plain Layout

	btn2.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn2, AFTER+5, SAME);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn3 = new Button("Button disabled");
\end_layout

\begin_layout Plain Layout

	btn3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

	add(btn3, LEFT+5, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn4 = new Button("Button none border");
\end_layout

\begin_layout Plain Layout

	btn4.setBorder(Button.BORDER_NONE);
\end_layout

\begin_layout Plain Layout

	btn4.setForeColor(Color.RED);
\end_layout

\begin_layout Plain Layout

	btn4.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn4, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout  wain Layout

	Button btn5 = new Button("Button 3D Grad Border");
\end_layout

\begin_layout Plain Layout

	btn5.setBorder(Button.BORDER_3D_GRADIENT);
\end_layout

\begin_layout Plain Layout

	btn5.setBackColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn5, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Button btn6 = new Button("Button 3D Grad Border");
\end_layout

\begin_layout Plain Layout

	btn6.setBorder(Button.BORDER_3D_GRADIENT);
\end_layout

\begin_layout Plain Layout

	btn6.setForeColor(Color.WHITE);
\end_layout

\begin_layout Plain Layout

	add(btn6, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Every time a button is pressed, it posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event to the parent container.
 Below is an example of how to handle this event.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == btn1)
\end_layout

\begin_layout Plain Layout

				new MessageBox("HI", "Natasha").popup();
\end_layout

\begin_layout Input Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
To just display images in the screen, use the 
\family typewriter
ImageControl
\family default
 class instead of 
\family typewriter
Button
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.Button
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Edit
\end_layout

\begin_layout Standard
Edit is a control used to get text input when the user types using the keyboard
 or the grafitti area.
 It allows you to select text and cut/copy/paste it.
 Here are some screenshots from some edits using the Android style from
 the old UIGadgets and UIControls samples (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_006.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/edit_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here are some other features:
\end_layout

\begin_layout Itemize
There are two constructors: the default (with no arguments) that creates
 an edit with no constraints, and one constructor that receives a mask string.
 The mask is used, primarily, to compute the preferred width.
 If the mask is "", the width will be set to 
\family typewriter
FILL
\family default
.
 In order to use the mask to format the input, you must call the 
\family typewriter
setMode()
\family default
 method passing 
\family typewriter
true
\family default
 to the second argument.
\end_layout

\begin_layout Itemize
You can limit the maximum length of characters that can be entered, by using
 the 
\family typewriter

\begin_inset Newline newline
\end_inset

setMaxLength()
\family default
 method.
 If the user tries to enter text above the limit, a beep is sounded and
 the text is ignored.
 If you set a text greater than the maximum length, it will be truncated.
\end_layout

\begin_layout Itemize

\family typewriter
numbersSet = "0123456789"
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
currencyCharsSet = "0123456789.+-"
\end_layout

\begin_layout Itemize

\family typewriter
dateSet = numbersSet + Settings.dateSeparator
\end_layout

\end_deeper
\begin_layout Itemize
Those character sets are used in the 
\family typewriter
setMode()
\family default
 method that receives one of the following constants:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
NORMAL
\family default
: in this mode any character can be entered.
 On all platforms the default input method is used.
\end_layout

\begin_layout Itemize

\family typewriter
DATE
\family default
: this mode uses the 
\family typewriter
dateSet()
\family default
 and the 
\family typewriter
totalcross.ui.CalendarBox()
\family default
 is the one popped up.
\end_layout

\begin_layout Itemize

\family typewriter
CURRENCY
\family default
: the 
\family typewriter
currencyCharsSet
\family default
 is used and the 
\family typewriter
totalcross.ui.
\begin_inset Newline newline
\end_inset

 CalculatorBox
\family default
 is the one popped up.
 You can change the calculator to a numeric box for a specific edit by making
 
\family typewriter
setKeyboard(Edit.KBD_NUMERIC)
\family default
 or for all edits of the application, by doing 
\family typewriter
Edit.useNumericBoxInsteadOfCalculator = true
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
PASSWORD
\family default
: any character can be entered and the 
\family typewriter
totalcross.ui.Keyboard
\family default
 is the one popped up.
 Only the last character typed is displayed in this mode, all the others
 are replaced by an asterisk (*).
\end_layout

\begin_layout Itemize

\family typewriter
PASSWORD_ALL
\family default
: same of 
\family typewriter
PASSWORD
\family default
 except that all characters are replaced by an asterisk (*), including the
 last one.
\end_layout

\end_deeper
\begin_layout Itemize
There's another 
\family typewriter
setMode()
\family default
 method that, besides the constants listed above, also receives a boolean
 to make the edit use a mask on the input text instead of popping a window.
 It should be used with the constants 
\family typewriter
DATE
\family default
 and 
\family typewriter
CURRENCY
\family default
.
\end_layout

\begin_layout Itemize
To retrieve the text shown as is, use 
\family typewriter
getText()
\family default
.
 If masking is enabled, the text with the mask is returned.
 You can return the text without the mask using 
\family typewriter
getTextWithoutMask()
\family default
.
 For non-currency mode, only characters whose corresponding mask is '9'
 are returned.
 To set the text to another one, call 
\family typewriter
setText()
\family default
.
 One of the 
\family typewriter
setText()
\family default
 methods has a flag to indicate whether to post a 
\family typewriter
PRESSED
\family default
 event.
\end_layout

\begin_layout Itemize
To return the length of a text without having to call 
\family typewriter
getText()
\family default
, you can call 
\family typewriter
getLength()
\family default
.
 To apply trimming in the string and return its length, call 
\family typewriter
getTrimmedLength()
\family default
.
 This method consumes less memory than 
\family typewriter
getText().trim().length()
\family default
.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setDecimalPlaces()
\family default
 can be used with 
\family typewriter
setMode(CURRENCY, true)
\family default
 to set the number of decimal places the mask will use.
 The default value is 2.
 It cannot be used with masked edits; pass the number of decimal places
 in the mask itself.
 The only exception is when you want to use the default 
\family typewriter
CURRENCY
\family default
 mask passing a 
\family typewriter
null
\family default
 mask in the constructor; in this situation, you can call 
\family typewriter
setDecimalPlaces()
\family default
 before calling 
\family typewriter
setMode()
\family default
, and a mask will be constructed with the given number of decimals.
 
\end_layout

\begin_layout Itemize
The edit can be set as read-only using the method 
\family typewriter
setEditable()
\family default
 and setting it to 
\family typewriter
false
\family default
.
 You can also set the field 
\family typewriter
hasCursorWhenNotEditable
\family default
 to 
\family typewriter
false
\family default
 to make the blinking cursor not appear when this edit is not editable.
\end_layout

\begin_layout Itemize
There's a public member named 
\family typewriter
overwrite
\family default
 which, if set to 
\family typewriter
true
\family default
, turns off insert mode (i.
 e., characters will be replaced if written over).
\end_layout

\begin_layout Itemize
The member 
\family typewriter
alignment
\family default
, which can be set to 
\family typewriter
LEFT
\family default
, 
\family typewriter
RIGHT
\family default
 or 
\family typewriter
CENTER
\family default
, lets you control the alignment of the text inside the edit after the control
 loses the focus.
 The text is always left-aligned when it has the focus.
 The only exception is when mode is set to 
\family typewriter
CURRENCY
\family default
, when the numbers will be typed using right-align.
\end_layout

\begin_layout Itemize
You can invoke the default popup keyboard for the edit using the 
\family typewriter
popupKCC()
\family default
 method (KCC = Keyboard, Calculator, and Calendar).
\end_layout

\begin_layout Itemize
You may specify which keyboard will be popped up, overriding the default
 behavior, using the 
\family typewriter
setKeyboard()
\family default
 method, passing the constants 
\family typewriter
KBD_NONE
\family default
 (no keyboard will be popped up for this edit), 
\family typewriter
KBD_DEFAULT
\family default
 (the default keyboard for the current mode will be used for this edit)
 , 
\family typewriter
KBD_KEYBOARD
\family default
 (the 
\family typewriter
Keyboard
\family default
 class or the internal virtual keyboard will be used for this edit), 
\family typewriter
KBD_CALCULATOR
\family default
 (the 
\family typewriter
Calculator
\family default
 will be used for this edit), 
\family typewriter
KBD_CALENDAR
\family default
 (the 
\family typewriter
Calendar
\family default
 will be used for this edit), 
\family typewriter
KBD_NUMERIC
\family default
 (the 
\family typewriter
NumericBox
\family default
 will be used for this edit), or 
\family typewriter
KBD_TIME
\family default
 (the 
\family typewriter
TimeBox
\family default
 will be used for this edit).
\begin_inset Newline newline
\end_inset

Note that 
\family typewriter
setMode()
\family default
calls 
\family typewriter
setKeyboard(KBD_DEFAULT)
\family default
, so be sure to set the mode before calling 
\family typewriter
setKeyboard()
\family default
.
 
\end_layout

\begin_layout Itemize
You may force all characters entered to be automatically converted to upper
 or to lower case by setting the field 
\family typewriter
capitalise
\family default
 with the constants 
\family typewriter
ALL_UPPER
\family default
 or 
\family typewriter
ALL_LOWER
\family default
; the constant 
\family typewriter
ALL_NORMAL
\family default
 disables this feature.
\end_layout

\begin_layout Itemize
The field 
\family typewriter
autoSelect
\family default
 makes the edit automatically select the text when it receives the focus.
 This is always 
\family typewriter
true
\family default
 for penless devices.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setCursorPos(start, end)
\family default
 can be used to set the selected text of the edit (if 
\family typewriter
start != end
\family default
).
 It can be used to set the cursor position, if 
\family typewriter
start
\family default
 equals 
\family typewriter
end
\family default
.
 
\family typewriter
start
\family default
 must be less or equal to 
\family typewriter
end
\family default
, and both must be 
\family typewriter
>= 0
\family default
.
 It can also be used to clear the selected text, calling 
\family typewriter
setCursorPos(-1,0)
\family default
.
 Note: if you're setting the cursor position before the edit is drawn for
 the first time, the edit will not be scrolled if the end position goes
 beyond the limits.
 Important! No bound checking is made.
 Be sure to not call this method with invalid positions! Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ed.setText("1234567890123456");
\end_layout

\begin_layout Plain Layout

ed.setCursorPos(3,14);
\end_layout

\begin_layout Plain Layout

ed.requestFocus(); 
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getCursorPos()
\family default
 returns an integer array 
\family typewriter
(int[])
\family default
 with the start (array index 0) and end (array index 1) positions of the
 cursor.
 It can be used to find the selected text with 
\family typewriter
getText()
\family default
, which will be the 
\family typewriter
substring(start, end)
\family default
.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int []cursorPos = ed.getCursorPos();
\end_layout

\begin_layout Plain Layout

int start = cursorPos[0];
\end_layout

\begin_layout Plain Layout

int end = cursorPos[1];
\end_layout

\begin_layout Plain Layout

String text = ed.getText();
\end_layout

\begin_layout Plain Layout

if (start != -1) // is the text selected?
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String selectedText = text.substring(start,end);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
When a selection is made or when the user clicks and holds an edit at the
 same point, a popup menu is shown so the user can cut/copy/paste.
 You can disable this feature by calling 
\family typewriter
Edit.clipboardDelay = -1
\family default
.
 This field can also be used to define the time that the user will have
 to press to see a popup menu with copy/paste options, which defaults to
 1500 ms.
 It also affects 
\family typewriter
MultiEdit
\family default
.
\end_layout

\begin_layout Itemize
In the Android user interface style, you can change the color of the edit
 that has focus using the 
\family typewriter
focusColor
\family default
 field.
 By default, there's only a blinking cursor.
 
\end_layout

\begin_layout Itemize
You can remap a key to be used in the edit (for example, remap F1 to 1,
 F2 to 2, etc) by calling the 
\family typewriter
mapKeys(String from, String to)
\family default
 method.
 This method maps the keys in the 
\family typewriter
from
\family default
 character array into the keys in the 
\family typewriter
to
\family default
 character array.
 
\begin_inset Newline newline
\end_inset

For example, to enable a 'numeric pad' on devices that has the 
\family typewriter
1
\family default
 in the 
\family typewriter
u
\family default
 character, you can use this: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ed.mapKeys("uiojklnm!.","1234567890");
\end_layout

\end_inset

To make sure that lowercase characters are also handled, you should also
 change the capitalise mode: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ed.capitalise = Edit.ALL_LOWER;
\end_layout

\end_inset

If you want to disable a set of keys, use the 
\family typewriter
setValidChars()
\family default
 method.
 Note that 
\family typewriter
mapKeys()
\family default
 have precendence over 
\family typewriter
setValidChars()
\family default
.
 
\begin_inset Newline newline
\end_inset

The 
\family typewriter
from
\family default
 parameter must have the same length of 
\family typewriter
to
\family default
.
 Set it to 
\family typewriter
null
\family default
 to disable mapping.	
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method uses 
\family typewriter
clearValueStr
\family default
 to set the text of the edit.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Edit ed1 = new Edit();
\end_layout

\begin_layout Plain Layout

	add(ed1, LEFT, TOP+5, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed2 = new Edit("9999999999999");
\end_layout

\begin_layout Plain Layout

	ed2.setDecimalPlaces(4);
\end_layout

\begin_layout Plain Layout

	ed2.setMode(Edit.CURRENCY,true);
\end_layout

\begin_layout Plain Layout

	add(ed2, RIGHT, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed3 = new Edit("99/99/9999");
\end_layout

\begin_layout Plain Layout

	ed3.setMode(Edit.DATE);
\end_layout

\begin_layout Plain Layout

	add(ed3, LEFT, SAME);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed4 = new Edit("AAAAA");
\end_layout

\begin_layout Plain Layout

	ed4.setMode(Edit.PlainORD);
\end_layout

\begin_layout Plain Layout

	add(ed4, LEFT, AFTER+5);
\end_layout

\begin_layout Plain Layout

	ed4.setText("pass");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed5 = new Edit(""); // use FILL as preferred width
\end_layout

\begin_layout Plain Layout

	ed5.setMaxLength(4);
\end_layout

\begin_layout Plain Layout

	ed5.setValidChars("123ABC");
\end_layout

\begin_layout Plain Layout

	add(ed5, LEFT, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Edit ed6 = new Edit("Can't Edit");
\end_layout

\begin_layout Plain Layout

	ed6.setEditable(false);
\end_layout

\begin_layout Plain Layout

	add(ed6, LEFT, AFTER+5);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Edit control posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event when the text changes.
 You may also want to intercept the event 
\family typewriter
ControlEvent.FOCUS_OUT
\family default
 to validate the edit’s text.
\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.Edit
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Label
\end_layout

\begin_layout Standard
This control is used to display static text or a marquee.
 The label in TotalCross can also display multiple lines of text, separated
 by the character 
\family typewriter

\backslash
n
\family default
.
 A label never receives focus neither dispatches events.
 Here is a screenshot from a multi-lined label using the Android style from
 the old UIGadgets sample:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/label_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here are some other features:
\end_layout

\begin_layout Itemize
Label has three constructors: 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Label()
\family default
 Creates an empty label, using 
\family typewriter
FILL
\family default
 as the preferred width.
\end_layout

\begin_layout Itemize

\family typewriter
Label(String
\begin_inset space ~
\end_inset

text)
\family default
 Creates a label displaying the given text (that may be changed at runtime)
 using left alignment.
 Supports inverted text, multiple lines and is scrollable by default.
 
\end_layout

\begin_layout Itemize

\family typewriter
Label(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

align)
\family default
 Like the above, but you can also set the horizontal alignment using one
 of the constants 
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, 
\family typewriter
RIGHT
\family default
, or 
\family typewriter
FILL
\family default
 (justified).
\end_layout

\end_deeper
\begin_layout Itemize
The three align constants are inherited from the 
\family typewriter
totalcross.ui.Control
\family default
 class, where they are used in the 
\family typewriter
setRect()
\family default
 method.
 Furthermore, you can use
\begin_inset Newline newline
\end_inset

 
\family typewriter
new label(“my text”, Label.CENTER)
\family default
 or 
\family typewriter
new Label(“my text”, CENTER)
\family default
; it will work in the same way.
\end_layout

\begin_layout Itemize
The vertical alignment can be controlled using the 
\family typewriter
vAlign
\family default
 field.
 Defaults to 
\family typewriter
CENTER
\family default
.
 
\end_layout

\begin_layout Itemize
The text is used to compute the preferred size.
 If you pass an empty string as text, the preferred width will be 
\family typewriter
FILL
\family default
.
 
\end_layout

\begin_layout Itemize
You can set/change the label's text alignment accessing the public member
 
\family typewriter
align
\family default
.
 The possible values are 
\family typewriter
LEFT
\family default
, 
\family typewriter
RIGHT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
FILL
\family default
 (justifies the text).
 If align is 
\family typewriter
CENTER
\family default
 and the text is wider than the label, only the right portion will be lost.
 
\end_layout

\begin_layout Itemize
You can call the 
\family typewriter
set3d()
\family default
 method to make the label have a 3d look, by drawing it with the foreground
 color and with a color a little brighter than the background color.
\end_layout

\begin_layout Itemize
Labels can look inverted, by swapping the background and the foreground
 colors.
 To do this, use the 
\family typewriter
setInvert()
\family default
 method.
 By calling it twice you can make the text blink.
\end_layout

\begin_layout Itemize
The text can be highlighted using the 
\family typewriter
setHighlighted()
\family default
 method.
 This method paints the text in all directions with a brighter color, then
 centered, with the foreground color.
 The highlight color can be set using 
\family typewriter
setHighlightedColor()
\family default
.
 The default color is a brighter foreground color.
 -1 must be passed to the method to use this default value.
 
\end_layout

\begin_layout Itemize
Labels can’t be inverted and 3d at the same time.
 Calling 
\family typewriter
set3d()
\family default
 cancels 
\family typewriter
setInverted()
\family default
 and vice-versa.
\end_layout

\begin_layout Itemize
If the label is a multi-line one, you can use the method 
\family typewriter
scroll(boolean down)
\family default
 to make it scroll up and down, and also the 
\family typewriter
canScroll(boolean down)
\family default
 method to peek if it can be scrolled in the desired direction.
 A label can scroll if the number of text lines is greater than the actual
 height.
 To see a good usage example of this feature, see the 
\family typewriter
totalcross.ui.
 dialog.MessageBox
\family default
 class.
 By default, the scroll is done a page at a time; to scroll a line at a
 time, change the 
\family typewriter
pageScroll
\family default
 field to 
\family typewriter
false
\family default
.
 
\family typewriter
scroll()
\family default
 returns 
\family typewriter
true
\family default
 if success; 
\family typewriter
false
\family default
 if no scroll is possible.
 
\end_layout

\begin_layout Itemize
By default, the 
\family typewriter
clear()
\family default
 method does not affect the label's text because clearing a label is usually
 not a desired action.
 If you really want to clear it, you must explicitly set the 
\family typewriter
clearValueStr
\family default
 property.
\end_layout

\begin_layout Itemize
The 
\family typewriter
setText()
\family default
 method, used to change the label’s text, does not change the control’s
 bounds.
 You must be sure that the label has enough size to hold the text otherwise
 it will be clipped.
 If you're setting the text in 
\family typewriter
CURRENCY
\family default
 mode, the text must be set not formatted (unmasked).
 
\end_layout

\begin_layout Itemize
By default, this class does not automatic parses the text because this is
 a slow operation.
 You may change this behaviour by using the 
\family typewriter
autoSplit
\family default
 field, or calling the 
\family typewriter
split()
\family default
 method directly.
 This method splits the text to the given width.
 Remember to set the font (or add the label to its parent) before calling
 this method.
 You can also you can use a handy method to parse the text that you want
 to display: see the 
\family typewriter
totalcross.sys.Convert.insertLineBreak()
\family default
 method.
\begin_inset Newline newline
\end_inset

Set 
\family typewriter
autoSplit
\family default
 to 
\family typewriter
true
\family default
 to let the label split its text based on the width every time its width
 changes.
 If the height is 
\family typewriter
PREFERRED
\family default
, the label will change its size accordingly.
 You may change the height again calling 
\family typewriter
setRect()
\family default
.
 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setMarqueeText(String text, int delay, int loopCount, int step)
\family default
 shows the label as a horizontal marquee.
 The text must have a single line (if it has more than one line, only the
 first line is shown).
 To stop the marquee, just call 
\family typewriter

\begin_inset Newline newline
\end_inset

setText()
\family default
.
 When a window covers the marquee, it is halted, and resumed when the window
 is closed.
\begin_inset Newline newline
\end_inset


\family typewriter
delay
\family default
 is the timer delay in ms used to scroll the marquee, where 100 ms is a
 good value.
 
\family typewriter
loopCount
\family default
 is the number of times the text will loop.
 Set to -1 to loop forever.
 When the loop count is reached, the text is cleared.
 Finally, 
\family typewriter
step
\family default
 is the step in pixels in which the text will be scrolled.
 If 
\family typewriter
step > 0
\family default
, the scroll will be from left to right; if 
\family typewriter
step < 0
\family default
, the scroll will be from right to left.
\end_layout

\begin_layout Itemize
If you have problems with labels when a rotation occurs, check the 
\family typewriter
preferredWidthText
\family default
 field.
\begin_inset Newline newline
\end_inset

By default, the 
\family typewriter
getPreferredWidth()
\family default
 uses the current text to compute the width.
 However, if you create a label with a predefined text that will be changed
 later, in the advent of a reposition, the preferred width will be recomputed
 again using the current text and not the predefined one.
 For example, if you do: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Label l = new Label("99");
\end_layout

\begin_layout Plain Layout

l.setText("0");
\end_layout

\end_inset

then the preferred width will be computed based on "0", not in "99".
 To change this behaviour, assign to this field the text that you want to
 be used to compute the preferred width.
 
\end_layout

\begin_layout Itemize
You can add a border to the label by changing the 
\family typewriter
borderColor
\family default
 field.
 Defaults to -1, which means no border.
 Note that the border affects the label's size (width and height are increased
 by 4), so you must set this field before setting the rect.
 If you want a bigger gap between border and text, you can use 
\family typewriter
setInsets(int left, int right, int top, int bottom)
\family default
, which defines a space to be placed around the text of the label.
\end_layout

\begin_layout Itemize
The background can be changed from solid (defaults to 
\family typewriter
SOLID_BACKGROUND
\family default
) to a shade by using the 
\family typewriter
backgroundType
\family default
 field.
 The other values can be 
\family typewriter
VERTICAL_GRADIENT_ BACKGROUND
\family default
 (specifies a vertical 3d-gradient background for this label) and 
\family typewriter
HORIZONTAL_ GRADIENT_BACKGROUND
\family default
 (specifies a horizontal 3d-gradient background for this label).
 One color is the background color, and the other color is defined by 
\family typewriter
firstGradientColor
\family default
 (defaults to 
\family typewriter
Color.WHITE
\family default
) and 
\family typewriter
secondGradientColor
\family default
 (defaults to 
\family typewriter
Color.BLACK
\family default
) fields.
 
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	add(new Label("This is a simple label"), LEFT, TOP);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab1 = new Label("This is a centered label", CENTER);
\end_layout

\begin_layout Plain Layout

	add(lab1);
\end_layout

\begin_layout Plain Layout

	lab1.setRect(LEFT, AFTER, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab2 = new Label("This is another centered label", CENTER);
\end_layout

\begin_layout Plain Layout

	add(lab2);
\end_layout

\begin_layout Plain Layout

	lab2.setRect(LEFT, AFTER, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab3 = new Label("Wow! A wonderful 3D label!");
\end_layout

\begin_layout Plain Layout

	lab3.set3d(true);
\end_layout

\begin_layout Plain Layout

	add(lab3, LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab4 = new Label("A beautiful inverted label");
\end_layout

\begin_layout Plain Layout

	lab4.setInvert(true);
\end_layout

\begin_layout Plain Layout

	add(lab4, LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Label lab5 = new Label("This is a very long
\backslash
ntext and i dont
\backslash
nwant to waste my
\backslash
ntime parsing it to
\backslash
nbe fit it!");
\end_layout

\begin_layout Plain Layout

	add(lab5);
\end_layout

\begin_layout Plain Layout

	lab5.setRect(CENTER, AFTER, PREFERRED, PREFERRED);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.Label
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Check
\end_layout

\begin_layout Standard
Check is a control that has a rectangle with a check inside and a text at
 right, and is used for items that have an on/off state.
 When it is on, the check box is marked; otherwise, it is unmarked.
 
\end_layout

\begin_layout Standard
Here are some screenshots from some checks using the Android style from
 the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/check_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/check_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/check_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing a check being used followed by some properties:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Check check;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(check = new Check("Check me"), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

 i
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && event.target == check)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			bool checked = check.isChecked();
\end_layout

\begin_layout Plain Layout

			// ...
 handle check being pressed
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
It has only one constructor:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Check(String
\begin_inset space ~
\end_inset

text)
\family default
 Creates a check control displaying the given text.
\end_layout

\end_deeper
\begin_layout Itemize
To change the check's color, which defaults to the foreground color, use
 the 
\family typewriter
checkColor
\family default
 field.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
isChecked()
\family default
 returns the current checked state of the control.
\end_layout

\begin_layout Itemize
You may use 
\family typewriter
setChecked(boolean checked)
\family default
 to change its state to checked or unchecked.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setText()
\family default
 can be used to change the displayed text.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
clear()
\family default
 uses the field 
\family typewriter
clearValueInt
\family default
 to set the check state.
 It sets the control as checked only if 
\family typewriter
clearValueInt
\family default
 is 1, otherwise it sets the control as unchecked.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Check chk1 = new Check("Checked enabled");
\end_layout

\begin_layout Plain Layout

	add(chk1, LEFT, TOP+5);
\end_layout

\begin_layout Plain Layout

	chk1.setChecked(true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Check chk2 = new Check("Unchecked enabled");
\end_layout

\begin_layout Plain Layout

	add(chk2, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	Check chk3 = new Check("Check disabled");
\end_layout

\begin_layout Plain Layout

	add(chk3, SAME, AFTER+5);
\end_layout

\begin_layout Plain Layout

	chk3.setChecked(true);
\end_layout

\begin_layout Plain Layout

	chk3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Like the button control, the only event that the check control posts is
 the 
\family typewriter
ControlEvent.
 PRESSED
\family default
.
 Below we see an example of how to handle a click on the check:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout 0lain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == chk1)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				String state = chk1.isChecked()? "checked" : "unchecked";
\end_layout

\begin_layout Plain Layout

				new MessageBox("TotalCross", "Checkbox " + state).popup();
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout 0lain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.Check
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Radio and RadioGroupController
\end_layout

\begin_layout Standard
Radio is a control that allows the user to choose one of a predefined set
 of options.
 They are usually grouped together, and when the user selects one of them,
 any previously selected radio in the same group becomes deselected.
 
\end_layout

\begin_layout Standard
Here are some screenshots from some checks using the Android style from
 the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/radio_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/radio_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/radio_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing how radio is used followed by some properties:
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	RadioGroupController rgGender;
\end_layout

\begin_layout Flain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		rgGender = new RadioGroupController();
\end_layout

\begin_layout Plain Layout

		add(new Radio("Male", rgGender), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

		add(new Radio("Female", rgGender), AFTER+2, SAME);
\end_layout

\begin_layout Plain Layout

		rgGender.setSelectedIndex(radioMale); // activate the specified one.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && (event.target instanceof Radio)
 && ((Radio)event.target).getRadioGroup() == rgGender)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			boolean male = rgGender.getSelectedIndex() == 0;
\end_layout

\begin_layout Plain Layout

			// ...
 handle radio Male being pressed 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
In TotalCross, radio controls are grouped together using the 
\family typewriter
radioGroupController
\family default
.
\end_layout

\begin_layout Itemize
It has two constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Radio(String
\begin_inset space ~
\end_inset

text)
\family default
 Creates a radio control displaying the given text.
\end_layout

\begin_layout Itemize

\family typewriter
Radio(String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

RadioGroupController
\begin_inset space ~
\end_inset

radioGroup)
\family default
 Creates a radio control displaying the given text and attached to the given
 radio group.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
radioGroupController
\family default
 is not a control, therefore you cannot add it to a container and it does
 not post events since it does not extend 
\family typewriter
Control
\family default
.
 It just provides useful methods to handle groups of radio controls, like:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
add(Radio
\begin_inset space ~
\end_inset

newMember)
\family default
 Adds a new 
\family typewriter
Radio
\family default
 to the list of 
\family typewriter
Radio
\family default
s this controller handles.
 This method is called by the 
\family typewriter
Radio
\family default
's constructor.
 
\end_layout

\begin_layout Itemize

\family typewriter
remove(Radio
\begin_inset space ~
\end_inset

oldMember)
\family default
 Removes the given 
\family typewriter
Radio
\family default
 from the list of 
\family typewriter
Radio
\family default
s this controller handles.
 You must explicitly call this method, if needed.
 
\end_layout

\begin_layout Itemize

\family typewriter
getSelectedIndex()
\family default
 Returns the index of the selected 
\family typewriter
Radio
\family default
 (in the order that the 
\family typewriter
Radio
\family default
s were added to the container), or -1 if none.
\end_layout

\begin_layout Itemize

\family typewriter
setSelectedIndex(int
\begin_inset space ~
\end_inset

index)
\family default
 Used to select a 
\family typewriter
Radio
\family default
 by its index and deselects the other one.
 The parameter 
\family typewriter
index
\family default
 is a zero-based index of the 
\family typewriter
Radio
\family default
 to be set.
 -1 must be passed to disable all of them.
\end_layout

\begin_layout Itemize

\family typewriter
getSelectedItem()
\family default
 Returns the 
\family typewriter
Radio
\family default
 selected, or 
\family typewriter
null
\family default
 if none.
 
\end_layout

\begin_layout Itemize

\family typewriter
setSelectedItem(Radio
\begin_inset space ~
\end_inset

who)
\family default
 Selects a given radio group controller.
 It is called by the 
\family typewriter
Radio
\family default
 when a click was made.
\end_layout

\begin_layout Itemize

\family typewriter
setSelectedItem(String
\begin_inset space ~
\end_inset

text)
\family default
 Selects a 
\family typewriter
Radio
\family default
 whose text matches the given caption.
\end_layout

\begin_layout Itemize

\family typewriter
getRadio(int
\begin_inset space ~
\end_inset

idx)
\family default
 Returns the 
\family typewriter
Radio
\family default
 at the given index.
 
\end_layout

\end_deeper
\begin_layout Itemize
These indices are based in the order that the radios are added to the container.
\end_layout

\begin_layout Itemize
You may use the 
\family typewriter
getRadioGroupController()
\family default
 method to make it easier to parse the events.
 It returns the 
\family typewriter
RadioGroupController
\family default
 that this radio belongs to, or 
\family typewriter
null
\family default
 if none.
 
\end_layout

\begin_layout Itemize
The check's text is right justified in the control's width by default.
 You may change this behavior by setting the field 
\family typewriter
leftJustify
\family default
 to 
\family typewriter
true
\family default
 if the width is above the preferred one.
 This will make the text to be left justified in the control's width.
\end_layout

\begin_layout Itemize
To change the check's color, which defaults to the foreground color, use
 the 
\family typewriter
checkColor
\family default
 field.
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method selects the given radio if its 
\family typewriter
clearValueInt
\family default
 is 1.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	RadioGroupController rgFruits = new RadioGroupController();
\end_layout

\begin_layout Plain Layout

	add(rOrange = new Radio("Orange", rgFruits), LEFT, TOP + 5);
\end_layout

\begin_layout Plain Layout

	add(rApple = new Radio("Apple", rgFruits), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	add(rGrape = new Radio("Grape", rgFruits), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	add(rLemon = new Radio("Lemon", rgFruits), LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

	rOrange.setChecked(true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	String[] numbers = { "One", "Two", "Three" };
\end_layout

\begin_layout Plain Layout

	RadioGroupController rgNumbers = new RadioGroupController();
\end_layout

\begin_layout Plain Layout

	for (int i = 0; i < numbers.length; i++)
\end_layout

\begin_layout Plain Layout

		add(new Radio(numbers[i], rgNumbers), i == 0 ? CENTER : SAME, i == 0 ?
 (TOP + 5) : AFTER);
\end_layout

\begin_layout Plain Layout

	add(rEna = new Radio("Enable"), RIGHT, BOTTOM);
\end_layout

\begin_layout Plain Layout

	add(rDis = new Radio("Disable"), BEFORE - 2, BOTTOM);
\end_layout

\begin_layout Plain Layout

	rDis.setEnabled(false);
\end_layout

\begin_layout Plain Layout

	rDis.setChecked(true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The radio control posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event when the user clicks on it.
 Below is an example of its use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			if (event.target instanceof Radio)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				Radio r = (Radio)event.target;
\end_layout

\begin_layout Plain Layout

				RadioGroup rg = r.getRadioGroup();
\end_layout

\begin_layout Plain Layout

				if (rg == rgFruits)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					repaintNow(); // the MessageBox below will popup before the screen
 is updated to unselect the Radio
\end_layout

\begin_layout Plain Layout

					new MessageBox("TotalCross",r.getText()+" juice")).popup();
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				else if (rg == rgNumbers)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					repaintNow(); 
\end_layout

\begin_layout Plain Layout

					new MessageBox("TotalCross","Number selected: "+r.getText()).popup();
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

				else
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					// no RadioGroup; we have to handle by ourselves
\end_layout

\begin_layout Plain Layout

					if (r == rEna)
\end_layout

\begin_layout Plain Layout

					{
\end_layout

\begin_layout Plain Layout

						rEna.setChecked(true);
\end_layout

\begin_layout Plain Layout

						rDis.setChecked(false);
\end_layout

\begin_layout Plain Layout

						rDis.setEnabled(true);
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

					else if (r == rDis)
\end_layout

\begin_layout Plain Layout

					{
\end_layout

\begin_layout Plain Layout

						rEna.setChecked(false);
\end_layout

\begin_layout Plain Layout

						rDis.setChecked(true);
\end_layout

\begin_layout Plain Layout

						rDis.setEnabled(false);
\end_layout

\begin_layout Plain Layout

					}
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.Radio
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ComboBox and ComboBoxDropDown
\end_layout

\begin_layout Standard
The combo box is a very useful control to display a list of items where
 only one can be selected.
 It consists of a text with a button and a 
\family typewriter
ComboBoxDropDown
\family default
 control that is popped up when the button is pressed.
 The popped up list is closed when one of its items is selected or the control
 loses the focus.
\end_layout

\begin_layout Standard
Here are some screenshots from a simple combo box using the Android style
 from the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample) Note that below the combo box component,
 there is a list box:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Another combo box from the old sample UIGadgets, also using Android style,
 can be seen here, where the left combo box has a attached 
\family typewriter
MultiListBox
\family default
, which extends 
\family typewriter
ListBox
\family default
 and lets the user select more than one item:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_008.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/combo_009.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize
The 
\family typewriter
ComboBox
\family default
 class has four constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ComboBox()
\family default
 Creates an empty combo box.
\end_layout

\begin_layout Itemize

\family typewriter
ComboBox(ListBox
\begin_inset space ~
\end_inset

userListBox)
\family default
 Creates a combo box with a 
\family typewriter

\begin_inset Newline newline
\end_inset

ComboBoxDropDown
\family default
 containing the given list box.
 You can extend 
\family typewriter
ListBox
\family default
 to draw the items by yourself and use this constructor so the pop list
 will use your class and not the default 
\family typewriter
ListBox
\family default
 one.
 This constructor forces 
\family typewriter
ListBox.simpleBorder
\family default
 to 
\family typewriter
true
\family default
.
 Note: the list box items must be already set.
 
\end_layout

\begin_layout Itemize

\family typewriter
ComboBox(Object[]
\begin_inset space ~
\end_inset

items)
\family default
 Creates a combo box with the given items.
\end_layout

\begin_layout Itemize

\family typewriter
ComboBox(ComboBoxDropDown
\begin_inset space ~
\end_inset

userPopList)
\family default
 Constructs a combo box with the given 
\family typewriter
ComboBoxDropDown
\family default
 already filled.
 
\end_layout

\end_deeper
\begin_layout Itemize
The combo box drop down control is placed above or below the combo box,
 without covering it.
\end_layout

\begin_layout Itemize
The 
\family typewriter
ComboBoxDropDown
\family default
 height depends on the control's position: it will open in the direction
 that has the most space left (above or below).
 If you set the public member 
\family typewriter
fullHeight
\family default
 to 
\family typewriter
true
\family default
, then it will have the same height as the screen, maximizing the number
 of items displayed.
 In the same way, the 
\family typewriter
fullWidth
\family default
 will set the width to the screen's one.
\end_layout

\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method selects the index using the 
\family typewriter
clearValueInt
\family default
 value, which is 0 by default.
\end_layout

\begin_layout Itemize
The color used in the 
\family typewriter
setBackground()
\family default
 method will be used in the arrow button only.
 The background color of the combo box text and 
\family typewriter
ComboBoxDropDown
\family default
 will be a lighter version of the given color.
\end_layout

\begin_layout Itemize
You can change the combo box's scroll bar default width.
 To do so, you must use the static field 
\family typewriter
Button.commonGap
\family default
.
 Increasing its value will also increase the width of the arrow button and
 the scrollbar.
 Remember to reset the 
\family typewriter
Button.commonGap
\family default
 value to 0 after the combo box creation, otherwise it will keep affecting
 all combo box and buttons created after.
\end_layout

\begin_layout Itemize
You may append new items to your combo box using the method 
\family typewriter
add()
\family default
, which has three useful implementations:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
add(Object
\begin_inset space ~
\end_inset

item)
\family default
 Adds an object to the combo box.
 This method is very slow if used in loop; use the 
\family typewriter
add(Object[] items)
\family default
 to add a bunch of objects instead.
 
\end_layout

\begin_layout Itemize

\family typewriter
add(Object[]
\begin_inset space ~
\end_inset

items)
\family default
 Adds an array of objects to the combo box.
\end_layout

\begin_layout Itemize

\family typewriter
add(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startAt,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size)
\family default
 Adds a subarray of objects to the combo box.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Avoid making several calls to 
\family typewriter
add(Object item)
\family default
, always prefer 
\family typewriter
add(Object[] items)
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
You may insert new items at a desired position using 
\family typewriter
insert(Object item, int index)
\family default
.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setItemAt(int i, Object s)
\family default
 replaces the object at the given index starting from zero by the given
 object.
\end_layout

\begin_layout Itemize
Use 
\family typewriter
size()
\family default
 to retrieve the number of items available on the combo box.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getItemAt(int i)
\family default
 returns the object at the selected index; the reverse operation can be
 done with 
\family typewriter
indexOf(Object name)
\family default
, which retrieves the index of a specific object.
\end_layout

\begin_layout Itemize
Use 
\family typewriter
getSelectedIndex()
\family default
 to get the index of the selected item, or 
\family typewriter
getSelectedItem()
\family default
 to retrieve the selected object directly.
\end_layout

\begin_layout Itemize
You may select an item by its index with 
\family typewriter
setSelectedIndex(int i)
\family default
 or by its content with 
\family typewriter
setSelectedItem(Object name)
\family default
.
 In the first, -1 must be used to blank the combo box view box.
 In the last one, if the name is not found, the currently selected item
 is not changed.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
selectLast()
\family default
 method selects the last item added to the combo box, doing a scroll if
 needed.
 It calls 
\family typewriter
repaintNow()
\family default
.
 
\end_layout

\begin_layout Itemize
To remove items from a combo box, you may use one of the following three
 methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
remove(int
\begin_inset space ~
\end_inset

itemIndex)
\family default
 Removes an object from the combo box by its index.
\end_layout

\begin_layout Itemize

\family typewriter
remove(Object
\begin_inset space ~
\end_inset

item)
\family default
 Removes the given object from the combo box.
\end_layout

\begin_layout Itemize

\family typewriter
removeAll()
\family default
 Empties the combo box.
\end_layout

\end_deeper
\begin_layout Itemize
The combo box items can be sorted using the methods 
\family typewriter
qsort()
\family default
.
 One of them receives a parameter indicating if the sorting is caseless
 or not in case the elements are strings.
 In both of them, the current selection is cleared.
 
\end_layout

\begin_layout Itemize
It is possible to make a list box scroll horizontally (see 
\family typewriter

\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:ListBox"

\end_inset


\family default
).
 To be able to scroll the list box associated with this combo box, just
 call the method 
\family typewriter
enableHorizontalScroll()
\family default
.
 Two buttons will appear below the vertical scrollbar.
 The add, replace, and remove operations will be a bit slower because the
 string's width will have to be computed in order to correctly set the maximum
 horizontal scroll.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	String []items1 = {"","Orange","Apple","Grape","Lemon"};
\end_layout

\begin_layout Plain Layout

	String []items2 = {"One","Two","Three", ...};
\end_layout

\begin_layout Plain Layout

	String []items3 = {"Disabled","Enabled"};
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	ComboBox cb1 = new ComboBox(items1);
\end_layout

\begin_layout Plain Layout

	add(cb1,LEFT,TOP+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ComboBox cb2 = new ComboBox();
\end_layout

\begin_layout Plain Layout

	cb2.add(items2);
\end_layout

\begin_layout Plain Layout

	cb2.add("Twenty one");
\end_layout

\begin_layout Plain Layout

	add(cb2,RIGHT,AFTER+5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ComboBox cb3 = new ComboBox(items3);
\end_layout

\begin_layout Plain Layout

	add(cb3);
\end_layout

\begin_layout Plain Layout

	cb3.setRect(LEFT,BOTTOM,PREFERRED+4,PREFERRED);
\end_layout

\begin_layout Plain Layout

	cb3.setSelectedIndex(0);
\end_layout

\begin_layout Plain Layout

	cb3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As the preceding controls, this one also posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 when the user selects an item.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == cb1)
\end_layout

\begin_layout Plain Layout

				new MessageBox("TotalCross", "Item selected: " +  cb1.getSelectedItem()).popup
();
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.ComboBox
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ListBox
\begin_inset CommandInset label
LatexCommand label
name "sec:ListBox"

\end_inset


\end_layout

\begin_layout Standard
The list box is a control that allows the user to select one item from a
 list contained within multiple line text box.
 It looks like an open combo box (in fact, the combo box uses the list box
 control).
 Consider using the list box instead of the combo box if the screen has
 enough space available to show all items.
\end_layout

\begin_layout Standard
Here are some screenshots from a simple list box using the Android style
 from the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample).
 Note that above the list box component, there is a combo box:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/list_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/list_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/list_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing how it can be used:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ListBox lb;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		lb = new ListBox();
\end_layout

\begin_layout Plain Layout

		add(lb);
\end_layout

\begin_layout Plain Layout

		lb.add(new String[]{"Daniel","Jenny","Helge","Sandra"});
\end_layout

\begin_layout Plain Layout

		lb.add("Marc"); // you may set the rect by using PREFERRED only after the
 items were added.
\end_layout

\begin_layout Plain Layout

		lb.setRect(LEFT, TOP, PREFERRED, PREFERRED); // use control's preferred
 width based on the size of the elements
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		switch (event.type)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

				if (event.target == lb)
\end_layout

\begin_layout Plain Layout

					Object element = lb.getSelectedItem(); // in most cases, this is just
 a String and may be casted to such
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice that TotalCross' list box does not allow the selection of
 multiple items like one would expect.
 If you need this feature, use the 
\family typewriter
MultiListBox
\family default
 control (refer to the advanced controls section).
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
List box has two constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ListBox() 
\family default
Creates an empty list box.
\end_layout

\begin_layout Itemize

\family typewriter
ListBox(Object[]
\begin_inset space ~
\end_inset

items) 
\family default
Creates a list box with the given items.
 
\end_layout

\end_deeper
\begin_layout Itemize
You can append new items to your list box using one of the following methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
add(Object
\begin_inset space ~
\end_inset

item)
\family default
 Adds an object to the list box.
\end_layout

\begin_layout Itemize

\family typewriter
add(Object[]
\begin_inset space ~
\end_inset

moreItems)
\family default
 Adds an array of objects to the list box.
\end_layout

\begin_layout Itemize

\family typewriter
add(Object[]
\begin_inset space ~
\end_inset

moreItems,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startAt,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size)
\family default
 Adds a subarray of objects to the list box.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Avoid making several calls to 
\family typewriter
add(Object item)
\family default
, always prefer 
\family typewriter
add(Object[] items)
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
You may insert an object at a desired position with 
\family typewriter
insert(Object item, int index)
\family default
.
 The first item has index 0.
 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
setItemAt(int i, Object s)
\family default
 replaces the object at the given index by the given object.
 
\end_layout

\begin_layout Itemize
Use 
\family typewriter
size()
\family default
 to retrieve the number of items available on the list box.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getItemAt(int i)
\family default
 returns the object at the selected index.
 It returns an empty string if the index is outside the range.
 The reverse operation can be done with 
\family typewriter
indexOf(Object name)
\family default
, which retrieves the index of a specific object.
 It returns -1 if the object is not found.
\end_layout

\begin_layout Itemize
Use 
\family typewriter
getSelectedIndex()
\family default
 to get the index of the selected item, or 
\family typewriter
getSelectedItem()
\family default
 to retrieve the selected object directly.
 The first returns -1 if the list box has no selected index yet and the
 last one returns an empty 
\family typewriter
String
\family default
 object if none is selected.
 
\end_layout

\begin_layout Itemize
You may select an item by its index with 
\family typewriter
setSelectedIndex(int i)
\family default
 or by its content with 
\family typewriter
setSelectedItem(Object name)
\family default
.
 If the object is not found, the current selected item is not changed.
 However, if the index is not found, the current selected item is cleared
 and no item becomes selected.
\end_layout

\begin_layout Itemize
The 
\family typewriter
selectLast()
\family default
 method selects the last item added to the list box, doing a scroll if needed.
 It calls 
\family typewriter
repaintNow()
\family default
.
 
\end_layout

\begin_layout Itemize
To remove items from a list box, you may use one of the following three
 methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
remove(int
\begin_inset space ~
\end_inset

itemIndex)
\family default
 Removes an object from the list box by its index.
\end_layout

\begin_layout Itemize

\family typewriter
remove(Object
\begin_inset space ~
\end_inset

item)
\family default
 Removes the given object from the list box.
\end_layout

\begin_layout Itemize

\family typewriter
removeAll()
\family default
 Empties the list box, setting all elements of the array to 
\family typewriter
null
\family default
 so they can be garbage collected.
 
\begin_inset Newline newline
\end_inset

Attention! If you used the same object array to initialize two list boxes
 (or combo boxes), this method will 
\family typewriter
null
\family default
 both list boxes (because they use the same array reference), and you might
 get a 
\family typewriter
NullPointerException
\family default
! 
\end_layout

\end_deeper
\begin_layout Itemize
The list box items can be sorted using the method 
\family typewriter
qsort()
\family default
.
 One of them receives a parameter indicating if the sorting is caseless
 or not in case the elements are strings.
 In both of them, the current selection is cleared.
 
\end_layout

\begin_layout Itemize
To add a horizontal scroll to the list box, use the method 
\family typewriter
enableHorizontalScroll()
\family default
.
 Note that enabling this will make the addition of elements slower, because
 the list box will compute each item's width to find the maximum offset.
\end_layout

\begin_layout Itemize
To increase the default height of the horizontal scroll buttons, change
 the 
\family typewriter

\begin_inset Newline newline
\end_inset

extraHorizScrollButtonHeight
\family default
 static member.
 Its default value is 2 in 160x160 or a multiple of it in other resolutions.
 
\end_layout

\begin_layout Itemize
The 
\family typewriter
setSimpleBorder(boolean simpleBorder)
\family default
 method is used to change the border style from 3d to simple if the flag
 passed is 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Itemize
If the list box owns the focus and you type a letter, the first item with
 the typed letter is selected.
 Typing again selects the next item, and so on.
\end_layout

\begin_layout Itemize
The up/down keys can be used to scroll the list box.
\end_layout

\begin_layout Itemize
The selection color can be changed with 
\family typewriter
setCursorColor(int color)
\family default
.
 The color used in the 
\family typewriter
setBackColor()
\family default
 method will be used in the scrollbar only.
 The background color of the control will be a lighter version of the given
 color.
 
\end_layout

\begin_layout Itemize
By default, the selection is drawn using the current item's width.
 This behavior can be changed by setting the static field 
\family typewriter
useFullWidthOnSelection
\family default
 to 
\family typewriter
true
\family default
.
 If so, all list boxes will have the selection bar drawn in the full width.
\end_layout

\begin_layout Itemize
You can extend 
\family typewriter
ListBox
\family default
 to implement a customized type, like a color-chooser list box.
 If doing so, the following methods must be overridden:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
protected
\begin_inset space ~
\end_inset

void
\begin_inset space ~
\end_inset

drawItem(Graphics
\begin_inset space ~
\end_inset

g,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

dx,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

dy)
\end_layout

\begin_layout Itemize

\family typewriter
protected
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

getItemWidth(int
\begin_inset space ~
\end_inset

index)
\end_layout

\begin_layout Itemize

\family typewriter
protected
\begin_inset space ~
\end_inset

void
\begin_inset space ~
\end_inset

drawCursor(Graphics
\begin_inset space ~
\end_inset

g,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sel,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

on)
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
clear()
\family default
 method sets the 
\family typewriter
clearValueInt
\family default
 as the selected index.
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
add()
\family default
 and 
\family typewriter
remove()
\family default
 to add and remove a control, respectively, do nothing, because it does
 not make sense to add controls to or remove controls from a list box.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String[] items1 = { "", "Orange", "Apple", "Grape", "Lemon" };
\end_layout

\begin_layout Plain Layout

	String[] items2 = { "One", "Two", "Three" };
\end_layout

\begin_layout Plain Layout

	String[] items3 = { "Disabled", "Enabled" };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ListBox lb1 = new ListBox(items1);
\end_layout

\begin_layout Plain Layout

	add(lb1, LEFT, TOP + 5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ListBox lb2 = new ListBox();
\end_layout

\begin_layout Plain Layout

	lb2.add(items2);
\end_layout

\begin_layout Plain Layout

	lb2.add("Twenty one");
\end_layout

\begin_layout Plain Layout

	add(lb2);
\end_layout

\begin_layout Plain Layout

	lb2.setRect(RIGHT, AFTER + 5, PREFERRED, FILL - 5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ListBox lb3 = new ListBox(items3);
\end_layout

\begin_layout Plain Layout

	add(lb3, RIGHT, TOP + 5);
\end_layout

\begin_layout Plain Layout

	lb3.setEnabled(false);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Be careful when setting the items with an object array.
 The array is assigned as is, no copy is made.
 So, if you use the same array in another control and an item inside the
 array is changed, this change will reflect in both controls.
 However, if you add a new item, a new array is created to store the added
 item and the program works correctly.
 The best practice is to have one array for each list box control.
 To copy the contents of an object array to a new one, you can use 
\family typewriter
totalcross.sys.Vm.arrayCopy()
\family default
.
 If you're dealing specifically with string arrays, you may instead use
 
\family typewriter
totalcross.sys.Convert.cloneStringArray()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The list box also posts the 
\family typewriter
ControlEvent.PRESSED
\family default
 when an item is clicked.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	switch (event.type)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		case ControlEvent.PRESSED:
\end_layout

\begin_layout Plain Layout

			if (event.target == lb1)
\end_layout

\begin_layout Plain Layout

				new MessageBox("TotalCross", "Item selected: " + lb1.getSelectedItem()).popup(
);
\end_layout

\begin_layout Plain Layout

		break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.ListBox
\family default
 JavaDoc.
\end_layout

\begin_layout Section
MultiEdit
\end_layout

\begin_layout Standard

\family typewriter
MultiEdit
\family default
 is basically an edit with support for multiple lines, so their usage is
 pretty similar and, unless noted otherwise, the same methods listed for
 edit are available for 
\family typewriter
MultiEdit
\family default
.
 A static vertical scrollbar is added, but it is disabled/enabled as needed.
\end_layout

\begin_layout Standard
Here are some screenshots from a non-editable 
\family typewriter
MultiEdit
\family default
 using the Android style from the old UIGadgets sample being scrolled (below
 it there is a multi-lined label):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
An editable 
\family typewriter
MultiEdit
\family default
 from the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample), also using Android style, can be
 seen below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Here is an example showing a 
\family typewriter
MultiEdit
\family default
 control being used: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class MyProgram extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MultiEdit mEdit;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		// the constructor method is called with the mask, the number of lines
 and the vertical interval in pixel between two lines
\end_layout

\begin_layout 0lain Layout

		mEdit = new MultiEdit("",3,1);
\end_layout

\begin_layout Plain Layout

		add(mEdit,LEFT,TOP); // add/setRect must precede setText()
\end_layout

\begin_layout Plain Layout

		mEdit.setText("What text you want"); // eventually
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
MultiEdit
\family default
 has three constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
MultiEdit()
\family default
 Creates a 
\family typewriter
MultiEdit
\family default
 with 1 pixel as space between lines and with no lines.
 You must set the bounds using 
\family typewriter
FILL
\family default
 or 
\family typewriter
FIT
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
MultiEdit(int
\begin_inset space ~
\end_inset

rowCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

spaceBetweenLines)
\family default
 Creates a 
\family typewriter

\begin_inset Newline newline
\end_inset

MultiEdit
\family default
 with a vertical scrollbar, the given number of rows and the default width
 
\family typewriter
FILL
\family default
.
 The gap is 1 by default and the control's bounds must be specified with
 a 
\family typewriter
setRect()
\family default
.
 The space between lines may be 0.
 
\end_layout

\begin_layout Itemize

\family typewriter
MultiEdit(String
\begin_inset space ~
\end_inset

mask,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

rowCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

spaceBetweenLines) 
\family default

\begin_inset Newline newline
\end_inset

Creates a 
\family typewriter
MultiEdit
\family default
 with a vertical scrollbar, the given number of rows and uses the given
 mask to compute the 
\family typewriter
PREFERRED
\family default
 width.
 If the mask is “”, the width is set to 
\family typewriter
FILL
\family default
.
 The gap is 1 by default and the control's bounds must be given with a 
\family typewriter
setRect()
\family default
.
 The space between lines may be 0.
 Note that the mask does not masks the input.
 If the mask is "", the 
\family typewriter
FILL
\family default
 width is choosen.
 
\end_layout

\end_deeper
\begin_layout Itemize
The method 
\family typewriter
getNumberOfTextLines()
\family default
 returns the number of lines in the text.
\end_layout

\begin_layout Itemize
With 
\family typewriter
setScrollbarsAlwaysVisible(boolean asNeeded)
\family default
 you can change the
\family typewriter

\begin_inset Newline newline
\end_inset

MultiEdit
\family default
's scrollbar behavior.
 Set to 
\family typewriter
true
\family default
 to hide the vertical scrollbar when it isn't needed (instead of disabling
 it).
 This must be done right after the constructor.
 
\end_layout

\begin_layout Itemize
By default, a dotted line is shown under each text row.
 You can change this behavior with the boolean field 
\family typewriter
drawDots
\family default
.
\end_layout

\begin_layout Itemize
Use the field 
\family typewriter
gap
\family default
 to change the gap between the rows.
 The default value is 1.
\end_layout

\begin_layout Itemize
If the 
\family typewriter
MultiEdit
\family default
 object is not editable, the user can scroll the edit a page at a time just
 by clicking in the middle upper or middle lower.
 
\end_layout

\begin_layout Itemize
The following methods allow you to manipulate the 
\family typewriter
MultiEdit
\family default
 scrollbar:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
scrollToBottom()
\family default
 Moves the scroll to the bottom.
\end_layout

\begin_layout Itemize

\family typewriter
scrollToLine(int
\begin_inset space ~
\end_inset

line)
\family default
 Scrolls to the gives text line.
\end_layout

\begin_layout Itemize

\family typewriter
scrollToTop()
\family default
 Moves the scroll to the top.
\end_layout

\end_deeper
\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String s = "James Robert Baker (1946-1997) was an American author of sharply
 satirical, predominantly gay-themed transgressional fiction.
 A native Californian, his work is set almost entirely in Southern California.
 After graduating from UCLA, he began his career as a screenwriter, but
 became disillusioned and started writing novels instead.
 Though he garnered fame for his books Fuel-Injected Dreams and Boy Wonder,
 after the controversy surrounding publication of his novel, Tim And Pete,
 he faced increasing difficulty having his work published.
 According to his life partner, this was a contributing factor in his suicide.
 Baker's work has achieved cult status in the years since his death, and
 two additional novels have been posthumously published.
 First-edition copies of his earlier works have become collector's items.
 One of his novels was filmed (though it was not a financial success) and
 two others have been optioned for the movies, though they have not been
 produced.";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	MultiEdit mEdit;
\end_layout

\begin_layout Plain Layout

	mEdit = new MultiEdit("",6,1);
\end_layout

\begin_layout Plain Layout

	mEdit.drawDots = (false);
\end_layout

\begin_layout Plain Layout

	mEdit.justify = true;
\end_layout

\begin_layout Plain Layout

	mEdit.setEditable(false);
\end_layout

\begin_layout Plain Layout

	mEdit.hasCursorWhenNotEditable = false;
\end_layout

\begin_layout Plain Layout

	add(mEdit,LEFT,AFTER+2);
\end_layout

\begin_layout Plain Layout

	mEdit.setText(s); //eventually
\end_layout

\begin_layout Plain Layout

	mEdit.requestFocus();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.MultiEdit
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Grid
\end_layout

\begin_layout Standard
The grid control is used to display tabulated data, which is represented
 as a string matrix (each row is a string array).
 Optionally, you may add an extra column of check boxes on the left side
 of the grid.
\end_layout

\begin_layout Standard
Below are some examples of grid taken from the old GridTest sample (now
 inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample) using Android style.
\end_layout

\begin_layout Standard
The first two images are from a simple grid being selected:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next samples show a grid with a check in the first column.
 Note that it is possible to know which ones are checked:
\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next sample shows a grid with a combo box in the first column and an
 edit in the second one:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_007.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_009.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next case shows the columns being sorted one at a time:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_011.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_012.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_013.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_014.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The next sample shows a grid with also a check and a combo box, but this
 time, it can be seen that the combo box and check can't be manipulated
 by the user in all rows:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_015.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_016.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_017.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Finally, there is a grid whose first column has an image:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/grid_010.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Although the TotalCross' grid control usage is pretty simple and straightforward
, it is the most customizable control and it uses its own set of events
 defined in 
\family typewriter
GridEvent
\family default
s (unlike the almost all the other controls that use only 
\family typewriter
ControlEvent
\family default
s).
 That means you'll be able to start using grids within a couple of minutes,
 but it will take some time to learn to use all its features:
\end_layout

\begin_layout Itemize
Horizontal scrolling in case the columns widths are greater than the screen
 width.
\end_layout

\begin_layout Itemize
Vertical scrollbar to scroll up and down the information on the grid.
\end_layout

\begin_layout Itemize
An easy to use interface for adding/removing information to the grid.
\end_layout

\begin_layout Itemize
Optional check column which is a column that is clickable, marking an specific
 row as checked/ unchecked; this is usefull if you want the user to be able
 to select multiple rows displayed on the grid.
\end_layout

\begin_layout Itemize
Columns can be resized so that the user can see all the information displayed
 in a given column.
\end_layout

\begin_layout Itemize
Style configuration, which you can set the color of captions boxes all the
 way through the stripes colors and vertical line types.
\end_layout

\begin_layout Itemize
The 
\family typewriter
GridEvent
\family default
 class contains the events generated by the grid.
\end_layout

\begin_layout Itemize
A column may be marked as editable.
 In this case, an edit will be placed in the currently focused cell.
 
\end_layout

\begin_layout Itemize
A column can also have choices (combo box).
\end_layout

\begin_layout Itemize
The columns can be sorted by clicking on the title.
\end_layout

\begin_layout Itemize
If the text is bigger than the size of the column, you can click and hold
 in the cell to display a tooltip with the full text.
\end_layout

\begin_layout Itemize
You can customize cell back and fore colors, enabled state and choices by
 using the 
\family typewriter

\begin_inset Newline newline
\end_inset

CellController
\family default
 class.
\end_layout

\begin_layout Itemize
Clicking on the column's caption will sort in ascending order; clicking
 on it again sorts in descending order.
 
\end_layout

\begin_layout Itemize
It is possible to assign a 
\family typewriter
DataSource
\family default
 to a 
\family typewriter
Grid
\family default
, making the elements be fetched on demand.
 
\end_layout

\begin_layout Itemize
A column with size 0 is not displayed, so you can use it to store in the
 grid important information, for example the 
\family typewriter
rowid
\family default
 of a table.
\end_layout

\begin_layout Itemize
A 
\family typewriter
GridEvent
\family default
 is dispatched in the following situations:
\end_layout

\begin_deeper
\begin_layout Itemize
When the user selects a row:
\begin_inset Newline newline
\end_inset


\family typewriter
type
\family default
 = 
\family typewriter
SELECTED_EVENT
\family default
; 
\family typewriter
row
\family default
 and 
\family typewriter
col
\family default
 are set with the cell that was clicked.
\end_layout

\begin_layout Itemize
When the user checks a row:
\begin_inset Newline newline
\end_inset


\family typewriter
type
\family default
 = 
\family typewriter
CHECK_CHANGED_EVENT
\family default
; 
\family typewriter
row
\family default
 is set with the row that was checked, 
\family typewriter
col
\family default
 is 0, and 
\family typewriter
checked
\family default
 contains the current state.
\end_layout

\begin_layout Itemize
When the user press the check/uncheck all box:
\begin_inset Newline newline
\end_inset


\family typewriter
type
\family default
 = 
\family typewriter
CHECK_CHANGED_EVENT
\family default
; 
\family typewriter
col
\family default
 is 0 and 
\family typewriter
row
\family default
 is set to 
\family typewriter
Grid.ALL_CHECKED
\family default
 and 
\family typewriter
Grid.ALL_UNCHECKED
\family default
.
\end_layout

\begin_layout Itemize
When the user changes the text of an editable column or selected a new choice:
\begin_inset Newline newline
\end_inset


\family typewriter
type
\family default
 = 
\family typewriter
TEXT_CHANGED_EVENT
\family default
; 
\family typewriter
row
\family default
 and 
\family typewriter
col
\family default
 are set with the cell that changed.
 The new text can be found with 
\family typewriter
getCellText()
\family default
 whereas 
\family typewriter
Grid.oldCellText()
\family default
 contains the old text.
\end_layout

\end_deeper
\begin_layout Itemize
Grid has two constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Grid(String[]
\begin_inset space ~
\end_inset

captions,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

checkEnabled)
\family default
 Creates a grid with the given captions and, optionally, a multi-selection
 check column so that the user can select multiple rows of the grid.
 The captions can't be 
\family typewriter
null
\family default
.
 The widths will be computed as the width of the grid captions and the alignment
 will be all 
\family typewriter
LEFT
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
Grid(String[]
\begin_inset space ~
\end_inset

captions,
\begin_inset space ~
\end_inset

int[]
\begin_inset space ~
\end_inset

widths,
\begin_inset space ~
\end_inset

int[]
\begin_inset space ~
\end_inset

aligns,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

checkEnabled)
\family default
 Creates a grid with the given captions, column width, column text alignment
 and, optionally, a multi-selection check column.
 
\begin_inset Newline newline
\end_inset

If the total width is less than the grid's width, the last column will fill
 until the grid width.
 If 
\family typewriter
null
\family default
, the caption widths will be computed and used as the row width.
 If a negative value is passed, it will be computed as a percentage against
 the grid's width.
\begin_inset Newline newline
\end_inset


\family typewriter
aligns
\family default
 is the alignment of information on the given column.
 If 
\family typewriter
null
\family default
, all aligns will be 
\family typewriter
LEFT
\family default
.
 
\end_layout

\end_deeper
\begin_layout Standard
Here´s an example which will create a grid with the given captions, column
 widths, information alignment, and a check column:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Rect r = getClientRect();
\end_layout

\begin_layout Plain Layout

String []gridCaptions = {" WPT "," HDG "," DST "," ETE "," FUEL "};
\end_layout

\begin_layout Plain Layout

int gridWidths[] = 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	-25, // negative numbers are percentage of width
\end_layout

\begin_layout Plain Layout

	fm.stringWidth(" 000 "),
\end_layout

\begin_layout Plain Layout

	-25,
\end_layout

\begin_layout Plain Layout

	-20,
\end_layout

\begin_layout Plain Layout

	-20
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

int gridAligns[] = { LEFT, CENTER, RIGHT, CENTER, RIGHT };
\end_layout

\begin_layout Plain Layout

grid = new Grid(gridCaptions, gridWidths, gridAligns, false);
\end_layout

\begin_layout Plain Layout

add(grid, LEFT+3,TOP+3,r.width/2,r.height/2);
\end_layout

\begin_layout Plain Layout

grid.secondStripeColor = Color.getRGB(235,235,235);
\end_layout

\begin_layout Plain Layout

String[][] data = new String[][]
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	{"0AAAA","000","000.0","00:00","00.0"},
\end_layout

\begin_layout Plain Layout

	{"1BBBB","111","111.1","11:11","11.1"},
\end_layout

\begin_layout Plain Layout

	{"3DDDD","333","333.3","33:33","33.3"},
\end_layout

\begin_layout Plain Layout

	{"4EEEE","444","444.4","44:44","44.4"},
\end_layout

\begin_layout Plain Layout

	{"5FFFF","555","555.5","55:55","55.5"}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

grid.setItems(data);  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also consider using 
\family typewriter
ListContainer
\family default
 instead of 
\family typewriter
Grid
\family default
 if you're using devices with big screens.
 
\end_layout

\begin_layout Standard
Another example shows the correct way of increasing the size of a grid in
 order to support rotation when there is a component below it which must
 be shown or hidden.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class TCTestWin extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Grid g;
\end_layout

\begin_layout Plain Layout

	Button b1,b2;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(b1 = new Button("Hide"),LEFT,TOP);
\end_layout

\begin_layout Plain Layout

		add(b2 = new Button("Place hoder"),RIGHT,BOTTOM);
\end_layout

\begin_layout Plain Layout

		add(g = new Grid(new String[]{"Caption"},null,null,false));
\end_layout

\begin_layout Plain Layout

		setGridRect();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private void setGridRect()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		g.resetSetPositions(); // let the new coordinates work during rotation
\end_layout

\begin_layout Plain Layout

		g.setRect(LEFT,AFTER,FILL,b2.isVisible()? FILL-b2.getHeight() :  FILL,b1);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (e.type == ControlEvent.PRESSED && e.target == b1)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			b2.setVisible(!b2.isVisible());
\end_layout

\begin_layout Plain Layout

			setGridRect();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Some useful methods
\end_layout

\begin_layout Itemize

\family typewriter
add(String[]
\begin_inset space ~
\end_inset

item)
\family default
 Adds a new item to the grid.
 It's up to the user to call 
\family typewriter
Window.
\begin_inset Newline newline
\end_inset

needsPaint = true
\family default
 afterwards.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
 
\end_layout

\begin_layout Itemize

\family typewriter
add(String[]
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

row) 
\family default
The same as above but adds a new item to the grid at the given position.
\end_layout

\begin_layout Itemize

\family typewriter
add(String[][]
\begin_inset space ~
\end_inset

items)
\family default
 Appends the given rows at the end of the grid.
 It is similar to the first 
\family typewriter
add()
\family default
 method except that it appends more than one row.
\end_layout

\begin_layout Itemize

\family typewriter
clear()
\family default
 Selects the 
\family typewriter
clearValueInt
\family default
 row, which defaults to -1.
 That is, by default, this method deselects all rows.
 
\end_layout

\begin_layout Itemize

\family typewriter
getCellText(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col)
\family default
 Returns the text of the given cell.
 If the grid has a check column, 
\family typewriter
col
\family default
 must start from 1.
 
\end_layout

\begin_layout Itemize

\family typewriter
setCellText(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

Strint
\begin_inset space ~
\end_inset

text)
\family default
 Sets the text of the given cell.
 If the grid has a check column, 
\family typewriter
col
\family default
 must start from 1.
\end_layout

\begin_layout Itemize

\family typewriter
getItem(int
\begin_inset space ~
\end_inset

index)
\family default
 Returns the row from the given index.
 This method works with or without a 
\family typewriter
DataSource
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
getItemsVector()
\family default
 Returns a vector containing all information inside the grid.
 As with 
\family typewriter
getItem()
\family default
, the returned data does not contain information about the selected item's.
 Note that if a 
\family typewriter
DataSource
\family default
 is assigned, this method returns 
\family typewriter
null
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
getSelectedIndex()
\family default
 Gets the number of the currently selected row, or -1 if none is selected.
 
\end_layout

\begin_layout Itemize

\family typewriter
getSelectedItem()
\family default
 Gets the string array for the currently selected row.
 Any changes made into the returned array is applied back to the grid automatica
lly (because it holds the grid's data).
 
\end_layout

\begin_layout Itemize

\family typewriter
horizontalScroll(boolean
\begin_inset space ~
\end_inset

toLeft)
\family default
 Scrolls the grid to left or right.
 It returns 
\family typewriter
true
\family default
 if the grid was scrolled; 
\family typewriter
false
\family default
 if it's impossible to scroll in that direction.
\end_layout

\begin_layout Itemize

\family typewriter
isChecked(int
\begin_inset space ~
\end_inset

lineIndex)
\family default
 Returns if the given row is checked.
\end_layout

\begin_layout Itemize

\family typewriter
setChecked(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

check)
\family default
 Checks or unchecks a given row.
 This method only works with a grid that has checks and 
\family typewriter
repaint()
\family default
 must be called.
 
\end_layout

\begin_layout Itemize

\family typewriter
replace(String[]
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

row)
\family default
 Replaces the given row by the text.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
\end_layout

\begin_layout Itemize

\family typewriter
move(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

up)
\family default
 Moves the items at given indexes one row up or down depending on the given
 second parameter.
 If it is 
\family typewriter
true
\family default
, the items at index 
\family typewriter
row
\family default
 will be shown in 
\family typewriter
row-1
\family default
 and the items at index 
\family typewriter
row-1
\family default
 will be shown at index 
\family typewriter
row
\family default
.
 If it is 
\family typewriter
false
\family default
, the items at index 
\family typewriter
row
\family default
 will be shown in 
\family typewriter
row+1
\family default
 and the items at index 
\family typewriter
row+1
\family default
 will be shown at index 
\family typewriter
row
\family default
.
 It does not make sense to use this method if there's a 
\family typewriter
DataSource
\family default
 assigned.
\end_layout

\begin_layout Itemize

\family typewriter
del(int
\begin_inset space ~
\end_inset

row)
\family default
 Removes the given row from the grid.
 This method does not work if there's a 
\family typewriter
DataSource
\family default
 assigned.
 
\end_layout

\begin_layout Itemize

\family typewriter
setSelectedRow(int
\begin_inset space ~
\end_inset

line)
\family default
 Selects the given row number.
 If -1, unselects the grid.
 
\end_layout

\begin_layout Itemize

\family typewriter
setItems(String[][]
\begin_inset space ~
\end_inset

items
\family default
) Sets the grid items to be displayed.
 Notice that it needs to conform to the numbers of columns that the grid
 currently have.
 This method removes any assigned 
\family typewriter
DataSource
\family default
.
 The strings inside the matrix cannot be 
\family typewriter
null
\family default
.
 If 
\family typewriter
items == null
\family default
, the grid will remain empty.
 
\end_layout

\begin_layout Itemize

\family typewriter
size()
\family default
 Returns the number of rows in this grid.
\end_layout

\begin_layout Itemize

\family typewriter
setColumnEditable(int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

editable
\family default
) Enables/disables the edition for all cells of a grid's column.
 Note that setting an editable column as not editable will remove all its
 formats.
 Returns the previous edit or the new one, so you can easily change its
 formats.
 Important: this must be called AFTER the grid has set its bounds.
\end_layout

\begin_layout Itemize

\family typewriter
isColumnEditable(int
\begin_inset space ~
\end_inset

col)
\family default
 Returns 
\family typewriter
true
\family default
 if the given column is editable.
 
\end_layout

\begin_layout Itemize

\family typewriter
setColumnChoices(int
\begin_inset space ~
\end_inset

col,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

choices)
\family default
 Enables a combo box with choices for all cells of a grid's column.
 The given choice array is used to create a pop list that is shown when
 the user clicks on the column.
 Note that calling this method removes any edit assigned to this column.
 You can change dynamically the choices by extending the 
\family typewriter
CellController
\family default
 class.
 Passing a 
\family typewriter
null
\family default
 value removes any combo box assigned to the column.
\end_layout

\begin_layout Itemize

\family typewriter
moveFocusToNextControl(Control
\begin_inset space ~
\end_inset

c,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

forward)
\family default
 Traverses throught the edits of the grid.
 It returns the selected control or 
\family typewriter
null
\family default
 if none was found.
\end_layout

\begin_layout Itemize

\family typewriter
removeAll()
\family default
 This method does nothing.
 To remove all elements, 
\family typewriter
removeAllElements()
\family default
 should be used instead.
\end_layout

\begin_layout Itemize

\family typewriter
removeAllElements()
\family default
 Remove all elements from the grid, leaving it blank.
 Removes any assigned 
\family typewriter
DataSource
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
setDataSource(DataSource
\begin_inset space ~
\end_inset

ds,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

nrItems)
\family default
 Passing the class that implements the 
\family typewriter
Grid.DataSource
\family default
 interface and the total number of items allows the grid to request data
 on demand.
 This greatly reduces the memory usage, because only the number of visible
 items may be loaded at each time, but makes the grid navigation slower.
 Note that in this mode the grid scroll will not be realtime: the data will
 be requested only when the user releases the scroll bar.
 The data source has a single method: 
\family typewriter
String[][] getItems(int startingRow, int count)
\family default
, that must return the given number of items or less.
\begin_inset Newline newline
\end_inset

Note that when using 
\family typewriter
DataSource
\family default
s, the 
\family typewriter
add()
\family default
, 
\family typewriter
remove()
\family default
, 
\family typewriter
insert()
\family default
, etc methods CANNOT BE USED.
 A 
\family typewriter
DataSource
\family default
 is mostly used to assign a 
\family typewriter
ResultSet
\family default
 to it, so it's nonsense any data modification.
 Note that the scroll is made not live scrolling to speedup data retrieval.
\begin_inset Newline newline
\end_inset

Here's a sample of a 
\family typewriter
getItems()
\family default
 implementation: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public String[][] getItems(int startIndex, int count)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (activeRS != null)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		activeRS.absolute(startIndex);
\end_layout

\begin_layout Plain Layout

		activeRS.getStrings(count);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return null;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
getDataSource()
\family default
 Returns the 
\family typewriter
DataSource
\family default
 assigned for this grid, or 
\family typewriter
null
\family default
 if there is none.
 
\end_layout

\begin_layout Itemize

\family typewriter
setCellController(Grid.CellController
\begin_inset space ~
\end_inset

cc)
\family default
 Passing the class that extends 
\family typewriter
Grid.
\begin_inset Newline newline
\end_inset

CellController
\family default
 will allow you to have a fine control of each cell of the grid.
 Note that using a cell controller will make the drawings slower.
 The class has the following methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
getBackColor(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col)
\family default
 Must return the background color for the given cell, or
\family typewriter
 
\family default
-1 if you want to use the default one.
 Note that if the grid has a check, the back color of the check cell will
 be requested passing 
\family typewriter
col
\family default
 value as -1.
 
\end_layout

\begin_layout Itemize

\family typewriter
getForeColor(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col)
\family default
 Must return the foreground color for the given cell, or -1 if you want
 to use the default one.
\end_layout

\begin_layout Itemize

\family typewriter
getFont(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col)
\family default
 Must return the font to be used in this cell, or 
\family typewriter
null
\family default
 to use the default control's font.
 
\end_layout

\begin_layout Itemize

\family typewriter
isEnabled(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col)
\family default
 Must return if the given cell is enabled, i.
 e., can have input and can be selected.
 Regarding the input, it will only work if
\begin_inset Newline newline
\end_inset


\family typewriter
setColumnChoices()
\family default
 or 
\family typewriter
setEditable()
\family default
 was called to the given column.
 Regarding the selection, it may also disable column's check state change.
\end_layout

\begin_layout Itemize

\family typewriter
String[]
\begin_inset space ~
\end_inset

getChoices(int
\begin_inset space ~
\end_inset

row,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

col)
\family default
 Returns a customized set of choices for the given cell.
 Must return 
\family typewriter
null
\family default
 if you want to use the default set.
 Only works if 
\family typewriter
setColumnChoices()
\family default
 was called to the given column.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that the 
\family typewriter
setColumnEditable()
\family default
 and 
\family typewriter
setColumnChoices()
\family default
 methods are mutually exclusive: calling one cancels the effects of the
 other.
 The 
\family typewriter
setDataSource()
\family default
 and 
\family typewriter
setItems()
\family default
 methods are also mutually exclusive.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Some useful attributes
\end_layout

\begin_layout Itemize

\family typewriter
boldCheck
\family default
 Draws a bold check instead of the tiny one.
 Useful for high resolution devices.
\end_layout

\begin_layout Itemize

\family typewriter
canClickSelectAll
\family default
 Sets to 
\family typewriter
false
\family default
 to disable the click on the check column of the captions to select and
 unselect all checks.
\end_layout

\begin_layout Itemize

\family typewriter
disableSort
\family default
 Disables the sort when clicking in the column's caption.
\end_layout

\begin_layout Itemize

\family typewriter
drawCheckBox
\family default
 Boolean that defines if the box around the check will or not be drawn.
\end_layout

\begin_layout Itemize

\family typewriter
enableColumnResize
\family default
 Must be set to 
\family typewriter
false
\family default
 to disable the column resize by dragging the column separator line.
\end_layout

\begin_layout Itemize

\family typewriter
extraHorizScrollButtonHeight
\family default
 A value that can increase the horizontal scroll buttons height.
 Defaults 2 in 160x160 or a multiple of it in other resolutions.
 
\end_layout

\begin_layout Itemize

\family typewriter
oldCellText
\family default
 The text that was in the cell before the user had edited it.
\end_layout

\begin_layout Itemize

\family typewriter
checkColor
\family default
 The color used to draw the check.
 Defaults to black.
 
\end_layout

\begin_layout Itemize

\family typewriter
captionsBackColor
\family default
 The color used to fill the captions area.
 
\family typewriter
BRIGHT
\family default
 by default.
\end_layout

\begin_layout Itemize

\family typewriter
highlightColor
\family default
 The Color of the selected (highlighted) row.
 
\family typewriter
DARK
\family default
 by default.
 
\end_layout

\begin_layout Itemize

\family typewriter
firstStripeColor
\family default
 Color of the first stripe.
 
\family typewriter
WHITE
\family default
 by default.
\end_layout

\begin_layout Itemize

\family typewriter
secondStripeColor
\family default
 Color of the second stripe.
 
\family typewriter
drawStripes
\family default
 must also be set to 
\family typewriter
true
\family default
.
 
\family typewriter
BRIGHT
\family default
 by default.
 
\end_layout

\begin_layout Itemize

\family typewriter
verticalLineStyle
\family default
 Defines the vertical line style of the grid.
 Possible values are 
\family typewriter
VERT_DOT
\family default
 (default), 
\family typewriter
VERT_LINE
\family default
, and 
\family typewriter
VERT_NONE
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
captions
\family default
 These are the column captions.
 Can be directly assigned, but always make sure it has the same number of
 columns of the grid, or the widths array, set with the 
\family typewriter
setWidths()
\family default
 method.
 
\end_layout

\begin_layout Standard
Another sample:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	String []gridCaptions = {"Caption 1", "Caption 2", "Caption 3", "Caption
 4", "Caption 5", "Caption 6", "Caption 7" };
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	int ww = fm.getTextWidth("xxxxxxxxx"); 
\end_layout

\begin_layout Plain Layout

	int gridWidths[] = {ww, ww, ww, ww, ww, ww, ww};
\end_layout

\begin_layout Plain Layout

	int gridAligns[] = { LEFT,LEFT,LEFT,LEFT,LEFT,LEFT,LEFT}; 
\end_layout

\begin_layout Plain Layout

	grid = new Grid( gridCaptions, gridWidths, gridAligns, false );
\end_layout

\begin_layout Plain Layout

	grid.firstStripeColor = Color.GREEN;
\end_layout

\begin_layout Plain Layout

	grid.secondStripeColor = Color.YELLOW;
\end_layout

\begin_layout Plain Layout

	grid.verticalLineStyle = Grid.VERT_NONE;
\end_layout

\begin_layout Plain Layout

	add(grid);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	grid.setRect(LEFT, AFTER+2, FILL, FIT, btnRemove);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	String items[][] = new String[4][7]; 
\end_layout

\begin_layout Plain Layout

	for(int i = 0; i < 4; i++)
\end_layout

\begin_layout Plain Layout

		for(int j = 0; j < 7; j++)
\end_layout

\begin_layout Plain Layout

			items[i][j] = "BRAZIL " + j;
\end_layout

\begin_layout Plain Layout

	grid.setItems(items); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.Grid
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ToolTip 
\end_layout

\begin_layout Standard
It allows the display of a tooltip when user keeps the pen in the control.
 On Windows and Linux desktop, the tooltip is also shown when the mouse
 stays over a control.
 The default popup delay (
\family typewriter
millisDelay
\family default
) is 1000 ms and the amount of time it will be displayed (
\family typewriter
millisDisplay
\family default
) is 2000 ms (a pen up also hides the control).
 The tooltip must always be added after the control is added and had its
 bounds set; otherwise, you must call the added method to initialize the
 tip's bounds.
\end_layout

\begin_layout Standard
You can set the border color by changing the 
\family typewriter
borderColor
\family default
 field (no border by default) and also the internal gap (the field 
\family typewriter
insideGap
\family default
).
 By default, it is -1 and no border is shown.
 
\end_layout

\begin_layout Standard
The static members 
\family typewriter
distX
\family default
 and 
\family typewriter
distY
\family default
 lets you set the default distance from the control for all tooltips.
 They must be set before the tooltip is created and are 0 by default.
 
\end_layout

\begin_layout Standard
The constructor receives the control which the tooptip refers to and the
 message that will be displayed.
 You can use the new line character 
\family typewriter

\backslash
n
\family default
 like a label control.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ToolTip t = new ToolTip(control, "Hi!
\backslash
nIt's Me"); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A 
\family typewriter
ControlEvent.PRESSED
\family default
 event will be dispatched to the attached control right before the text
 is shown.
 You can then set the tip to a new value using 
\family typewriter
setText()
\family default
; setting to an empty string will disable the tooltip at that moment.
 Calling 
\family typewriter
setControlRect()
\family default
 also changes the rectangle around which the tooltip will be displayed.
 By default, it's used the absolute rectangle of the control passed in the
 constructor.
 The placement of the tooltip will be defined based on it, in a way that
 the control is not obscured.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
ToolTip
\family default
 implements the 
\family typewriter
PenListener
\family default
 interface.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Examples:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ToolTip.distX = 10; // 0 by default
\end_layout

\begin_layout Plain Layout

ToolTip.distY = 4; // 0 by default
\end_layout

\begin_layout Plain Layout

ToolTip.insideGap = 8; // 4 by default 
\end_layout

\begin_layout Plain Layout

Button b; 
\end_layout

\begin_layout Plain Layout

add(b = new Button("Hello Tooltip!"),CENTER,BOTTOM); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ToolTip t = new ToolTip(b, "Hi, this is a button");
\end_layout

\begin_layout Plain Layout

t.borderColor = 0x00FF00; // -1 (none) by default 
\end_layout

\begin_layout Plain Layout

t.millisDelay = 500; // 1000 by default t.millisDisplay = 4000; // 2000 by
 default
\end_layout

\begin_layout Plain Layout

t.setBackColor(Color.getRGB(250,0,0)); // same as control's container by default
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private void addToolTip(Control c, String text)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ToolTip t = new ToolTip(c,text);
\end_layout

\begin_layout Plain Layout

	t.millisDelay = 500;
\end_layout

\begin_layout Plain Layout

	t.millisDisplay = 5000;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	if (Settings.isColor)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		t.borderColor = Color.BLACK;
\end_layout

\begin_layout Plain Layout

		t.setBackColor(Color.getRGB(250,250,0));
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	add(btnChooseColor = new Button("Choose new background color"), LEFT, TOP+2);
\end_layout

\begin_layout Plain Layout

	addToolTip(btnChooseColor, "Click this button to open a
\backslash
nChoiceDialog that contains a
\backslash
nColorList control from where
\backslash
nyou can choose a back new color");
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more information, check the 
\family typewriter
totalcross.ui.ToolTip
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
Some Advanced Controls
\end_layout

\begin_layout Standard
In this chapter, some advanced controls will be described in detail.
 They are organized in alphabetical order.
\end_layout

\begin_layout Section
AlignedLabelsContainer
\end_layout

\begin_layout Standard
This class is a 
\family typewriter
Container
\family default
 used to align all controls to the maximum width of a set of labels.
 You can define the label alignment.
 The controls that you add to this container are placed at the right of
 the labels.
\end_layout

\begin_layout Standard
Here's a sample of how to use it: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] labels =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"Name",
\end_layout

\begin_layout Plain Layout

	"Born date",
\end_layout

\begin_layout Plain Layout

	"Telephone",
\end_layout

\begin_layout Plain Layout

	"Address",
\end_layout

\begin_layout Plain Layout

	"City",
\end_layout

\begin_layout Plain Layout

	"Country", 
\end_layout

\begin_layout Plain Layout

	""
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

AlignedLabelsContainer c = new AlignedLabelsContainer(labels);
\end_layout

\begin_layout Plain Layout

c.setBorderStyle(BORDER_LOWERED);
\end_layout

\begin_layout Plain Layout

c.labelAlign = RIGHT;
\end_layout

\begin_layout Plain Layout

c.foreColors = new int[]{Color.RED,Color.BLACK,Color.BLACK,Color.BLACK,Color.BLACK,Col
or.BLACK,Color.BLACK,};
\end_layout

\begin_layout Plain Layout

c.setInsets(2,2,2,2);
\end_layout

\begin_layout Plain Layout

c.setFont(font.asBold()); // labels are bold
\end_layout

\begin_layout Plain Layout

c.childrenFont = font; // but controls are normal
\end_layout

\begin_layout Plain Layout

add(c,LEFT+2,TOP+2,FILL-2,PREFERRED+4);
\end_layout

\begin_layout Plain Layout

for (int i =0; i < labels.length-2; i++)
\end_layout

\begin_layout Plain Layout

	c.add(new Edit(),LEFT+2,AFTER+(i==0?2:0));
\end_layout

\begin_layout Plain Layout

c.add(new ComboBox(new String[]{"Brazil","France"}),LEFT+2,AFTER);
\end_layout

\begin_layout Plain Layout

c.add(new Button("Insert data"),RIGHT,SAME);
\end_layout

\begin_layout Plain Layout

c.add(new Button("Clear data"),RIGHT,AFTER,SAME,PREFERRED); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The code above generates a screen similar to the shown below taken from
 the old UIGadgets sample using Android style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/align_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
It is possible to do this alignment by hand.
 However, it is much easier using this control.
\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.AlignedLabelsContainer
\family default
 JavaDoc.
\end_layout

\begin_layout Section
AnimatedButton
\end_layout

\begin_layout Standard
An animated button control.
 It extends 
\family typewriter
Animation
\family default
, the class described in the next section.
\end_layout

\begin_layout Standard
This control displays an animated button which can take 
\family typewriter
S
\family default
 different states and each state is fade in or out in 
\family typewriter
F
\family default
 frames.
 
\family typewriter
S
\family default
 and 
\family typewriter
F
\family default
 represent the two first constructor arguments.
 The frames of this special animation have to be ordered to be supported
 by this class.
 The states are numbered from 0 to 
\family typewriter
S-1
\family default
 and the frames order is the following depending on the layout type value:
 
\end_layout

\begin_layout Itemize

\family typewriter
FADE_OUT_LAYOUT
\family default
: 
\family typewriter
S0F0
\family default
,
\family typewriter
S0F1
\family default
,
\family typewriter
S0F2
\family default
,
\family typewriter
S1F0
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S1F2
\family default
,
\family typewriter
S2F0
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S2F2
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
FADE_IN_LAYOUT
\family default
: 
\family typewriter
S0F2
\family default
,
\family typewriter
S0F1
\family default
,
\family typewriter
S0F0
\family default
,
\family typewriter
S1F2
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S1F0
\family default
,
\family typewriter
S2F2
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S2F0
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
FADE_OUT_IN_LAYOUT
\family default
: 
\family typewriter
S0F0
\family default
,
\family typewriter
S0F1
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S1F0
\family default
,
\family typewriter
S1F1
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S2F0
\family default
,
\family typewriter
S2F1
\family default
,
\family typewriter
S0F1
\family default
 
\end_layout

\begin_layout Standard
where 
\family typewriter
S
\family default
 stands for state, 
\family typewriter
F
\family default
 for frame and where 
\family typewriter
S0F0
\family default
, 
\family typewriter
S1F0
\family default
, and 
\family typewriter
S2F0
\family default
 are the full states and the others are transition frames.
 
\end_layout

\begin_layout Standard
Here is an example of how to use this class:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.game.AnimatedButton;
\end_layout

\begin_layout Plain Layout

import totalcross.io.IOException;
\end_layout

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.image.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	AnimatedButton btn;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			btn = new AnimatedButton(new Image("Ping_onOff.png"), 2,6,AnimatedButton.FADE_O
UT_LAYOUT,-1,50);
\end_layout

\begin_layout Plain Layout

			add(btn, CENTER, CENTER);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (ImageException e) {}
\end_layout

\begin_layout Plain Layout

		catch (IOException e) {}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

where 
\family typewriter
Ping_onOff.png
\family default
 is the following image:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/Ping_onOff.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

which results in the following screenshots (the button starts an animation
 when it's clicked on):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_007.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_009.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_010.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_011.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animatedbutton_012.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.game.AnimatedButton
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Animation
\end_layout

\begin_layout Standard
This control displays an animation that can be loaded from indexed PNG files
 (one frame per image), a multi-framed PNG (this kind of PNG file contains
 a list of images having all the same size and that lay side by side), or
 a GIF.
 Some examples taken from the game Scape and GifAnimatedTest are shown below,
 where the first one uses multi-framed PNGs and the second one uses GIFs
 (the PNG images are below the sample windows which use them):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/hockey.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/ball.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/animation_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.game.Animation
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ArrowButton
\end_layout

\begin_layout Standard
A class used to display a 
\family typewriter
Button
\family default
 with an arrow inside.
 The following code shows the window below it:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.gfx.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ArrowButton b1 = new ArrowButton(Graphics.ARROW_UP, 10, Color.BLACK);
\end_layout

\begin_layout Plain Layout

		add(b1, LEFT, TOP);
\end_layout

\begin_layout Plain Layout

		ArrowButton b2 = new ArrowButton(Graphics.ARROW_DOWN, 20, Color.BLUE);
\end_layout

\begin_layout Plain Layout

		add(b2, AFTER, SAME);
\end_layout

\begin_layout Plain Layout

		ArrowButton b3 = new ArrowButton(Graphics.ARROW_LEFT, 30, Color.CYAN);
\end_layout

\begin_layout Plain Layout

		add(b3, LEFT, AFTER);
\end_layout

\begin_layout Plain Layout

		ArrowButton b4 = new ArrowButton(Graphics.ARROW_RIGHT, 40, Color.GREEN);
\end_layout

\begin_layout Plain Layout

		add(b4, AFTER, SAME);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/arrowbutton_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
In this class,
\family typewriter
 setArrowSize(int
\begin_inset space ~
\end_inset

kk) 
\family default
Changes the arrow size of the button.
 Note that the button size won't be changed.
 Some examples using 
\family typewriter
b4
\family default
 of the above picture:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
b4.setArrowSize(20);
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
b4.setArrowSize(80);
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/arrowbutton_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/arrowbutton_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\family typewriter
toString()
\family default
 shows a string representation of the object and its direction.
 For example, the code below
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Vm.debug(b1.toString());
\end_layout

\begin_layout Plain Layout

Vm.debug(b2.toString());
\end_layout

\begin_layout Plain Layout

Vm.debug(b3.toString());
\end_layout

\begin_layout Plain Layout

Vm.debug(b4.toString());
\end_layout

\end_inset

prints the following on the console:
\begin_inset Newline newline
\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

totalcross.ui.ArrowButton@131f71a, dir: 1 
\end_layout

\begin_layout Plain Layout

totalcross.ui.ArrowButton@15601ea, dir: 2 
\end_layout

\begin_layout Plain Layout

totalcross.ui.ArrowButton@197d257, dir: 3 
\end_layout

\begin_layout Plain Layout

totalcross.ui.ArrowButton@7259da, dir: 4
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.game.ArrowButton
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Bar
\end_layout

\begin_layout Standard

\family typewriter
Bar
\family default
 is a class that provides a title area and a button area (at right).
 The title and the button are optional, although it doesn't make sense to
 have a bar without title and buttons.
 You can add or remove buttons, and change the title text; the title text
 can have an icon at left.
 
\end_layout

\begin_layout Standard
When a button is pressed, a 
\family typewriter
ControlEvent.PRESSED
\family default
 is sent to the caller, and the button index can be retrieved using the
 
\family typewriter
getSelectedIndex()
\family default
 method.
 By default, the background is shaded (
\family typewriter
BACKGROUND_SHADED
\family default
).
 You can change it to plain using 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

backgroundStyle = BACKGROUND_SOLID;
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
Here's an example of how to use it: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Font f = Font.getFont(true,Font.NORMAL_SIZE+2);
\end_layout

\begin_layout Plain Layout

Bar h1 = new Bar("fakeboot");
\end_layout

\begin_layout Plain Layout

h1.canSelectTitle = true;
\end_layout

\begin_layout Plain Layout

h1.setFont(f);
\end_layout

\begin_layout Plain Layout

h1.setBackForeColors(0x0A246A,Color.WHITE);
\end_layout

\begin_layout Plain Layout

h1.addButton(new Image("ic_dialog_alert.png"));
\end_layout

\begin_layout Plain Layout

h1.addButton(new Image("ic_dialog_info.png"));
\end_layout

\begin_layout Plain Layout

add(h1, LEFT,0,FILL,PREFERRED); // use 0 instead of TOP to overwrite the
 default menu area 
\end_layout

\end_inset

which results in the following images using Android style, where the bottom
 images show the title and one of the buttons being pressed:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Note that the top and bottom components of the the old UIControls sample
 (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample) are bars.
\end_layout

\begin_layout Standard
You can also add a spinner to the bar and manipulate it using the following
 methods: 
\end_layout

\begin_layout Itemize

\family typewriter
createSpinner(int
\begin_inset space ~
\end_inset

color)
\family default
 Creates a spinner with the given color.
 The spinner will be placed at the right of the title (only works if there's
 a title).
 It must be created before the bar is added to a container.
\end_layout

\begin_layout Itemize

\family typewriter
startSpinner()
\family default
 Shows and starts the spinner (if one has been assigned to the spinner field).
 If there is no spinner, a 
\family typewriter
NullPointerException
\family default
 will be thrown.
 
\begin_inset Newline newline
\end_inset

Changing the code of the example given above after line 7 results in:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

h1.createSpinner(Color.WHITE);
\end_layout

\begin_layout Plain Layout

add(h1, LEFT,0,FILL,PREFERRED); // use 0 instead of TOP to overwrite the
 default menu area
\end_layout

\begin_layout Plain Layout

h1.startSpinner();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/bar_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
stopSpinner()
\family default
 Stops and hides the spinner (if one has been assigned to the spinner field).
 If there is no spinner, a 
\family typewriter
NullPointerException
\family default
 will be thrown.
\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.Bar
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ButtonMenu
\end_layout

\begin_layout Standard
This class adds a multi-button menu that can be scrolled horizontally (single-ro
w) or vertically (multiple-rows), using a scroll bar or flicking.
 The buttons can have almost all properties present in the 
\family typewriter
Button
\family default
 class, like (the 
\family typewriter
ButtonMenu
\family default
 fields listed below similar to the ones in the class 
\family typewriter
Button
\family default
 are ommited from the fields description at the end of this section):
\end_layout

\begin_layout Itemize

\family typewriter
borderType
\family default
 (
\family typewriter
Button.setBorder()
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
cornerRadius3DG
\family default
 (
\family typewriter
Button.cornerRadius3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
borderWidth3DG
\family default
 (
\family typewriter
Button.borderWidth3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
borderColor3DG
\family default
 (
\family typewriter
Button.borderColor3DG
\family default
) 
\end_layout

\begin_layout Itemize

\family typewriter
topColor3DG
\family default
 (
\family typewriter
topColor3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
bottomColor3DG
\family default
 (
\family typewriter
bottomColor3DG
\family default
)
\end_layout

\begin_layout Itemize

\family typewriter
pressedColor
\family default
 (
\family typewriter
Button.setPressedColor()
\family default
)
\end_layout

\begin_layout Standard
There are also other properties that can be set, like:
\end_layout

\begin_layout Itemize

\family typewriter
textGap 
\end_layout

\begin_layout Itemize

\family typewriter
buttonVertGap 
\end_layout

\begin_layout Itemize

\family typewriter
buttonHorizGap 
\end_layout

\begin_layout Itemize

\family typewriter
imageSize 
\end_layout

\begin_layout Itemize

\family typewriter
borderGap
\end_layout

\begin_layout Standard
The sizes above are not in pixels, but in percentage of the font's height.
 So, a value of 25 means 25% of the font's height, or 1/4; 150 means 150%
 of the font's height, or 1.5x; and so on.
 This enabled the gaps be constant in physical inches no matter the screen
 DPI or resolution.
 
\end_layout

\begin_layout Standard
The UIContols program has good samples on how to use this class.
 Some images are shown below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/buttonmenu_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ButtonMenu
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ComboBoxEditable
\end_layout

\begin_layout Standard
This control is a 
\family typewriter
ComboBox
\family default
 and is usually used as an edit that holds old typed values.
 When the user types a word, it is automatically selected in the combo box.
 Here's a sample of how to use it similar to the one used to be found in
 the old UIGadgets samples:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] items = 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"Ana",
\end_layout

\begin_layout Plain Layout

	"Barbara",
\end_layout

\begin_layout Plain Layout

	"Raul",
\end_layout

\begin_layout Plain Layout

	"Marcelo",
\end_layout

\begin_layout Plain Layout

	"Eduardo",
\end_layout

\begin_layout Plain Layout

	"Denise",
\end_layout

\begin_layout Plain Layout

	"Michelle",
\end_layout

\begin_layout Plain Layout

	"Guilherme",
\end_layout

\begin_layout Plain Layout

	"Vera",
\end_layout

\begin_layout Plain Layout

	"Dulce",
\end_layout

\begin_layout Plain Layout

	"Leonardo",
\end_layout

\begin_layout Plain Layout

	"Andre",
\end_layout

\begin_layout Plain Layout

	"Gustavo",
\end_layout

\begin_layout Plain Layout

	"Anne",
\end_layout

\begin_layout Plain Layout

	"Renato",
\end_layout

\begin_layout Plain Layout

	"Zelia",
\end_layout

\begin_layout Plain Layout

	"Helio"
\end_layout

\begin_layout Plain Layout

};    
\end_layout

\begin_layout Plain Layout

ComboBoxEditable cbe = new ComboBoxEditable(items);
\end_layout

\begin_layout Plain Layout

cbe.qsort();
\end_layout

\begin_layout Plain Layout

add(cbe, LEFT,BOTTOM-100);  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The next images show the result of this sample and some screenshots from
 the old sample:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/comboeditable_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ComboBoxEditable
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ColorList
\end_layout

\begin_layout Standard
Implements a 
\family typewriter
ListBox
\family default
 where colors can be choosen from.
 The only functional methods are 
\family typewriter
setColors()
\family default
, 
\family typewriter
getSelectedItem()
\family default
 and 
\family typewriter
getSelectedColor()
\family default
.
 Next an example of how to use this class as a combo box color chooser:
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

add(foreCombo = new ComboBox(new ColorList()), CENTER, BOTTOM); 
\end_layout

\end_inset

which results in the following windows:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorlist_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ColorList
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Document
\end_layout

\begin_layout Standard
Represents an HTML Document.
 To change the font size, you must change 
\family typewriter
Style.
\begin_inset Newline newline
\end_inset

defaultFontSize
\family default
.
 To change the default colors, change 
\family typewriter
UIColors.htmlXXX
\family default
 fields, and don't forget to call 
\family typewriter
htmlContainer.setBackForeColors()
\family default
 with these colors.
 
\end_layout

\begin_layout Standard
To see it being used, see the sample HtmlBrowser.
 Some screen shots of it are in the section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:HtmlContainer"

\end_inset

.
\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.html.Document
\family default
 JavaDoc.
\end_layout

\begin_layout Section
FlowContainer
\end_layout

\begin_layout Standard
This class is a container that will place controls one after another and,
 once the width has been reached, it wraps to the next line.
 All controls must be added before calling 
\family typewriter
setRect()
\family default
 or 
\family typewriter
add()
\family default
.
 When calling 
\family typewriter
setRect()
\family default
 or 
\family typewriter
add()
\family default
 for this control, the height must be 
\family typewriter
PREFERRED
\family default
 (with adjustments, if needed).
 Also, if 
\family typewriter
initUI()
\family default
 is overriden, be sure to call 
\family typewriter
super.initUI()
\family default
.
\end_layout

\begin_layout Standard
Code example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Settings.uiAdjustmentsBasedOnFontHeight = true;
\end_layout

\begin_layout Plain Layout

Label l = new Label("Do you agree that TotalCross is a great development
 platform?");
\end_layout

\begin_layout Plain Layout

l.autoSplit = true;
\end_layout

\begin_layout Plain Layout

add(l, LEFT,AFTER,FILL,PREFERRED);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

FlowContainer fc = new FlowContainer(50,25);
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("Probably Yes"));
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("Probably No"));
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("Maybe"));
\end_layout

\begin_layout Plain Layout

fc.add(new Radio("I don't know"));
\end_layout

\begin_layout Plain Layout

add(fc, LEFT,AFTER,FILL,PREFERRED); 
\end_layout

\end_inset

which results in:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/flow_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.FlowContainer
\family default
 JavaDoc.
\end_layout

\begin_layout Section
HtmlContainer
\begin_inset CommandInset label
LatexCommand label
name "sec:HtmlContainer"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
HtmlContainer
\family default
 renders an HTML Page.
\end_layout

\begin_layout Standard
Note that the form controls back and fore colors are defined by 
\family typewriter
UIColors.
\begin_inset Newline newline
\end_inset

htmlContainerControlsFore
\family default
 and 
\family typewriter
UIColors.htmlContainerControlsBack
\family default
.
 
\end_layout

\begin_layout Standard
When a link is clicked, a 
\family typewriter
PRESSED
\family default
 event is thrown, with this 
\family typewriter
HtmlContainer
\family default
 as target.
 The link can then be retrieved with the 
\family typewriter
pressedLink
\family default
 property.
\end_layout

\begin_layout Standard
Some images taken from the old sample HtmlBrowser, which uses this control,
 are shown here, where the application interface style was changed to Android:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_007.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/html_008.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.html.HtmlContainer
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ImageControl
\end_layout

\begin_layout Standard
A control that can show an image bigger than its area and that can be dragged
 using a pen to show the hidden parts.
 Note that, by default, events (and dragging) are disabled.
 You must call 
\family typewriter
setEventsEnabled()
\family default
 to allow dragging.
 
\end_layout

\begin_layout Standard
This is used in the Litebase sample PhotoDB, where it is possible to drag
 the picture to show other parts of it.
\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ImageControl
\family default
 JavaDoc.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
ImageList
\end_layout

\begin_layout Standard
Implements a 
\family typewriter
ListBox
\family default
 where the items are images.
 If you don't add at least one image before calling 
\family typewriter
add()
\family default
/
\family typewriter
setRect()
\family default
, you must compute the preferred size yourself.
 
\end_layout

\begin_layout Standard
Next an example of how to use this class as a combo box color chooser: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.io.IOException;
\end_layout

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.image.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ImageList list = new ImageList();
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			list.add(new Image("black.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("blue.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("green.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("red.png"));
\end_layout

\begin_layout Plain Layout

			list.add(new Image("white.png"));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (ImageException e) {}
\end_layout

\begin_layout Plain Layout

		catch (IOException e) {}
\end_layout

\begin_layout Plain Layout

		add(new ComboBox(list), CENTER, BOTTOM);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using 32x32 images, the result of the above code is the following:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/imagelist_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/imagelist_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ImageList
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ListContainer
\end_layout

\begin_layout Standard

\family typewriter
ListContainer
\family default
 is a 
\family typewriter
ListBox
\family default
 where each item is a 
\family typewriter
Container
\family default
.
 
\end_layout

\begin_layout Standard
The correct way to create a 
\family typewriter
ListContainer
\family default
 item is by subclassing a 
\family typewriter
Container
\family default
 and adding the controls in the 
\family typewriter
initUI()
\family default
 method.
 Adding directly using 
\family typewriter
getContainer().add()
\family default
 will not work.
\end_layout

\begin_layout Standard
Below is an example of how to use it, taken from the old UIGadgets sample
 using the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class LCItem extends ScrollContainer
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Label lDate,lPrice,lDesc;
\end_layout

\begin_layout Plain Layout

	Check chPaid;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public LCItem()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super(false); // VERY IMPORTANT (a RuntimeException will be thrown if
 this is not used because it can't have a scroll bar).
       
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(chPaid = new Check("Paid"),LEFT,TOP);
\end_layout

\begin_layout Plain Layout

		add(lDate = new Label("99/99/9999"),RIGHT,TOP);
\end_layout

\begin_layout Plain Layout

		add(new Label("US$"),LEFT,AFTER);
\end_layout

\begin_layout Plain Layout

		add(lPrice = new Label("999.999.99"),AFTER,SAME);
\end_layout

\begin_layout Plain Layout

		add(lDesc = new Label("",RIGHT),AFTER+10,SAME);
\end_layout

\begin_layout Plain Layout

		lDesc.setText("description");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private void testListContainer()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ListContainer lc;
\end_layout

\begin_layout Plain Layout

	add(lc = new ListContainer(),LEFT,TOP,FILL,FILL);
\end_layout

\begin_layout Plain Layout

	for (int i =0; i < 10; i++)
\end_layout

\begin_layout Plain Layout

		lc.addContainer(new LCItem());
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset

The resulting window from it looks like the screenshots below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
From the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample), the following screenshots were
 taken:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/listcontainer_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ListContainer
\family default
 JavaDoc.
\end_layout

\begin_layout Section
MenuBar
\end_layout

\begin_layout Standard
Constructs a menu with the given items.
 A menu can be opened by the user in a couple of ways: 
\end_layout

\begin_layout Itemize
By clicking on the menu button on the devices.
\end_layout

\begin_layout Itemize
By clicking on the title of a window.
 
\end_layout

\begin_layout Itemize
By holding during 1 second the middle button of the 5-way navigation buttons.
\end_layout

\begin_layout Standard
The menu supports disabled and checked items.
 The menu can be closed by a click on a valid item or clicking outside of
 its bounds.
 A 
\family typewriter
PRESSED
\family default
 event will be thrown when the menu is closed and a menu item was selected.
 To discover which item was selected, see the method 
\family typewriter
getSelectedIndex()
\family default
, which returns -1 if none, or the matrix index otherwise.
 
\end_layout

\begin_layout Standard
Note that the separator dotted line doesn't generate events and can't be
 selected.
 
\end_layout

\begin_layout Standard
After changing the 
\family typewriter
isChecked
\family default
 and 
\family typewriter
isEnabled
\family default
 states, there's no need to call 
\family typewriter
repaint()
\family default
, because they will show up only the next time the menu bar opens.
\end_layout

\begin_layout Standard
Here is an example of a menu bar taken from the old UIGadgets sample:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MenuItem col0[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("File"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Minimize"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Exit"),
\end_layout

\begin_layout Plain Layout

	new MenuItem(),
\end_layout

\begin_layout Plain Layout

	miShowKeys = new MenuItem("Show key codes", false)
\end_layout

\begin_layout Plain Layout

};       
\end_layout

\begin_layout Plain Layout

String p = Settings.platform;
\end_layout

\begin_layout Plain Layout

col0[1].isEnabled = p.equals(Settings.JAVA) || p.equals(Settings.ANDROID) ||
 Settings.isWindowsDevice() || p.equals(Settings.WIN32);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MenuItem col1[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("UIStyle"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Flat"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Vista"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Android"),
\end_layout

\begin_layout Plain Layout

	new MenuItem(),
\end_layout

\begin_layout Plain Layout

	miPenless = new MenuItem("Penless device",false),
\end_layout

\begin_layout Plain Layout

	miGeoFocus= new MenuItem("Geographical focus",false),
\end_layout

\begin_layout Plain Layout

	new MenuItem(),
\end_layout

\begin_layout Plain Layout

	miUnmovableSIP = new MenuItem("Unmovable SIP",false)
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MenuItem col2[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("Tests1"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Standard controls"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("TabbedContainer with images"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Masked Edit"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Image and text buttons"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Scaled Image button"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Justified MultiEdit and Label")
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MenuItem col3[] =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	new MenuItem("Tests2"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Scroll Container"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("File Chooser with Tree"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("SpinList ToolTip ProgressBar"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("Drag scroll"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("AlignedLabelsContainer"),
\end_layout

\begin_layout Plain Layout

	new MenuItem("ListContainer"),
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

setMenuBar(mbar = new MenuBar(new MenuItem[][]{col0,col1,col2,col3}));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result of this sample is shown in the images below taken from the old
 UIGadgets sample using Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubar_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.MenuBar
\family default
 JavaDoc.
\end_layout

\begin_layout Section
MenuBarDropDown
\end_layout

\begin_layout Standard
Constructs a 
\family typewriter
MenuBarDropDown
\family default
 with the given items.
 This class is used in conjunction with the 
\family typewriter
MenuBar
\family default
.
 However, you can also use it to create a stand alone "right click" menu.
 The menu items must fit on the screen.
 No clipping is applied.
 Also, the font and colors can be changed if desired.
 
\end_layout

\begin_layout Standard
Here is an example of how to build a stand alone 
\family typewriter
MenuBarDropDown
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		MenuItem col1[] = // note that the first string is always skipped (it
 would be the MenuItem title in the MenuBar)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			new MenuItem("Record"),
\end_layout

\begin_layout Plain Layout

			new MenuItem("NewEvent"),
\end_layout

\begin_layout Plain Layout

			new MenuItem("Delete Note..."),
\end_layout

\begin_layout Plain Layout

			new MenuItem("Purge..."),
\end_layout

\begin_layout Plain Layout

			new MenuItem(), // create a dotted line
\end_layout

\begin_layout Plain Layout

			new MenuItem("Beam Event")
\end_layout

\begin_layout Plain Layout

		};
\end_layout

\begin_layout Plain Layout

		MenuBarDropDown pop = new MenuBarDropDown(10,10,col1);
\end_layout

\begin_layout Plain Layout

		pop.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

which results in the following window:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/menubardropdown_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.MenuBarDropDown
\family default
 JavaDoc.
\end_layout

\begin_layout Section
MultiListBox
\end_layout

\begin_layout Standard

\family typewriter
MultiListBox
\family default
 is a 
\family typewriter
ListBox
\family default
 that allows more than one item to be selected.
 The maximum number of selections can be defined using 
\family typewriter
setMaxSelections()
\family default
.
 Be sure to save a reference to the 
\family typewriter
MultiListBox
\family default
 so you can call the specific methods of this class.
 
\end_layout

\begin_layout Standard
To create a 
\family typewriter
ComboBox
\family default
 with a 
\family typewriter
MultiListBox
\family default
, use: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MultiListBox mlb;
\end_layout

\begin_layout Plain Layout

new ComboBox(mlb = new MultiListBox()) 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
getSelectedIndex()
\family default
 returns just the last selected index; to retrieve all indexes, use
\begin_inset Newline newline
\end_inset


\family typewriter
getSelectedIndexes()
\family default
.
 
\end_layout

\begin_layout Standard
In penless devices, there will be a cursor which will be used to highlight
 an item; to select or unselect it, you must press the left key.
 
\family typewriter
MultiListBox
\family default
 requires the 
\family typewriter
useFullWidthOnSelection
\family default
 on penless devices.
\end_layout

\begin_layout Standard
The following screenshots from the old UIGadgets sample using Android user
 interface style shows the 
\family typewriter
MultiListBox
\family default
 behavior:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multilist_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.MultiListBox
\family default
 JavaDoc.
\end_layout

\begin_layout Section
PagePosition
\end_layout

\begin_layout Standard

\family typewriter
PagePosition
\family default
 implements the empty and filled balls that indicates the current page in
 a set of pages, very common on Android and iOS.
 
\family typewriter
PagePosition
\family default
 and 
\family typewriter
Flick
\family default
 use it.
 It has three properties: 
\end_layout

\begin_layout Itemize

\family typewriter
visibleCount
\family default
: the number of visible balls.
 
\end_layout

\begin_layout Itemize

\family typewriter
count
\family default
: the number of balls that will be displayed.
 It can be less, equal, or greater than the visible count.
 
\end_layout

\begin_layout Itemize

\family typewriter
position
\family default
: the current position of the filled ball.
 
\end_layout

\begin_layout Standard

\family typewriter
PagePosition
\family default
 is shown in the image below from the old UIControls sample (now inside
 the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample) above the mouse cursor, where it
 is inside a 
\family typewriter
ButtonMenu
\family default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pageposition_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.PagePosition
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Ruler
\begin_inset CommandInset label
LatexCommand label
name "sec:Ruler"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Ruler
\family default
 is a horizontal or vertical ruler.
 Here's an example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Ruler r = new Ruler();
\end_layout

\begin_layout Plain Layout

r.invert = true;
\end_layout

\begin_layout Plain Layout

add(r, LEFT,AFTER+2);  
\end_layout

\end_inset

which results in the following using Android style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/ruler_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

The old UIGadgets sample also used a default ruler shown near the mouse
 arrow:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/ruler_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.Ruler
\family default
 JavaDoc.
\end_layout

\begin_layout Section
PopupMenu
\end_layout

\begin_layout Standard
Creates a popup menu with a single line list and some radio buttons at right,
 like the Android combo box styles.
 The 
\family typewriter
PRESSED
\family default
 event is sent when an item is selected.
 The colors must be set before the control's bounds are defined using 
\family typewriter
setRect()
\family default
 or 
\family typewriter
add()
\family default
.
\end_layout

\begin_layout Standard
This is a sample of how to use it: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String[] items =
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	"Always",
\end_layout

\begin_layout Plain Layout

	"Never",
\end_layout

\begin_layout Plain Layout

	"Only in Silent mode",
\end_layout

\begin_layout Plain Layout

	"Only when not in Silent mode",
\end_layout

\begin_layout Plain Layout

	"None of the answers above"
\end_layout

\begin_layout Plain Layout

}; 
\end_layout

\begin_layout Plain Layout

PopupMenu pm = new PopupMenu("Vibrate",items);
\end_layout

\begin_layout Plain Layout

pm.popup(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
which results in a window similar to the one below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/popmenu_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/popmenu_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.PopupMenu
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ProgressBar
\end_layout

\begin_layout Standard
A basic progress bar, with the bar and a text.
 The text is comprised of a prefix and a suffix.
 
\end_layout

\begin_layout Standard
You can create a horizontal endless progress bar, always going from left
 to right, by setting the given parameters: 
\end_layout

\begin_layout Itemize
Call 
\family typewriter
setEndless()
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
max-min
\family default
: used to compute the width of the bar.
 
\end_layout

\begin_layout Itemize

\family typewriter
prefix
\family default
 and 
\family typewriter
suffix
\family default
: displayed, but the current value is not displayed.
 
\end_layout

\begin_layout Itemize

\family typewriter
setValue(n)
\family default
: 
\family typewriter
n
\family default
 used to increment the current value, not to set the value to 
\family typewriter
n
\family default
.
 
\end_layout

\begin_layout Standard
Then set a timer to update the value.
\end_layout

\begin_layout Standard
Here is some progress bar samples taken from the old UIGadgets and UIControls
 samples (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample), using Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbar_006.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbar_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ProgressBar
\family default
 JavaDoc.
\end_layout

\begin_layout Section
PushButtonGroup
\end_layout

\begin_layout Standard
Group or matrix of push buttons in a single control.
 It is one of the most versatiles controls of TotalCross.
 The width of each button is calculated based on its caption size plus 
\family typewriter
insideGap
\family default
, if you use 
\family typewriter
PREFERRED
\family default
 as the width; otherwise, it uses the size you specified (e.
 g.: 
\family typewriter
FILL
\family default
, 
\family typewriter
FIT
\family default
, etc).
 The height is calculated based on the font's size or on the height you
 specified.
 
\end_layout

\begin_layout Standard
Here is an example of constructor: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

new PushButtonGroup(new String[]{"Button1", "Button2", "Button3"},  false,
 -1, -1, 4, 0, false, PushButtonGroup.NORMAL); 
\end_layout

\end_inset

which results in this window when the control is added to its center using
 Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Also using Android user interface style, the screenshots below from the
 old UIGadgets sample also show this control being used:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has two very important fields called 
\family typewriter
colspan
\family default
 and 
\family typewriter
rowspan
\family default
, which spans a cell across multiple columns and rows.
 These cells that will be overriden must be 
\family typewriter
null
\family default
 and the parameter 
\family typewriter
allSameWidth
\family default
 passed in the constructor must be 
\family typewriter
true
\family default
.
 This sample:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String []numerics = {"1", "2", "3", "4", "5", "6", "7", "clear", null, "0",
 null, null};
\end_layout

\begin_layout Plain Layout

PushButtonGroup pbg = new PushButtonGroup(numerics, false, -1, 4, 0, 4,
 true, PushButtonGroup.BUTTON);
\end_layout

\begin_layout Plain Layout

pbg.colspan[7] = 2;
\end_layout

\begin_layout Plain Layout

pbg.rowspan[7] = 2;
\end_layout

\begin_layout Plain Layout

add(pbg, LEFT+50,AFTER+50,FILL-50,FILL-50); 
\end_layout

\end_inset

will show this:
\begin_inset Newline newline
\end_inset

 
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/pushbutton_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.PushButtonGroup
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ScrollBar
\end_layout

\begin_layout Standard
The scroll bar orientation can be horizontal or vertical.
 It implements auto scroll when pressing and holding a button or the gap
 area of the scroll bar.
 Here is an example of how to use it.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.event.*;
\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ScrollBar sb1, sb2, sb3, sb4;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(sb1 = new ScrollBar(ScrollBar.VERTICAL), RIGHT, CENTER, PREFERRED,
 Settings.screenHeight/2);
\end_layout

\begin_layout Plain Layout

		add(sb2 = new ScrollBar(ScrollBar.VERTICAL), BEFORE, SAME, PREFERRED, SAME);
\end_layout

\begin_layout Plain Layout

		sb2.setLiveScrolling(true);
\end_layout

\begin_layout Plain Layout

		add(sb3 = new ScrollBar(ScrollBar.HORIZONTAL), LEFT,CENTER, Settings.screenWidth
/2, PREFERRED);
\end_layout

\begin_layout Plain Layout

		add(sb4 = new ScrollBar(ScrollBar.HORIZONTAL), SAME, AFTER, SAME, PREFERRED);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && event.target == sb2)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			int value = sb2.getValue();
\end_layout

\begin_layout Plain Layout

			sb1.setValue(value);
\end_layout

\begin_layout Plain Layout

			sb3.setValue(value);
\end_layout

\begin_layout Plain Layout

			sb4.setValue(value);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

which results in the following images:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollbar_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ScrollBar
\family default
 JavaDoc.
\end_layout

\begin_layout Section
ScrollContainer
\end_layout

\begin_layout Standard
This is a container with a horizontal only, vertical only, both, or no scroll
 bars, depending on the control positions.
 The default unit scroll is an edit's height (for the vertical scrollbar),
 and the width of an 
\family typewriter
@
\family default
 (for the horizontal scrollbar).
 
\end_layout

\begin_layout Standard
Caution: you must not use 
\family typewriter
RIGHT
\family default
, 
\family typewriter
BOTTOM
\family default
, 
\family typewriter
CENTER
\family default
, and 
\family typewriter
FILL
\family default
 when setting the control bounds, unless you disable the corresponding scroll
 bar! The only exception to this is to use 
\family typewriter
FILL
\family default
 on the control's height, which is allowed.
\end_layout

\begin_layout Standard
Here is an example showing how it can be used: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings; 
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class Teste extends MainWindow 
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

	public Teste()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Teste", HORIZONTAL_GRADIENT);
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	ScrollContainer sc;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		ScrollContainer sc;
\end_layout

\begin_layout Plain Layout

		add(sc = new ScrollContainer());
\end_layout

\begin_layout Plain Layout

		sc.setBorderStyle(BORDER_SIMPLE);
\end_layout

\begin_layout Plain Layout

		sc.setRect(LEFT+10,TOP+10,FILL-20,FILL-20);
\end_layout

\begin_layout Plain Layout

		int xx = new Label("Name99").getPreferredWidth()+2; // edit's alignment
\end_layout

\begin_layout Plain Layout

		for (int i =0; i < 100; i++)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			sc.add(new Label("Name"+i),LEFT,AFTER);
\end_layout

\begin_layout Plain Layout

			sc.add(new Edit("@@@@@@@@@@@@@@@@@@@@"),xx,SAME);
\end_layout

\begin_layout Plain Layout

			if (i % 3 == 0)
\end_layout

\begin_layout Plain Layout

				sc.add(new Button("Go"), AFTER+2,SAME,PREFERRED,SAME);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

which results in the following screenshots:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
UIControl uses this control in almost all windows so that its components
 can be scrolled.
 The old UIGadgets sample also uses it in one of its tests.
 Using Android user interface style, the following screenshot can be seen:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollcontainer_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ScrollContainer
\family default
 JavaDoc.
\end_layout

\begin_layout Itemize

\end_layout

\begin_layout Section
ScrollPosition
\end_layout

\begin_layout Standard

\family typewriter
ScrollPosition
\family default
 implements the auto-hide scroll bar that exists in finger-touched devices.
 This special scroll bar is just a small position indicator that appears
 when the area is dragged.
 
\family typewriter

\begin_inset Newline newline
\end_inset

ScrollPosition
\family default
 does not take an area of the control, since it appears and disappears automatic
ally.
 All 
\family typewriter
Scrollable
\family default
 controls change their 
\family typewriter
ScrollBar
\family default
 by 
\family typewriter
ScrollPosition
\family default
 when 
\family typewriter
Settings.fingerTouch = true
\family default
.
 If the back color and the bar color are the same, the bar is not drawn;
 this is how the 
\family typewriter
ButtonMenu
\family default
 class hides this control.
\end_layout

\begin_layout Standard
Some images of it can be found in the old UIControls sample (now inside
 the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample) when scrolling its main window:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollposition_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/scrollposition_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.ScrollPosition
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Slider
\end_layout

\begin_layout Standard

\family typewriter
Slider
\family default
 is a simple slider.
 You can set some properties of the slider, like 
\family typewriter
drawTicks
\family default
, 
\family typewriter

\begin_inset Newline newline
\end_inset

invertDirection
\family default
 and 
\family typewriter
drawFilledArea
\family default
.
 You can change the thumb size by setting the 
\family typewriter
minDragBarSize
\family default
 public field and then call 
\family typewriter
setValues()
\family default
, 
\family typewriter
setMaximum()
\family default
, or 
\family typewriter
setMinimum()
\family default
 method (the value must always be ODD!).
 The slider is the component pointed by the mouse arrow in the old UIGadgets
 sample using the Android style below:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/slider_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.Slider
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Spacer
\end_layout

\begin_layout Standard
Control used to add a space between controls.
 It shows nothing on screen.
 
\end_layout

\begin_layout Standard
Here's a sample of how to use it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Spacer s = new Spacer("  ");
\end_layout

\begin_layout Plain Layout

Button btnClear = new Button("Clear");
\end_layout

\begin_layout Plain Layout

Button btnOK = new Button("OK");
\end_layout

\begin_layout Plain Layout

add(s, CENTER,AFTER+2);
\end_layout

\begin_layout Plain Layout

add(btnClear, AFTER,SAME, s);
\end_layout

\begin_layout Plain Layout

add(btnOK, BEFORE, SAME, SAME, SAME, s); 
\end_layout

\end_inset

which results in the following using Android style, which places two buttons
 centered on screen, like this:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spacer_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The spacer is also used to separate the spinners in the Spinner samples
 of old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample) and the back and next buttons from
 the old Litebase sample PhotoDB using the old Windows CE style (now inside
 the sample Address Book and using Android style):
\begin_inset Newline newline
\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spacer_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spacer_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.Spacer
\family default
 JavaDoc.
\end_layout

\begin_layout Section
SpinList
\end_layout

\begin_layout Standard
Creates a control with two arrows, so that you can scroll values and show
 the current one.
 It supports auto-scroll (by clicking and holding) and can also dynamically
 compute the items based on ranges.
 The spin list can be horizontal or vertical.
 You can use something like: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

SpinList sl = new SpinList(..., !Settings.fingerTouch); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This way, in finger-touch devices, it will use the horizontal appearance,
 which is easier to deal with on such devices.
\end_layout

\begin_layout Standard
The screenshots below from the old UIGadgets sample using Android user interface
 style shows the days being increased and decreased when pressing the increase
 or decrease arrow, respectively:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/spinlist_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.SpinList
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Spinner
\end_layout

\begin_layout Standard

\family typewriter
Spinner
\family default
 is a control that shows an image indicating that something is running in
 the background.
 It has two styles: 
\family typewriter
IPHONE
\family default
 and 
\family typewriter
ANDROID
\family default
.
 It's used in the 
\family typewriter
ProgressBox
\family default
 and can be used in the 
\family typewriter
Bar
\family default
.
 To start the spin call the 
\family typewriter
start()
\family default
 method, and to stop it call the 
\family typewriter
stop()
\family default
 method.
 An image of it has already been shown in section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Ruler"

\end_inset

.
\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.Spinner
\family default
 JavaDoc.
\end_layout

\begin_layout Section
TabbedContainer
\end_layout

\begin_layout Standard

\family typewriter
TabbedContainer
\family default
 is a bar of text or image tabs.
 It is assumed that all images will have the same height, but they may have
 different widths.
 A scroll is automatically added when the total width of the titles is bigger
 than the control's width.
 The containers are created automatically and switched when the user presses
 the corresponding tab.
 
\end_layout

\begin_layout Standard
When the user interface has Android style, the tabs do not look good if
 the background is the same of the parent's.
 In this case, we force the background to be slighly darker.
 There are a few fields that you can use to change the color, like 
\family typewriter
activeTabBackColor
\family default
,
\family typewriter

\begin_inset Newline newline
\end_inset

useOnTabTheContainerColor
\family default
, and 
\family typewriter
pressedColor
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Important: with 
\family typewriter
Settings.fingerTouch = true
\family default
, you CANNOT call 
\family typewriter
setRect()
\family default
 in your container.
 Otherwise, the flick and drag will not work and your container will be
 positioned incorrectly.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Below are some screenshots taken from the old UIGadgets (using Android user
 interface style) and UIControls (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample) samples:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tabbedcontainer_006.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.TabbedContainer
\family default
 JavaDoc.
\end_layout

\begin_layout Section
Tree
\begin_inset CommandInset label
LatexCommand label
name "sec:Tree"

\end_inset


\end_layout

\begin_layout Standard
This class is a simple implementation of a tree widget.
 Since it's natural to render the tree in rows, this class borrows most
 of the code from 
\family typewriter
ListBox
\family default
.
 Features: 
\end_layout

\begin_layout Itemize
Similar to Microsoft Windows Explorer tree.
 
\end_layout

\begin_layout Itemize
Horizontal and vertical scrolling.
 
\end_layout

\begin_layout Itemize
Allows setting of folder and leaf icons.
 
\end_layout

\begin_layout Itemize
Expands and collapses of folder.
 
\end_layout

\begin_layout Itemize

\family typewriter
allowsChildren
\family default
 flag to determine if the node is a leaf or a folder.
 
\end_layout

\begin_layout Itemize
Delete, insert, and modify (user object or identifier) of a node.
 
\end_layout

\begin_layout Itemize
Clicking on a leaf node will swap to the leaf icon (like hyperlink).
 
\end_layout

\begin_layout Itemize
Allows the creation of a tree to show or hide the root node.
\end_layout

\begin_layout Standard
You should use the 
\family typewriter
TreeModel
\family default
 class to modify the tree after and the class 
\family typewriter
Node
\family default
 to add nodes to the tree.
 Here's a sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TreeModel tmodel = new TreeModel();
\end_layout

\begin_layout Plain Layout

Tree tree = new Tree(tmodel);
\end_layout

\begin_layout Plain Layout

add(tree,LEFT,TOP,FILL,FILL);
\end_layout

\begin_layout Plain Layout

Node root = new Node("Tree");
\end_layout

\begin_layout Plain Layout

tmodel.setRoot(root);
\end_layout

\begin_layout Plain Layout

Node n;
\end_layout

\begin_layout Plain Layout

root.add(n = new Node("Branch1"));
\end_layout

\begin_layout Plain Layout

n.add(new Node("SubBranch1"));
\end_layout

\begin_layout Plain Layout

n.add(new Node("SubBranch2")); 
\end_layout

\end_inset

which results in the following window (using Android style):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tree_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tree_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The old UIGadgets sample also has a sample called FileChooserTest which
 uses 
\family typewriter
Tree
\family default
.
 Using Android style, it looks like this:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/tree_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.tree
\family default
 classes JavaDocs.
\end_layout

\begin_layout Section
Whiteboard
\end_layout

\begin_layout Standard
This is a whiteboard that can be used to draw something.
 It uses a special event flag in order to improve the accuracy.
 
\end_layout

\begin_layout Standard
The sample Painter uses it.
 The pictures below show its whiteboard empty and drawn, respectively, where
 the application interface style was changed to Android:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/white_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/white_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.WhiteBoard
\family default
 JavaDoc.
\end_layout

\begin_layout Section
MultiButton
\end_layout

\begin_layout Standard

\family typewriter
MultiButton
\family default
 is a control that displays a single line button with a set of titles.
 It can be used to replace a check (with on/off) or a radio (with their
 options).
 Below there is a sample taken from old UIControls sample (now inside the
 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_button_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/multi_button_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
For more detais, take a look at 
\family typewriter
totalcross.ui.MultiButton
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
Charts
\end_layout

\begin_layout Standard
Here a list of chart classes supported by TotalCross.
 They are located in the package 
\family typewriter
totalcross.ui.
 chart
\family default
.
 Read their JavaDocs for more information.
\end_layout

\begin_layout Section
Chart
\end_layout

\begin_layout Standard
The base class of all 
\family typewriter
Chart
\family default
 classes.
 
\end_layout

\begin_layout Section
ColumnChart
\end_layout

\begin_layout Standard
This is a a vertical column chart.
 Below are shown some screenshots taken from the old sample CharTest (now
 inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_003.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_004.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_005.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_016.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
PointLineChart
\end_layout

\begin_layout Standard
Abstract class used by points and line charts, extended by 
\family typewriter
LineChart
\family default
 and 
\family typewriter
XYChart
\family default
.
\end_layout

\begin_layout Section
LineChart
\end_layout

\begin_layout Standard
This class represents a line chart.
 Below are shown some screenshots taken from the old CharTest sample (now
 inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_006.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_007.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_008.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_009.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_010.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
PieChart
\end_layout

\begin_layout Standard
A simple pie chart.
 Below are shown some screenshots taken from the old CharTest sample (now
 inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_011.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_012.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_013.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_014.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_015.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
XYChart
\end_layout

\begin_layout Standard

\family typewriter
XYChart
\family default
 is a scatter chart.
 Here is an example of how to use it, together with a screenshot of the
 application.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.chart.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.event.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.gfx.Color;
\end_layout

\begin_layout Plain Layout

public class ChartTest2 extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	static
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		Settings.useNewFont = true;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	XYChart chart;
\end_layout

\begin_layout Plain Layout

	Check showTitle, showHGrids, showVGrids, showYValues;
\end_layout

\begin_layout Plain Layout

	ComboBox legendPosition;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public ChartTest2()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Chart Test 2", TAB_ONLY_BORDER);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		add(showTitle = new Check("Title"), LEFT, TOP + 2);
\end_layout

\begin_layout Plain Layout

		add(legendPosition = new ComboBox(new String[]{"Legend","Right","Left","Top","
Bottom"}), AFTER + 2, SAME,PREFERRED,SAME);
\end_layout

\begin_layout Plain Layout

		add(showYValues = new Check("YValues"), AFTER+2, SAME);
\end_layout

\begin_layout Plain Layout

		add(showHGrids = new Check("HGrids"), LEFT, AFTER + 2);
\end_layout

\begin_layout Plain Layout

		add(showVGrids = new Check("VGrids"), AFTER + 2, SAME);
\end_layout

\begin_layout Plain Layout

		legendPosition.setSelectedIndex(0);
\end_layout

\begin_layout Plain Layout

		add(new Ruler(),LEFT,AFTER+1);
\end_layout

\begin_layout Plain Layout

		double[] months = new double[]{100, 200, 300, 400};
\end_layout

\begin_layout Plain Layout

		(chart = new XYChart()).series.addElement(new Series("Rice", months, new
 double[] {100, 102, 104, 106}, Color.YELLOW));
\end_layout

\begin_layout Plain Layout

		chart.series.addElement(new Series("Beans", months, new double[] {150, 155,
 159, 164}, Color.GREEN));
\end_layout

\begin_layout Plain Layout

		chart.series.addElement(new Series("Oil", months, new double[] {130, 137,
 143, 150}, Color.RED));
\end_layout

\begin_layout Plain Layout

		chart.lineThickness = 2;
\end_layout

\begin_layout Plain Layout

		chart.setTitle("Sales Projection");
\end_layout

\begin_layout Plain Layout

		chart.setYAxis(0, 200, 10);
\end_layout

\begin_layout Plain Layout

		chart.setXAxis(0, 400, 10);
\end_layout

\begin_layout Plain Layout

		add(chart, LEFT, AFTER+2, FILL,FILL);
\end_layout

\begin_layout Plain Layout

		chart.setBackColor(Color.darker(backColor,16));
\end_layout

\begin_layout Plain Layout

		chart.yDecimalPlaces = 0;
\end_layout

\begin_layout Plain Layout

		chart.legendPerspective = 6;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public void onEvent(Event e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (e.type == ControlEvent.PRESSED && (e.target instanceof Check || e.target
 instanceof ComboBox))
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			chart.showTitle = showTitle.isChecked();
\end_layout

\begin_layout Plain Layout

			chart.showLegend = legendPosition.getSelectedIndex() != 0;
\end_layout

\begin_layout Plain Layout

			chart.legendPosition = getLegendPosition();
\end_layout

\begin_layout Plain Layout

			chart.showHGrids = showHGrids.isChecked();
\end_layout

\begin_layout Plain Layout

			chart.showVGrids = showVGrids.isChecked();
\end_layout

\begin_layout Plain Layout

			chart.showYValues = showYValues.isChecked();
\end_layout

\begin_layout Plain Layout

			repaint();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	private int getLegendPosition()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		switch (legendPosition.getSelectedIndex())
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			case 2: return LEFT;
\end_layout

\begin_layout Plain Layout

			case 3: return TOP;
\end_layout

\begin_layout Plain Layout

			case 4: return BOTTOM;
\end_layout

\begin_layout Plain Layout

			default: return RIGHT;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_017.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
ChartData
\end_layout

\begin_layout Standard
Represents a table with data that can be displayed together with a chart.
 Below it is a code sample and a screen with its result.
 Note that the 
\family typewriter
ChartData 
\family default
grid is integrated with the chart grid.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

import totalcross.sys.Settings;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.chart.*;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.chart.ChartData.ChartDataRow;
\end_layout

\begin_layout Plain Layout

import totalcross.ui.gfx.*;
\end_layout

\begin_layout Plain Layout

import totalcross.util.Properties;
\end_layout

\begin_layout Plain Layout

import totalcross.util.Properties.Str;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public class TCTestWin extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		double[] xAxis = new double[0];
\end_layout

\begin_layout Plain Layout

		Series series = new Series("test", xAxis, new double[0], Color.BLUE);
\end_layout

\begin_layout Plain Layout

		int cols = 10, rows = 5;
\end_layout

\begin_layout Plain Layout

		XYChart chart = new XYChart();
\end_layout

\begin_layout Plain Layout

		ChartDataRow[] data1 = new ChartDataRow[rows];
\end_layout

\begin_layout Plain Layout

		ChartDataRow[] data2 = new ChartDataRow[rows];
\end_layout

\begin_layout Plain Layout

		ChartData cd1 = new ChartData(chart), cd2 = new ChartData(chart);
\end_layout

\begin_layout Plain Layout

		Str[] values;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		setUIStyle(Settings.Android);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		chart.showHGrids = chart.showVGrids = chart.showYValues = chart.snapToTop
 = chart.snapToBottom = cd2.snapToBottom = cd1.snapToTop = true;
\end_layout

\begin_layout Plain Layout

		chart.yDecimalPlaces = 0; // No decimal places.
\end_layout

\begin_layout Plain Layout

		chart.setXAxis(0, 100, 10);
\end_layout

\begin_layout Plain Layout

		chart.setYAxis(0, 100, 10);
\end_layout

\begin_layout Plain Layout

		chart.showLines = false;
\end_layout

\begin_layout Plain Layout

		chart.yValuesSize = fm.stringWidth("99999");
\end_layout

\begin_layout Plain Layout

		chart.series.addElement(series);
\end_layout

\begin_layout Plain Layout

		cd1.lineColor = cd2.lineColor = Color.BLACK;
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		for (int r = 0; r < rows; r++)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			data1[r] = cd1.new ChartDataRow("row " + (r + 1), values = new Str[cols]);
\end_layout

\begin_layout Plain Layout

			data2[r] = cd2.new ChartDataRow("row " + (r + 1), values);
\end_layout

\begin_layout Plain Layout

			for (int c = 0; c < cols; c++)
\end_layout

\begin_layout Plain Layout

				values[c] = new Properties.Str("" + (r + 1) + c);
\end_layout

\begin_layout Plain Layout

			cd1.addLine(rows, data1[r]);
\end_layout

\begin_layout Plain Layout

			cd2.addLine(rows, data2[r]);
\end_layout

\begin_layout Plain Layout

		}              
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		add(cd1,LEFT + 5, TOP + 25, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

		add(cd2,LEFT + 5, BOTTOM - 25, FILL, PREFERRED);
\end_layout

\begin_layout Plain Layout

		add(chart,LEFT + 5, AFTER, FILL, FIT, cd1);
\end_layout

\begin_layout Plain Layout

		cd2.bringToFront();
\end_layout

\begin_layout Plain Layout

		cd1.bringToFront(); 
\end_layout

\begin_layout Plain Layout

		series.xValues = new double[]{10, 20, 30, 40, 50};
\end_layout

\begin_layout Plain Layout

		series.yValues = new double[]{10, 30, 50, 70, 90};      
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/chart_data.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
The Window class
\end_layout

\begin_layout Standard
As you already know, a TotalCross program with user interface consists of
 one and only one main window (a class that directly or indirecly extends
 
\family typewriter
MainWindow
\family default
).
 This main window can pop up a window, and this new window can pop up another
 one, and so on.
 Windows in TotalCross are always modal, therefore, only the last popped
 up window can receive events and you cannot switch from the topmost Window
 to the previous without closing the topmost one.
\end_layout

\begin_layout Standard
Although the 
\family typewriter
Window
\family default
 class extends 
\family typewriter
Control
\family default
, you can't add a 
\family typewriter
Window
\family default
 to a 
\family typewriter
Container
\family default
.
 Doing this results in a 
\family typewriter
RuntimeException
\family default
.
 To show a window, you must use the method 
\family typewriter
popup()
\family default
 or the method 
\family typewriter
popupNonBlocking()
\family default
.
\end_layout

\begin_layout Standard
The following example creates a popup window class: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class TestWindow extends Window
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button btnHi;
\end_layout

\begin_layout Plain Layout

	public TestWindow()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		super("Test",RECT_BORDER); // with caption and borders
\end_layout

\begin_layout Plain Layout

		setRect(CENTER,CENTER,Settings.screenWidth/2,Settings.screenHeight/4);
\end_layout

\begin_layout Plain Layout

		add(btnHi=new Button("Hi!"),CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.type == ControlEvent.PRESSED && event.target == btnHi)
\end_layout

\begin_layout Plain Layout

			unpop(); // a WINDOW_CLOSED event will be posted to this PARENT window.
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use it in the normal way (
\series bold
blocking
\series default
): 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Launcher extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Button btn;
\end_layout

\begin_layout Plain Layout

	public void onEvent(Event e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (e.target == btn)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			TestWindow tw = new TestWindow();
\end_layout

\begin_layout Plain Layout

			tw.popup(); // this line is only executed after the window is closed.
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use it non-blocking (the execution continues right after the popup command,
 even with the window still open): 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Launcher extends MainWindow
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	TestWindow tw;
\end_layout

\begin_layout Plain Layout

	public void initUI()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		tw = new TestWindow();
\end_layout

\begin_layout Plain Layout

		tw.popupNonBlocking(); // this line is executed immediately
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (event.target == tw && event.type == ControlEvent.WINDOW_CLOSED)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			// any stuff
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Blocking popup may be use in 
\family typewriter
InputBox
\family default
/
\family typewriter
MessageBox
\family default
 classes, while non-blocking popup is used in 
\family typewriter
MenuBar
\family default
 and other classes.
 Important note: you can't use 
\family typewriter
popup()
\family default
 with a delay to unpop it.
 In this case, the correct would be to use 
\family typewriter
popupNonBlocking()
\family default
: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mb = new MessageBox(...);
\end_layout

\begin_layout Plain Layout

mb.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

Vm.sleep(5000); // or do something else
\end_layout

\begin_layout Plain Layout

mb.unpop(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you use 
\family typewriter
popup()
\family default
 in this specific case, the VM will hang.
\end_layout

\begin_layout Standard
Some other features of the 
\family typewriter
Window
\family default
 class:
\end_layout

\begin_layout Itemize
Windows can have a title that can be set by the method 
\family typewriter
setTitle(String title)
\family default
 (which calls 
\family typewriter
repaint()
\family default
) or passed to the constructor.
\end_layout

\begin_layout Itemize
The window border can be selected from one of the multiple styles shown
 below, by using the 
\family typewriter
setBorderStyle(byte borderStyle)
\family default
 method or passing the desired style to the 
\family typewriter
Window
\family default
 constructor.
 The parameter value can be 
\family typewriter
NO_BORDER
\family default
, 
\family typewriter
RECT_BORDER
\family default
, 
\family typewriter
ROUND_ BORDER
\family default
, 
\family typewriter
TAB_BORDER
\family default
, 
\family typewriter
TAB_ONLY_BORDER
\family default
, 
\family typewriter
HORIZONTAL_GRADIENT
\family default
, or 
\family typewriter
VERTICAL_ GRADIENT
\family default
.
 To retrive it, use 
\family typewriter
getBorderStyle()
\family default
.
\end_layout

\begin_layout Itemize
There are two constructors: the default one, that creates a window with
 no title and no border, and one constructor with both title and border
 parameters.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Window()
\end_layout

\begin_layout Itemize

\family typewriter
Window(String title, byte borderStyle)
\end_layout

\end_deeper
\begin_layout Itemize
Windows can be moved around the screen by dragging the window’s title.
 If the window has no title, it can’t be moved.
 You can make a titled window unmovable by calling the 
\family typewriter
makeUnmovable()
\family default
 method.
\end_layout

\begin_layout Itemize
The title font can be changed using the 
\family typewriter
setTitleFont()
\family default
 method.
 To retrive it, use
\begin_inset Newline newline
\end_inset


\family typewriter
getTitleFont()
\family default
.
 By default, the font is the one used by the main window, with bold style.
\end_layout

\begin_layout Itemize
Only one control can hold the focus at a time.
 To change focus to another control, use the 
\family typewriter
setFocus(Control c)
\family default
 method (this can also be done through the 
\family typewriter
requestFocus()
\family default
 method in the 
\family typewriter
totalcross.ui.Control
\family default
 class).
 When a user types a key, the control with focus gets the key event.
 Calling this method will cause a 
\family typewriter
FOCUS_OUT
\family default
 control event to be posted to the window's current focus control (if one
 exists) and will cause a 
\family typewriter
FOCUS_IN
\family default
 control event to be posted to the new focus control.
 The 
\family typewriter
getFocus()
\family default
 method returns the control that currently owns the focus.
 
\end_layout

\begin_layout Itemize
The rectangle area excluding the border and the title is defined as the
 client rectangle.
 You can get it with the 
\family typewriter
getClientRect()
\family default
 method.
\end_layout

\begin_layout Itemize
A window can be popped up by calling the 
\family typewriter
popupNonBlocking()
\family default
 method and can be unpopped by calling the 
\family typewriter
unpop()
\family default
 method.
 The popup process saves the area behind the window that is being popped
 up and the unpop process restores that area.
 The 
\family typewriter
unpop()
\family default
 method posts a 
\family typewriter
ControlEvent.WINDOW_CLOSED
\family default
 event to the caller window.
 The 
\family typewriter

\begin_inset Newline newline
\end_inset

popupNonBlocking()
\family default
 method can be called like 
\family typewriter
this.popupNonBlocking()
\family default
.
 Calling 
\family typewriter
unpop()
\family default
 when only the 
\family typewriter
MainWindow
\family default
 is active does nothing.
 
\end_layout

\begin_layout Itemize
A window can also be popped up by calling the 
\family typewriter
popup()
\family default
 method, and be unpopped by the same 
\family typewriter
unpop() 
\family default
method described above.
 The big difference is that in 
\family typewriter

\begin_inset Newline newline
\end_inset

popupNonBlocking()
\family default
, the program execution continues to the next line, while in 
\family typewriter
popup()
\family default
, the program execution is halted and only continues when the popped up
 window is dismissed.
 
\family typewriter
Menu
\family default
, 
\family typewriter
MessageBox
\family default
, 
\family typewriter
ComboBox
\family default
, and 
\family typewriter
ComboBoxDropDown
\family default
 are popped up using 
\family typewriter
popupNonBlocking()
\family default
, because execution does not need to be halted.
 
\family typewriter
InputDialog
\family default
, 
\family typewriter
Calendar
\family default
, and 
\family typewriter
Calculator
\family default
 are usually popped up using 
\family typewriter
popup()
\family default
 because the user may want to get the result of the dialog in an easy way.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You can't use 
\family typewriter
popup()
\family default
 to popup alternating windows that call each other recursively.
 For example, suppose that from 
\family typewriter
win1
\family default
 you call 
\family typewriter
win2.popup()
\family default
, then at 
\family typewriter
win2
\family default
 you call 
\family typewriter
unpop()
\family default
 and then 
\family typewriter
win1.popup()
\family default
.
 Then, from 
\family typewriter
win1
\family default
 you do 
\family typewriter
unpop()
\family default
 again and 
\family typewriter
win2.popup()
\family default
, and so on.
 This will lead to an 
\family typewriter
OutOfMemoryError
\family default
 on the device due to a native stack overflow.
 To fix this, just replace the popup by 
\family typewriter
popupNonBlocking()
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The topmost window (the one who receive events) can be obtained with the
 static method 
\family typewriter
getTopMost()
\family default
.
 To check if this window is the topmost, use the 
\family typewriter
isTopMost()
\family default
 method.
\end_layout

\begin_layout Itemize
Try 
\family typewriter
setGrabPenEvents()
\family default
 for settting to a control to redirect all pen events directly to it.
 This method speeds up pen event processing.
 Used in 
\family typewriter
Whiteboard
\family default
 class.
 
\end_layout

\begin_layout Itemize
You may check if this window is visible using the 
\family typewriter
isVisible()
\family default
 method.
 This method is inherited from 
\family typewriter
totalcross.ui.Control
\family default
, but it simply checks if the current window is the topmost one.
\end_layout

\begin_layout Itemize
Each window can have a menu attached by using the method 
\family typewriter
setMenuBar()
\family default
.
 The menuBar can be made visible programatically by calling the 
\family typewriter
popupMenuBar()
\family default
 method.
\end_layout

\begin_layout Itemize
Suppose you wish to allow the user to abort a task being executed by pressing.
 You can use the method 
\family typewriter
pumpEvents()
\family default
 to process all events in the queue.
 This method is used to implement a blocking Window.
 Here is an example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while(someCondition) 
\end_layout

\begin_layout Plain Layout

	Event.pumpEvents();
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize
The methods 
\family typewriter
getPreferredWidth()
\family default
 and 
\family typewriter
getPreferredHeight()
\family default
 have a special meaning for the 
\family typewriter
Window
\family default
 class.
 They return the minimum width/height needed for the correct display of
 this window.
 
\family typewriter
getPreferredWidth()
\family default
 returns the width of the title (if any) plus the width of the border (if
 any).
 
\family typewriter
getPreferredHeight()
\family default
 returns the height of the title (if any) plus the height of the border
 (if any).
\end_layout

\begin_layout Standard
There are some useful protected methods that may be implemented by controls
 that extend 
\family typewriter

\begin_inset Newline newline
\end_inset

totalcross.ui.Window
\family default
.
 Those methods are placeholders and there is no need to call the super method.
\end_layout

\begin_layout Itemize

\family typewriter
onClickedOutside(int
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

y)
\family default
 This method is used in popup windows.
 If the user clicks outside the window’s bounds, this method is called giving
 the absolute coordinates of the clicked point.
 There are two options:
\begin_inset Newline newline
\end_inset

If you had handled the action, return 
\family typewriter
true
\family default
 in this method.
 Otherwise, 
\family typewriter
false
\family default
 must be returned and if the 
\family typewriter
beepIfOut
\family default
 member is 
\family typewriter
true
\family default
, a beep is played (in other words, 
\family typewriter
beepIfOut
\family default
 can be set to 
\family typewriter
false
\family default
 to disable this beep).
\end_layout

\begin_layout Itemize

\family typewriter
onPopup()
\family default
 Called just after the behind contents are saved and before the popup process
 begin.
 When this method is called, the topmost window is still the parent of the
 window being popped up.
\end_layout

\begin_layout Itemize

\family typewriter
postPopup()
\family default
 Called after the popup process ended.
 When this method is called, the popped up window is fully functional.
 It is a good place to put a 
\family typewriter
control.requestFocus()
\family default
 to make the window popup with the focus in a default control.
\end_layout

\begin_layout Itemize

\family typewriter
onUnpop()
\family default
 Called just before the unpop process begin.
\end_layout

\begin_layout Itemize

\family typewriter
postUnpop()
\family default
 Called after the unpop process ended.
 When this method is called, the unpopped window has gone away and the parent
 window is currently the topmost.
\end_layout

\begin_layout Itemize

\family typewriter
postPressedEvent()
\family default
 Posts a 
\family typewriter
ControlEvent.PRESSED
\family default
 event on the focused control.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
A very common mistake is to popup a window without setting its bounds.
 If no bounds are set, the window will not receive events.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The other members that can be used (all public and some protected) of the
 
\family typewriter
Window
\family default
 class are explained here:
\end_layout

\begin_layout Itemize

\family typewriter
needsPaint true
\family default
 if there are any controls marked for repaint (some area of the window is
 invalidated).
\end_layout

\begin_layout Itemize

\family typewriter
tempTitle
\family default
 A temporary title that will be displayed when the 
\family typewriter
Window
\family default
 pops up.
 It will be replaced by the original title when it is closed.
 
\end_layout

\begin_layout Itemize

\family typewriter
topmost
\family default
 Stores the topmost window.
\end_layout

\begin_layout Itemize

\family typewriter
firstFocus
\family default
 The control that should get focus when a focus traversal key is pressed
 and none has focus.
 
\end_layout

\begin_layout Itemize

\family typewriter
canDrag
\family default
 (protected) If 
\family typewriter
true
\family default
 and if this is a popup window, the user is allowed to drag the title and
 make the window move around.
\end_layout

\begin_layout Itemize

\family typewriter
cancelPenUp
\family default
 If 
\family typewriter
true
\family default
, the next 
\family typewriter
PEN_UP
\family default
 event will be ignored.
 This is used when a 
\family typewriter
PEN_DOWN
\family default
 cancels a flick, or if a drag-scrollable control needs to cancel the next
 pen_up during a drag-scrolling interaction.
\end_layout

\begin_layout Itemize

\family typewriter
gradientTitleStartColor
\family default
 The starting and ending colors used to fill the gradient title.
 
\end_layout

\begin_layout Itemize

\family typewriter
gradientTitleEndColor
\family default
 The starting and ending colors used to fill the gradient title.
 
\end_layout

\begin_layout Itemize

\family typewriter
titleColor
\family default
 The title color.
 The title color depends on the border type: it will be the foreground color
 if 
\family typewriter
NO_BORDER
\family default
 is set; otherwise, it will be the background color.
 
\end_layout

\begin_layout Itemize

\family typewriter
titleGap
\family default
 A vertical gap used to increase the title area.
 Defaults to 
\family typewriter
fmH/2
\family default
 on Android and 0 on other user interface styles.
\end_layout

\begin_layout Itemize

\family typewriter
titleAlign
\family default
 The title horizontal alignment in the window's title area.
 It can be 
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
RIGHT
\family default
, and you can use an adjustment on the value (E.G.: 
\family typewriter
LEFT+5
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
headerColor
\family default
,
\begin_inset space ~
\end_inset


\family typewriter
footerColor
\family default
 Has the header and the footer colors when on Android style and border type
 is 
\family typewriter
ROUND_BORDER
\family default
.
 Not used on other styles.
\end_layout

\begin_layout Itemize

\family typewriter
fadeOtherWindows
\family default
 Set to 
\family typewriter
true
\family default
 to make the other windows be faded when the window appears.
\end_layout

\begin_layout Itemize

\family typewriter
fadeValue
\family default
 The value used to fade the other windows.
 Defaults to 128.
 
\end_layout

\begin_layout Itemize

\family typewriter
robot 
\family default
The 
\family typewriter
UIRobot
\family default
 instance that is being used to record or play events.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Never mess with the public member 
\family typewriter
zStack
\family default
.
 It is used to store the windows that are currently popped up.
 It is made public because the 
\family typewriter
totalcross.Launcher
\family default
 class uses it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next is explained how controls inside a window are repainted: 
\end_layout

\begin_layout Enumerate
The programmer calls the 
\family typewriter
repaint()
\family default
 method of some controls, or a control is clicked and marks itself for repaint.
\end_layout

\begin_layout Enumerate
The 
\family typewriter
damageRect()
\family default
 method in class window creates a rectangle (stored in the 
\family typewriter
paintX
\family default
, 
\family typewriter
paintY
\family default
, 
\family typewriter
paintWidth
\family default
 and 
\family typewriter
paintHeight
\family default
 members) with the union of the bounds of all controls marked for repaint.
 
\end_layout

\begin_layout Enumerate
The next time a VM event is posted, the 
\family typewriter
_doPaint()
\family default
 method of the topmost window is called.
 This method paints the window’s title/border (if any) and calls the 
\family typewriter
onPaint()
\family default
 method of all containers and controls that lies inside the rectangle area
 marked for repaint.
 This explains why nothing in the window is updated when you receive events
 directly from a native library (the 
\family typewriter
Scanner
\family default
 class, for example).
 Because the VM is not receiving the event, it never validates the window.
 In these cases, you must update the window yourself, calling 
\family typewriter
repaintNow()
\family default
 or the validate methods.
\end_layout

\begin_layout Standard
Many classes in the 
\family typewriter
totalcross.ui
\family default
 package extend 
\family typewriter
totalcross.ui.Window
\family default
.
 Examples of such classes are 
\family typewriter
CalculatorBox
\family default
 and 
\family typewriter
CalendarBox
\family default
.
 Other good examples are 
\family typewriter

\begin_inset Newline newline
\end_inset

ComboBoxDropDown
\family default
 and 
\family typewriter
MessageBox
\family default
.
 
\end_layout

\begin_layout Standard
It's important to be aware that it is not a good practice to create classes
 that extend 
\family typewriter
Window
\family default
 if they will occupy the whole screen, because they use a lot of memory
 to store the underlying area.
 Opening the menu may lead to time-consuming redraws of all opened windows
 due to out-of-memory problems.
 In these cases, it is better to use 
\family typewriter
Containers
\family default
.
\end_layout

\begin_layout Chapter
UIColors
\end_layout

\begin_layout Standard
This class contains the default colors used in most user interface windows,
 like 
\family typewriter
CalendarBox
\family default
, 
\family typewriter
KeyboardBox
\family default
, 
\family typewriter
CalculatorBox
\family default
, 
\family typewriter
InputBox
\family default
, 
\family typewriter
MessageBox
\family default
, and also the default foreground and background colors of all controls
 created.
 
\end_layout

\begin_layout Standard
There are no methods in this class, only public static members, which can
 be freely changed to meet your user interface color scheme.
 To correctly change the colors for your own, you must do it in the constructor
 of your application.
 Note that each member defines the default value for all controls of your
 application.
\end_layout

\begin_layout Chapter
Interface Dialogs
\end_layout

\begin_layout Standard
The TotalCross SDK provides some handy interface dialogs, which are windows
 that handles common user interaction scenarios, like displaying an informative
 message or requesting a specific user input.
\end_layout

\begin_layout Standard
Interface dialogs are pop-up windows that extend the 
\family typewriter
Window
\family default
 class, and just like 
\family typewriter
Window
\family default
, they are not automatically displayed under creation.
 To show or hide a dialog you must use 
\family typewriter
Window
\family default
 methods: 
\family typewriter
popup()
\family default
, 
\family typewriter
popupNonBlocking()
\family default
 and 
\family typewriter
unpop()
\family default
.
\end_layout

\begin_layout Standard
For more details about them, check out the package 
\family typewriter
totalcross.ui.dialog
\family default
 JavaDocs.
\end_layout

\begin_layout Section
MessageBox
\end_layout

\begin_layout Standard
Simple dialog used to display a text with some user-defined buttons.
 Useful for displaying informative messages or to make the user take a decision
 before proceeding (e.g.
 “Yes/No”, “Ok/Cancel”, “Save/Discard/Cancel”).
\end_layout

\begin_layout Standard
Below there is a 
\family typewriter
MessageBox
\family default
 from the old UIGadgets sample using the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/messagebox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
MessageBox
\family default
 has five constructors:
\end_layout

\begin_layout Itemize

\family typewriter
MessageBox(String
\begin_inset space ~
\end_inset

title,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

msg)
\family default
 Creates a 
\family typewriter
MessageBox
\family default
 with the given title and message.
 The message is displayed using a label, and can be displayed in multiple
 lines if previously parsed with the 
\family typewriter

\backslash
n
\family default
 character.
 It also displays a single 
\family typewriter
<Ok>
\family default
 button to dismiss the window.
\end_layout

\begin_layout Itemize

\family typewriter
MessageBox(String
\begin_inset space ~
\end_inset

title,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

String[]
\begin_inset space ~
\end_inset

buttonCaptions)
\family default
 Same as above, but also receives a string array specifying the button captions.
 A 
\family typewriter

\begin_inset Newline newline
\end_inset

PushButtonGroup
\family default
 is used to display the buttons, and the method 
\family typewriter

\begin_inset Newline newline
\end_inset

getPressedButtonIndex()
\family default
 returns the index of the pressed button (where the first one has index
 0).
\end_layout

\begin_layout Itemize

\family typewriter
MessageBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

allSameWidth)
\family default
 Same as above, but the last parameter indicates that all the buttons have
 the same width.
\end_layout

\begin_layout Itemize

\family typewriter
MessageBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,
\begin_inset Newline newline
\end_inset

int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap)
\family default
 Same as the second one, but also receives the 
\family typewriter
gap
\family default
 (space between buttons) and 
\family typewriter
insideGap
\family default
 (space between the button's text and it's bounds) to be used by the 
\family typewriter
PushButtonGroup
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
MessageBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String[]
\begin_inset space ~
\end_inset

buttonCaptions,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

allSameWidth,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap)
\family default
 It is the most complete constructor, with all the possible parameters.
\end_layout

\begin_layout Standard
The message box is displayed on the center of the device screen, and its
 bounds are calculated based on the given title, text and buttons.
 If the text height is above the screen limits, two arrows are added to
 the message box to allow the text scrolling.
\end_layout

\begin_layout Itemize

\family typewriter
MessageBox
\family default
 has the following public fields (omitting some methods from its superclasses):
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
btns
\family default
 The 
\family typewriter
PushButtonGroup
\family default
 with the box buttons.
\end_layout

\begin_layout Itemize

\family typewriter
yPosition
\family default
 Defines the 
\family typewriter
y
\family default
 position on screen where the window opens.
 It can be changed to 
\family typewriter
TOP
\family default
 or 
\family typewriter
BOTTOM
\family default
.
 Defaults to 
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
buttonKeys
\family default
 If you set the 
\family typewriter
buttonCaptions
\family default
 array in the construction, you can also set this public field to an 
\family typewriter
int
\family default
 array of the keys that maps to each of the buttons.
 For example, if you set the buttons to 
\family typewriter
{"Ok","Cancel"}
\family default
, you can map the enter key for the 
\family typewriter
Ok
\family default
 button and the escape key for the 
\family typewriter
Cancel
\family default
 button by assigning: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

buttonKeys = new int[]{SpecialKeys.ENTER,SpecialKeys.ESCAPE}; 
\end_layout

\end_inset

Note that 
\family typewriter
ENTER
\family default
 is also handled as 
\family typewriter
ACTION
\family default
, since the 
\family typewriter
ENTER
\family default
 key is mapped to 
\family typewriter
ACTION
\family default
 on some platforms.
 
\end_layout

\begin_layout Itemize

\family typewriter
showExceptionTitle
\family default
 Title shown in the 
\family typewriter
showException()
\family default
 dialog for all exceptions shown this way.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
MessageBox
\family default
 has the following public instance methods (omitting some methods from its
 superclasses):
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
setText(String
\begin_inset space ~
\end_inset

text)
\family default
 This method can be used to set the text AFTER the dialog was shown.
 However, the dialog will not be resized.
 
\end_layout

\begin_layout Itemize

\family typewriter
setIcon(Image
\begin_inset space ~
\end_inset

icon)
\family default
 Sets an icon to be shown in the 
\family typewriter
MessageBox
\family default
's title, at left.
 It only works if there's a title.
 If you really need an empty title, pass as title a string with a couple
 of spaces, like 
\family typewriter
" "
\family default
.
 The icon's width and height will be set to title's font ascent.
\end_layout

\begin_layout Itemize

\family typewriter
getPressedButtonIndex()
\family default
 Returns the index of the pressed button.
 This index is zero based (the first element has index 0).
\begin_inset Newline newline
\end_inset

This method returns -1 if invoked before the window is closed (or if it
 is closed without any button being pressed).
 To make sure you're retrieving the correct value, consider using 
\family typewriter
popup()
\family default
 instead of 
\family typewriter
popupNonBlocking()
\family default
, or invoke this method only after the window is closed (
\family typewriter
MessageBox
\family default
 is a 
\family typewriter
Window
\family default
, so it also posts the event 
\family typewriter
ControlEvent.
 WINDOW_CLOSED
\family default
 when closed).
\end_layout

\begin_layout Itemize

\family typewriter
setTextAlignment(int
\begin_inset space ~
\end_inset

align)
\family default
 Sets the alignment of the label that displays the text.
 The argument must be one of the following constants: 
\family typewriter
LEFT
\family default
, 
\family typewriter
CENTER
\family default
, or 
\family typewriter
RIGHT
\family default
.
 The default alignment is 
\family typewriter
CENTER
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
setUnpopDelay(int
\begin_inset space ~
\end_inset

unpopDelay)
\family default
 Automatically unpops the message box after the given time in milliseconds.
 You must use this method just before displaying the window (either by 
\family typewriter
popup()
\family default
 or
\family typewriter
 popupNonBlocking()
\family default
).
 This method actually adds a timer to the message box, invoking the 
\family typewriter
unpop()
\family default
 method when the 
\family typewriter
TimerEvent
\family default
 is triggered.
 Be sure to learn how the timer works to better understand this method.
\end_layout

\begin_layout Itemize

\family typewriter
onEvent(Event
\begin_inset space ~
\end_inset

e)
\family default
 Handles scroll buttons and normal buttons.
\end_layout

\begin_layout Itemize

\family typewriter
setDelayToShowButton(int
\begin_inset space ~
\end_inset

ms)
\family default
 Calling this method will make the buttons initially hidden and will show
 them after the specified number of milisseconds.
 Here's a sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MessageBox mb = new MessageBox("Novo Tweet!",tweet);
\end_layout

\begin_layout Plain Layout

mb.setTimeToShowButton(7000);
\end_layout

\begin_layout Plain Layout

mb.popup();  
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The method 
\family typewriter
setUnpopDelay()
\family default
 does not affect the regular behavior of the message box – the 
\family typewriter
popupNonBlocking()
\family default
 method will not block the program execution and will still return immediately,
 the 
\family typewriter
popup()
\family default
 method will still block the program execution, and the message box may
 still be dismissed by the user (e.g.
 pressing one of its buttons) before the timer finishes.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
An interesting feature of the message box is that you may create it with
 no buttons, just passing the 
\family typewriter
null
\family default
 value for the constructor's argument 
\family typewriter
buttonCaptions
\family default
.
 However, a message box created with no buttons does not provide a default
 way of being dismissed by the user.
 You must dismiss it programatically, by invoking 
\family typewriter
unpop()
\family default
, using 
\family typewriter
setUnpopDelay()
\family default
 or handling events (e.g.
 you may handle pen events to make it unpop after the user touches the screen).
\end_layout

\begin_layout Standard
The 
\family typewriter
MessageBox
\family default
 class has a handy method to debug your application:
\end_layout

\begin_layout Itemize

\family typewriter
showException(Throwable
\begin_inset space ~
\end_inset

t,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

dumpToConsole)
\family default
 Immediately displays a message box showing the given throwable name, message,
 and its stack trace.
 This information is dumped to the debug console if the field 
\family typewriter
dumpToConsole
\family default
 is 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If you use an IDE with customizable templates for automatic code generation
 (like Eclipse), try changing the template for try/catch blocks to call
 
\family typewriter
MessageBox.showException()
\family default
 instead of 
\family typewriter
Throwable.printStackTrace()
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Section
InputBox
\end_layout

\begin_layout Standard
Simple dialog used to get a text input from the user.
 It contains a label to display some text, an edit to receive the user input,
 and some user-defined buttons.
 Basically it's like a message box with an edit.
 
\end_layout

\begin_layout Standard
Below there is a 
\family typewriter
InputBox
\family default
 from the old UIGadgets sample using the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/inputbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
It has three constructors:
\end_layout

\begin_layout Itemize

\family typewriter
InputBox(String
\begin_inset space ~
\end_inset

title,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

text,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

defaultValue)
\family default
 Creates an input box with the given title, text, a default value for the
 edit, and two buttons: 
\family typewriter
<Ok>
\family default
 and 
\family typewriter
<Cancel>
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
InputBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String
\begin_inset space ~
\end_inset

defaultValue,
\begin_inset Newline newline
\end_inset

String[]
\begin_inset space ~
\end_inset

buttonCaptions)
\family default
 Same as the above, plus a string array specifying the buttons captions.
 A 
\family typewriter
PushButtonGroup
\family default
 is used to display the buttons, and the
\family typewriter

\begin_inset Newline newline
\end_inset

getPressedButtonIndex()
\family default
 method returns the pressed button index.
\end_layout

\begin_layout Itemize

\family typewriter
InputBox(String
\begin_inset space ~
\end_inset

title,String
\begin_inset space ~
\end_inset

text,String
\begin_inset space ~
\end_inset

defaultValue,
\begin_inset Newline newline
\end_inset

String[]
\begin_inset space ~
\end_inset

buttonCaptions,boolean
\begin_inset space ~
\end_inset

allSameWidth,int
\begin_inset space ~
\end_inset

gap,int
\begin_inset space ~
\end_inset

insideGap)
\family default
 The most complete version, where 
\family typewriter
allSameWidth
\family default
 indicates that all the buttons have the same width, 
\family typewriter
gap
\family default
 is the space between buttons, and 
\family typewriter
insideGap
\family default
 is the space between the button's text and it's bounds.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Unlike the message box, the argument 
\family typewriter
buttonCaptions
\family default
 cannot have a 
\family typewriter
null
\family default
 value.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The input box is displayed on the center of the device screen, and its bounds
 are calculated based on the given title, text, edit, and buttons.
 If the text height is above the screen limits, two arrows are added to
 the input box to allow the text scrolling.
 And its edit receives the focus when the input box is popped up.
\end_layout

\begin_layout Standard
The 
\family typewriter
InputBox
\family default
 class provides the following public attributes and methods (omitting some
 fields from its superclasses):
\end_layout

\begin_layout Itemize

\family typewriter
openKeyboardOnPopup
\family default
 Set to 
\family typewriter
true
\family default
 to automatically open the keyboard once the 
\family typewriter
InputBox
\family default
 is open.
 Since this is a static member, it is valid for all 
\family typewriter
InputBox
\family default
es.
\end_layout

\begin_layout Itemize

\family typewriter
yPosition
\family default
 Defines the 
\family typewriter
y
\family default
 position on screen where the window opens.
 Can be changed to 
\family typewriter
TOP
\family default
 or 
\family typewriter
BOTTOM
\family default
.
 Defaults to 
\family typewriter
CENTER
\family default
.
 The image above shows a 
\family typewriter
InputBox
\family default
 opened at the bottom.
\end_layout

\begin_layout Itemize

\family typewriter
buttonKeys
\family default
 If you set the 
\family typewriter
buttonCaptions
\family default
 array in the construction, you can also set this public field to an 
\family typewriter
int
\family default
 array of the keys that maps to each of the buttons.
 
\end_layout

\begin_layout Itemize

\family typewriter
setTextAlignment(int
\begin_inset space ~
\end_inset

align)
\family default
 Sets the alignment for the text.
 The parameter must be 
\family typewriter
CENTER
\family default
 (default), 
\family typewriter
LEFT
\family default
, or 
\family typewriter
RIGHT
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
getPressedButtonIndex()
\family default
 Returns the index of the pressed button.
 This index is zero based (the first element has index 0).
 This method returns -1 if invoked before the window is closed (or if it
 is closed without any button being pressed).
 To make sure you're retrieving the correct value, consider using 
\family typewriter
popup()
\family default
 instead of 
\family typewriter
popupNonBlocking()
\family default
, or invoke this method only after the window is closed (
\family typewriter
InputBox
\family default
 is a 
\family typewriter
Window
\family default
, so it also posts the event 
\family typewriter
ControlEvent.WINDOW_CLOSED
\family default
 when closed).
\end_layout

\begin_layout Itemize

\family typewriter
getEdit()
\family default
 Returns a reference to this input box's edit, so you can change its properties.
\end_layout

\begin_layout Itemize

\family typewriter
getValue()
\family default
 Returns a string with the edit's text.
\end_layout

\begin_layout Itemize

\family typewriter
setValue(String
\begin_inset space ~
\end_inset

value)
\family default
 Sets the edit with the given value.
\end_layout

\begin_layout Section
KeyboardBox
\end_layout

\begin_layout Standard
Dialog that displays a virtual keyboard that can be used to handle text
 input either by the device's keyboard or by pen events on the virtual keyboard
 on devices with touchscreen.
\end_layout

\begin_layout Standard
Unlike other dialogs, the 
\family typewriter
KeyboardBox
\family default
 constructor does not receive any arguments, and it does not provide any
 methods for its manipulation.
 So how does it work?
\end_layout

\begin_layout Standard
When the keyboard box is popped up, it gets the control of the topmost window
 that currently holds the focus.
 The control is shown at the top of the keyboard box, and any text input
 received is passed to the control as a key event.
 If the virtual keyboard is used, the keyboard box handles the pen event,
 converting it to a key event before passing to the target control.
\end_layout

\begin_layout Standard
The edit and multi edit controls may use the keyboard box for text input.
\end_layout

\begin_layout Standard
Below there is a 
\family typewriter
KeyboardBox
\family default
 from the old UIGadgets sample using the Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/keyboardbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
CalculatorBox
\end_layout

\begin_layout Standard
A dialog with a simpler calculator.
 It allows you to enter two numbers, select an operation and calculate the
 result.
 You may also paste the result or the first operand.
\end_layout

\begin_layout Standard
This class is used by the 
\family typewriter
Edit
\family default
 class when its mode is set to 
\family typewriter
CURRENCY
\family default
 and displays a calculator with six basic operations and a numeric pad.
 Here is a sample from the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/calculator_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, constructors, and methods
 (excluding some fields from its superclasses):
\end_layout

\begin_layout Itemize

\family typewriter
edNumber
\family default
 The edit used to show the number.
\end_layout

\begin_layout Itemize

\family typewriter
actions
\family default
 Strings used to display the action messages.
 You can localize these strings if you wish.
 Its default value is 
\family typewriter
{"Clear","Ok","Cancel"}
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
defaultTitle
\family default
 A static field that defines the default title for all calculator boxes,
 which is 
\family typewriter
Numeric Pad
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
optionalValue
\family default
 Defines an optional character to be used in the 
\family typewriter
CalculatorBox
\family default
.
 Replaces the decimal separator 
\family typewriter
/ 00
\family default
 character.
\end_layout

\begin_layout Itemize

\family typewriter
maxLength
\family default
 The maximum length for the edit that will be created.
\end_layout

\begin_layout Itemize

\family typewriter
cOrig
\family default
 The control that had focus when the 
\family typewriter
CalculatorBox
\family default
 was popped up.
 
\end_layout

\begin_layout Itemize

\family typewriter
defaultValue
\family default
 The default value of the edit.
\end_layout

\begin_layout Itemize

\family typewriter
keepOriginalValue
\family default
 Set to 
\family typewriter
true
\family default
 to don't replace the original value in the 
\family typewriter
Edit
\family default
 if the user pressed Ok.
\end_layout

\begin_layout Itemize

\family typewriter
showNextButtonInsteadOfClear
\family default
 Set to 
\family typewriter
true
\family default
 to replace the 
\family typewriter
Clear
\family default
 button by the 
\family typewriter
Next
\family default
 button.
 This button is equivalent to the 
\family typewriter
Ok
\family default
 button, but it also changes the focus to the next field.
 The user can still clean the edit by clicking the backspace 
\family typewriter
<<
\family default
 button.
 The default behaviour calls 
\family typewriter
moveFocusToNextControl()
\family default
.
 You can change it by overriding the method 
\family typewriter
gotoNext()
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
CalculatorBox() 
\family default
Constructs a 
\family typewriter
CalculatorBox
\family default
 with the 6 basic operations visible.
\end_layout

\begin_layout Itemize

\family typewriter
CalculatorBox(boolean
\begin_inset space ~
\end_inset

showOperations)
\family default
 Constructs a 
\family typewriter
CalculatorBox
\family default
 with the 6 basic operations hidden if the parameter is 
\family typewriter
false
\family default
.
 In this case, it will become a numeric box.
 
\end_layout

\begin_layout Itemize

\family typewriter
clear(boolean
\begin_inset space ~
\end_inset

requestFocusOnOper1)
\family default
 Clears everything in this calculator.
\end_layout

\begin_layout Itemize

\family typewriter
getAnswer()
\family default
 Returns a string with the answer the user selected to be pasted (the result,
 the first operand, or 
\family typewriter
null
\family default
 if the user canceled).
\end_layout

\begin_layout Section
CalendarBox
\end_layout

\begin_layout Standard
Displays a calendar where a date can be chosen.
 It pops up with the current day as default and the user can scroll through
 months or years.
 It uses the 
\family typewriter
Date
\family default
 class for all operations.
 When a day is selected the calendar is closed and you may retrieve a 
\family typewriter
Date
\family default
 object representing the chosen date.
\end_layout

\begin_layout Standard
Instead of creating a new instance (which consumes memory), you may use
 the 
\family typewriter
Edit
\family default
's static field calendar.
\end_layout

\begin_layout Standard
If there is something in the edit box which poped up the calendar, the clear
 button will clear it.
 Cancel will leave whatever was in there.
 
\end_layout

\begin_layout Standard
The month can be changed via keyboard using the left/right keys, and the
 year can be changed using up/down keys.
 
\end_layout

\begin_layout Standard
Here is a sample from the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/calendar_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
This class has the following public attributes, one omitted default constructor,
 and methods (excluding some fields from its superclasses):
\end_layout

\begin_layout Itemize

\family typewriter
canceled
\family default
 
\family typewriter
true
\family default
 if the user had canceled without selecting.
\end_layout

\begin_layout Itemize

\family typewriter
weekNames
\family default
 The 7 week names painted in the control.
 It defaults to 
\family typewriter

\begin_inset Newline newline
\end_inset

{"S","M","T","W","T","F","S"}
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
todayClearCancel
\family default
 The labels for 
\family typewriter
Today
\family default
, 
\family typewriter
Clear
\family default
, and 
\family typewriter
Cancel
\family default
.
 It defaults to 
\family typewriter

\begin_inset Newline newline
\end_inset

{"Today","Clear","Cancel"}
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
yearMonth
\family default
 The labels between the arrows for year and month.
 It defaults to 
\family typewriter
{"year","month"}
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
getSelectedDate()
\family default
 Returns a 
\family typewriter
Date
\family default
 object representing the selected date, or 
\family typewriter
null
\family default
 if the calendar is canceled.
\end_layout

\begin_layout Itemize

\family typewriter
setSelectedDate(Date
\begin_inset space ~
\end_inset

d)
\family default
 Changes this calendar box current date by the given one.
 If the given date is 
\family typewriter
null
\family default
, the current date is set to today.
\end_layout

\begin_layout Standard
To correctly retrieve the selected date, you can handle the 
\family typewriter
ControlEvent.PRESSED
\family default
 event posted by the calendar, and call 
\family typewriter
getSelectedDate()
\family default
.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CalendarBox calendar = new CalendarBox();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	calendar.popup();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (event.type == ControlEvent.PRESSED && event.target == calendar)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		Date date = calendar.getSelectedDate();
\end_layout

\begin_layout Plain Layout

		String text = (date == null)? "No date selected" : date.toString();
\end_layout

\begin_layout Plain Layout

		new MessageBox("Selected Date", text).popup();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section
ColorChooserBox
\end_layout

\begin_layout Standard
Shows a color dialog that can be used to select a color.
 There are several ways to choose a color: 
\end_layout

\begin_layout Itemize
Using a color matrix.
\end_layout

\begin_layout Itemize
Using a websafe palette.
 
\end_layout

\begin_layout Itemize
Writting the red, green, and blue components.
 
\end_layout

\begin_layout Itemize
Writting the color in hexdecimal.
 
\end_layout

\begin_layout Standard
Here's a sample code: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ColorChooserBox ccb = new ColorChooserBox(getBackColor());
\end_layout

\begin_layout Plain Layout

ccb.popup();
\end_layout

\begin_layout Plain Layout

if (ccb.choosenColor != -1) // user pressed cancel?
\end_layout

\begin_layout Plain Layout

	int color = ccb.choosenColor; // no, color was selected 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ColorChooserBox
\family default
 looks like the following images taken from the old UIGadgets sample using
 Android user interface style:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorchoser_001.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/colorchoser_002.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
ControlBox
\family typewriter
 
\end_layout

\begin_layout Standard
A popup window that displays any control given as parameter to the constructor
 To add more than one control, use a container.
 Here is a sample from Litebase AllTests:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/controlbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
FileChooserBox
\end_layout

\begin_layout Standard
A class that shows all folders from a startup one to allow the user select
 a file or a folder.
 The file tree is mounted 
\emph on
on demand
\emph default
 to speed up the process.
 
\end_layout

\begin_layout Standard
Here's a list of customizations you can do: 
\end_layout

\begin_layout Itemize
You can set a path to be selected initially by setting the 
\family typewriter
initialPath
\family default
 property.
 
\end_layout

\begin_layout Itemize
Set the 
\family typewriter
defaultButton
\family default
 property to allow the selection of an item doing a double-click on it.
 
\end_layout

\begin_layout Standard
Here's a sample of how to use it: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	FileChooserBox w = new FileChooserBox("Select the folder",new String[]{"
 This one "," Cancel "}, 
\end_layout

\begin_layout Plain Layout

		new FileChooserBox.Filter()
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			public boolean accept(File f) throws IOException
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				return f.isDir(); // will only list folders.
 you may filter by other file types too
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		});
\end_layout

\begin_layout Plain Layout

	w.mountTree(Settings.appPath,1);
\end_layout

\begin_layout Plain Layout

	w.popup();
\end_layout

\begin_layout Plain Layout

	return w.getPressedButtonIndex() == 0 ? w.getAnswer() : null;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

catch (IOException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return null;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Tree"

\end_inset

 from chapter 
\begin_inset Quotes eld
\end_inset

Some Advanced Controls
\begin_inset Quotes erd
\end_inset

 shows some images of its usage.
\end_layout

\begin_layout Standard
This class use a nested interface called 
\family typewriter
FileChooserBox.Filter
\family default
.
 This is necessary to indicate that a filter must have the method 
\family typewriter
accept(File f)
\family default
, which must return 
\family typewriter
true
\family default
 if the file is to be added to the tree.
 
\end_layout

\begin_layout Section
ProgressBox
\end_layout

\begin_layout Standard
This class implements a message box that shows a spinner at the left of
 the text.
 You can set the spinner color and type before constructing the progress
 box (usually you do this in your application's constructor, and not for
 each progress box created).
\end_layout

\begin_layout Standard
Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ProgressBox pb = new ProgressBox("Message","Loading, please wait...",null);
\end_layout

\begin_layout Plain Layout

pb.popupNonBlocking();
\end_layout

\begin_layout Plain Layout

...
 lengthy task
\end_layout

\begin_layout Plain Layout

pb.unpop(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the old UIControls sample (now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample), there is some examples using 
\family typewriter
ProgressBox
\family default
.
 The images order follow the buttons order to show the examples:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_002.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_003.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_004.png

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/progressbox_005.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
TimeBox
\family typewriter
 
\end_layout

\begin_layout Standard
Class used to input a time from the user.
 Correctly handles the AM/PM depending on 
\family typewriter

\begin_inset Newline newline
\end_inset

Settings.is24Hour
\family default
.
 
\end_layout

\begin_layout Standard
When the window closes, a 
\family typewriter
PRESSED
\family default
 event is sent to the caller, and the time can be retrieved using 
\family typewriter
getTime()
\family default
.
 
\end_layout

\begin_layout Standard
The time can be entered also using the arrow keys and by typing the numbers
 directly.
\end_layout

\begin_layout Standard
Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TimeBox tb;
\end_layout

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		(tb=new TimeBox()).popupNonBlocking();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		e.printStackTrace();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public void onEvent(Event e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (e.type == ControlEvent.PRESSED && e.target == tb)
\end_layout

\begin_layout Plain Layout

		Vm.debug("ret: "+tb.getTime());
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It looks like the following image taken from the old UIControls sample (now
 inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename companion_resources/images/timebox_001.png

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
Image
\end_layout

\begin_layout Standard
Image is a rectangular image, which you can draw into or copy to a surface
 (using a 
\family typewriter
Graphics
\family default
 object).
 They are always 24 bpp, and TotalCross supports only the PNG and JPEG formats
 when running on the TCVM.
\end_layout

\begin_layout Standard
However, you may still use GIF and BMP files on your application, because
 these formats are also supported when running on Java, and the TotalCross
 deployer automatically converts those files to 24 bpp PNG files, which
 are then packaged with your application (along with any other required
 resources).
 The deployed PNG may contain transparency information which is correctly
 handled.
 
\end_layout

\begin_layout Standard

\family typewriter
Image
\family default
 objects cannot be directly added to the user interface because they are
 not controls (i.
 e.
 the 
\family typewriter
Image
\family default
 class does not extend the 
\family typewriter
Control
\family default
 class).
 To display an image on the user interface, you may either use the 
\family typewriter
Graphics
\family default
 object to draw the image on the screen, or use a control that better suits
 your needs, like 
\family typewriter
ImageControl
\family default
 or 
\family typewriter
Button
\family default
 (both described at the user interface section of this document).
\end_layout

\begin_layout Standard
Some transformation methods return a new instance of this image while others
 apply to the current instance.
 To preserve an image with a single frame, use 
\family typewriter
getFrameInstance(0)
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
TotalCross does not support grayscale PNG with alpha-channel.
 Convert the image to true-color with alpha-channel and it will work fine
 (the only backdraw is that the new image will be bigger).
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
Image
\family default
 constructors:
\end_layout

\begin_layout Itemize

\family typewriter
Image(int
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

height)
\family default
 Creates an 
\family typewriter
Image
\family default
 object with the given width and height.
 The new image has the same color depth and color map of the default drawing
 surface.
 Here is an example of use: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img = new Image(100,100);
\end_layout

\begin_layout Plain Layout

Graphics g = img.getGraphics();
\end_layout

\begin_layout Plain Layout

g.backColor = Color.WHITE;
\end_layout

\begin_layout Plain Layout

g.fillRect(25,25,50,50);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Graphics screenG = getGraphics();
\end_layout

\begin_layout Plain Layout

screenG.drawImage(img,CENTER,CENTER);  
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Image(byte[]
\begin_inset space ~
\end_inset

fullDescription)
\family default
 Creates an 
\family typewriter
Image
\family default
 object from the given byte array, which must specify the whole image, including
 its headers.
 Use only JPEG or PNG images on the devices (GIF and BMP are supported on
 the desktop only).
 Here is a code example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// create the image and fill it with something
\end_layout

\begin_layout Plain Layout

Image img = new Image(160,160);
\end_layout

\begin_layout Plain Layout

Graphics g = img.getGraphics();
\end_layout

\begin_layout Plain Layout

for (int i =0; i < 16; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	g.backColor = Color.getRGB(10*i,10*i,10*i);
\end_layout

\begin_layout Plain Layout

	g.fillRect(i*10,0,10,160);
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\begin_layout Plain Layout

// save the bmp in a byte stream
\end_layout

\begin_layout Plain Layout

ByteArrayStream bas = new ByteArrayStream(4096);
\end_layout

\begin_layout Plain Layout

DataStream ds = new DataStream(bas);
\end_layout

\begin_layout Plain Layout

int totalBytesWritten = img.createBmp(ds);
\end_layout

\begin_layout Plain Layout

// parse the saved bmp
\end_layout

\begin_layout Plain Layout

Image im = new Image(bas.getBuffer()); // Caution! the buffer may be greater
 than totalBytesWritten, but when parsing theres no problem.
\end_layout

\begin_layout Plain Layout

if (im.getWidth() > 0) // successfully parsed?
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	getGraphics().drawImage(im,CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

	Vm.sleep(2000);
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Caution: if reading a JPEG file, the original array contents will be changed!
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Image(String
\begin_inset space ~
\end_inset

path)
\family default
 Attempts to read the contents of the file specified by the given path,
 creating an 
\family typewriter
Image
\family default
 object from the bytes read.
 The path given is the path to the image file.
 The file must be in 2, 16, 256, 24 bpp color compressed (RLE) or uncompressed
 BMP bitmap format, a PNG file, a GIF file, or a JPEG file.
 If the image cannot be loaded, an 
\family typewriter
ImageException
\family default
 will be thrown.
\end_layout

\begin_layout Itemize

\family typewriter
Image(Stream
\begin_inset space ~
\end_inset

s)
\family default
 Attempts to read the contents of the given stream, and create an 
\family typewriter
Image
\family default
 object from the bytes read.
 Loads a BMP, JPEG, GIF, or PNG image from a stream.
 Note that GIF and BMP are supported only on the desktop.
 Note that all the bytes of the given stream will be fetched, even those
 bytes that may follow the image.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The usage of this last constructor with connection oriented streams (like
 socket) is not advised.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If you want to check if a specific file is supported by the platform at
 runtime, you may use the static method 
\family typewriter
Image.isSupported(String filename)
\family default
.
 PNG or JPEG are always supported.
 GIF and BMP are supported on JavaSE only.
 
\end_layout

\begin_layout Itemize
To retrieve the image dimensions, you may use the methods 
\family typewriter
getWidth()
\family default
 and
\family typewriter

\begin_inset Newline newline
\end_inset

getHeight()
\family default
.
 You can check if the image is ok by comparing these values with zero.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
getGraphics()
\family default
 returns the 
\family typewriter
Graphics
\family default
 object used by this image, which provides several methods that may be used
 for drawing in this image.
\end_layout

\begin_layout Itemize
You may change all pixels of the same color by another color with the method
 
\family typewriter
changeColors (int from, int to)
\family default
.
 The current value of the transparent color is not changed.
 Using this routine, you can change the colors to any other you want.
 Note this replaces a single solid color by another solid color.
 If you want to change a gradient or colorize an image, use the 
\family typewriter
applyColor(int color)
\family default
 method instead, which applies the given color RGB values to all pixels
 of this image, preserving the transparent color and alpha channel, if set.
 
\end_layout

\begin_layout Standard
The deployer also convert animated GIFs into multi-frame PNGs – which are
 regular PNG files that contains all frames from the original GIF, along
 with the number of frames – to be packaged with the application's tclass
 file.
\end_layout

\begin_layout Standard
In this case, you may use the method 
\family typewriter
getFrameCount()
\family default
 to check if the loaded image contains more than one frame.
\end_layout

\begin_layout Standard
However, you may want to load an actual PNG or JPEG file created in multi-frame
 format to display an animation.
 In this case, the number of frames contained in the file will be unknown
 and 
\family typewriter
getFrameCount()
\family default
 will return 1.
\end_layout

\begin_layout Standard
To set the actual number of frames of the image, you must use the method
 
\family typewriter
setFrameCount (int n)
\family default
, which sets the total number of frames of the image by the given one, but
 only if the total image width (including all frames) is divisible by the
 given value.
\end_layout

\begin_layout Standard
The image's frame count cannot be changed if its value is already higher
 than 1.
 In this case, the 
\family typewriter
setFrameCount()
\family default
 method simply returns without doing anything.
\end_layout

\begin_layout Standard
The following methods should be used only on multi-framed images.
\end_layout

\begin_layout Itemize

\family typewriter
getCurrentFrame()
\family default
 Returns the index of the current visible frame.
\end_layout

\begin_layout Itemize

\family typewriter
setCurrentFrame(int
\begin_inset space ~
\end_inset

nr)
\family default
 Sets the given frame index as the current frame, moving its contents to
 the set of visible pixels.
 If the given index is negative, the last frame is set as the current frame;
 if it's higher than the number of frames, the first one is set instead.
\end_layout

\begin_layout Itemize

\family typewriter
nextFrame()
\family default
 Sets the next frame as the current one.
\end_layout

\begin_layout Itemize

\family typewriter
prevFrame()
\family default
 Sets the previous frame as the current one.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Both 
\family typewriter
nextFrame()
\family default
 and 
\family typewriter
prevFrame()
\family default
 treat the multi-framed image as a circular list, looping back to the first
 frame if moving forward from the last frame, or to the last frame if moving
 backwards from the first frame.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Image
\family default
 class also provides the methods that creates a new 
\family typewriter
Image
\family default
 object to be changed and returned, instead of changing the original instance:
\end_layout

\begin_layout Itemize

\family typewriter
getScaledInstance(int
\begin_inset space ~
\end_inset

newWidth,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

newHeight)
\family default
 Returns a scaled instance of this image.
 The arguments are the new dimensions for this image in pixels.
 The algorithm used is the replicate scale: not good quality, but fast.
 
\end_layout

\begin_layout Itemize

\family typewriter
scaledBy(double
\begin_inset space ~
\end_inset

scaleX,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

scaleY)
\family default
 Returns a scaled instance of this image.
 The new dimensions are calculated based on this image's dimensions and
 the given proportions.
 The algorithm used is the replicate scale: not good quality, but fast.
 The given values must be 
\family typewriter
> 0
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
getSmoothScaledInstance(int
\begin_inset space ~
\end_inset

newWidth,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

newHeight,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backColor)
\family default
 Returns a scaled instance of the image using the area averaging algorithm.
 Transparent pixels are replaced by 
\family typewriter
backColor
\family default
, which produces a smooth border.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img2 = img.getSmoothScaledInstance(200,200, getBackColor());
\end_layout

\end_inset

On device and JavaSE it uses a Catmull-rom resampling.
 The reason is that the Catmull-rom consumes more memory and is also slower
 than the area-average, although the final result is much better.
 
\end_layout

\begin_layout Itemize

\family typewriter
smoothScaledBy(double
\begin_inset space ~
\end_inset

scaleX,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

scaleY,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backColor)
\family default
 Returns a scaled instance of this image.
 The new dimensions are calculated based on this image's dimensions and
 the given proportions.
 The given values must be 
\family typewriter
> 0
\family default
.
 The transparent pixels are replaced by 
\family typewriter
backColor
\family default
, which produces a smooth border.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img2 = img.smoothScaledBy(0.75,0.75, getBackColor()); 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
getRotatedScaledInstance(int
\begin_inset space ~
\end_inset

scale,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

angle,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

fillColor)
\family default
 
\begin_inset Newline newline
\end_inset

Returns a rotated and/or scaled version of this image.
 A new 
\family typewriter
Image
\family default
 object is returned which will render the image at the specified scale ratio
 and rotation angle.
 After rotation, the empty parts of the rectangular area of the resulting
 image are filled with the fill color.
 If color is -1, then the fill color is the transparent color, or white
 if none.
 The new image will probably have a different size of the original image.
 In multi-framed images, each image is rotated/scaled independently.
 
\begin_inset Newline newline
\end_inset


\family typewriter
scale
\family default
 is a number greater than or equal to 0 stating the percentage of scaling
 to be performed.
 100 is not scaling, 200 doubles the size, and 50 shrinks the image by 2.
 
\family typewriter
angle
\family default
 is the rotation angle, expressed in trigonometric degrees and 
\family typewriter
fillColor
\family default
 is the fill color (-1 indicates the transparent color of this image or
 
\family typewriter
Color.WHITE
\family default
 if the 
\family typewriter
transparentColor
\family default
 was not set).
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Do not use this method for scaling only, because the scaling methods are
 faster.
 If you need a smooth scale and rotate, scale it first with 
\family typewriter
smoothScaledBy()
\family default
 or 
\family typewriter
getSmoothScaledInstance()
\family default
 and rotate it without scaling (or vice-versa).
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
getTouchedUpInstance(byte
\begin_inset space ~
\end_inset

brightness,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

contrast)
\family default
 Returns a touched-up instance of this image with the specified brightness
 and contrast.
\family typewriter

\begin_inset Newline newline
\end_inset

brightness
\family default
 is a number between -128 and 127 stating the desired level of brightness.
 127 is the highest brightness level (white image), while -128 is no brightness
 (darkest image).
 
\family typewriter
contrast
\family default
 is a number between -128 and 127 stating the desired level of contrast.
 127 is the highest contrast level, while -128 is no contrast.
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The methods 
\family typewriter
getSmoothScaledInstance()
\family default
 and 
\family typewriter
smoothScaleBy()
\family default
 uses the area averaging algorithm instead of the replication algorithm
 used by 
\family typewriter
scaleBy()
\family default
 and 
\family typewriter
getScaledInstance()
\family default
.
 Although slower, the area averaging algorithm provides better results.
 You may now create only 320x320 images for your application, and smoothly
 resizes it to the target resolution, instead of providing one image per
 resolution.
\end_layout

\begin_layout Plain Layout
Images with anti-aliased borders produce better results because of the extra
 argument for the background color.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
smoothScaledFixedAspectRatio(int
\begin_inset space ~
\end_inset

newSize,boolean
\begin_inset space ~
\end_inset

isHeight,
\begin_inset Newline newline
\end_inset

int
\begin_inset space ~
\end_inset

backColor)
\family default
 Returns the scaled instance using fixed aspect ratio for this image, given
 the scale arguments.
 The given values must be 
\family typewriter
> 0
\family default
.
 This method is useful to resize an image, specifying only one of its sides:
 the width or the height.
 The other side is computed to keep the aspect ratio.
 
\family typewriter
newSize
\family default
 is the new size (width or height) for the image, if 
\family typewriter
isHeight
\family default
 is 
\family typewriter
true
\family default
, 
\family typewriter
newSize
\family default
 is considered as the new height of the image; if 
\family typewriter
false
\family default
, 
\family typewriter
newSize
\family default
 is considered the new width of the image, and 
\family typewriter
backColor
\family default
 is the background color to be used as transparent pixel (for PNG images
 with alpha-channel, use -1).
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Image img2 = img.smoothScaledFixed(fmH, true, -1); 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
getFadedInstance(int
\begin_inset space ~
\end_inset

backColor) 
\family default
Creates a faded instance of the image, interpolating all pixels with the
 given background color.
 The pixels that match the transparent color will not be changed.
 
\end_layout

\begin_layout Itemize

\family typewriter
getFrameInstance(int
\begin_inset space ~
\end_inset

frame)
\family default
 In a multi-framed image, returns a copy of the given frame.
 In a single-framed image, gets a copy of the image.
 
\end_layout

\begin_layout Itemize

\family typewriter
smoothScaledFromResolution(int
\begin_inset space ~
\end_inset

originalRes,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backColor)
\family default
 Returns a smooth scaled instance of this image with a fixed aspect ratio
 based on the given resolution (which is the resolution that you used to
 MAKE the image).
 The target size is computed as 
\family typewriter
image_size*min(screen_size)/original_resolution
\family default
.
 
\family typewriter
originalRes
\family default
 is the original resolution that the image was developed for (it's a good
 idea to create images for 320x320 and then scale them down) and 
\family typewriter
backColor
\family default
 is the background color.
 
\end_layout

\begin_layout Standard
And finally, to save your 
\family typewriter
Image
\family default
 object, you may use one of the methods below:
\end_layout

\begin_layout Itemize

\family typewriter
createPng(Stream
\begin_inset space ~
\end_inset

s)
\family default
 Attempts to write this image as a 24 bpp PNG file on the given stream (if
 
\family typewriter
useAlpha
\family default
 is 
\family typewriter
true
\family default
, it saves as 32 bpp).
 If you're sending the PNG through a stream but not saving it to a 
\family typewriter
PDBFile
\family default
, you can use this method.
 If you're going to save it to a 
\family typewriter
PDBFile
\family default
, then you must use the 
\family typewriter
saveTo()
\family default
 method.
 
\end_layout

\begin_layout Itemize

\family typewriter
saveTo(PDBFile
\begin_inset space ~
\end_inset

cat,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

name)
\family default
 Writes this image as a 24 bpp PNG file on the currently selected record
 of the given 
\family typewriter
PDBFile
\family default
, using the given name.
 The stored image size is limited to near 64 Kb.
 Note that a stored image size has no relation to its size in pixels.
 For example, a 1300x1200 completely-white PNG file takes 7 Kb of storage
 size but 6 MB of RAM when loaded.
 
\end_layout

\begin_deeper
\begin_layout Itemize
The 
\family typewriter
PDBFile
\family default
 can save multiple images, but the record must be prefixed with the image's
 name and must be sorted.
 
\end_layout

\begin_layout Itemize
This method finds the exact place where to insert the PNG and puts it there.
 
\end_layout

\begin_layout Itemize
If you want to create a PNG to be transfered by a stream to serial or socket
 then you must use the method 
\family typewriter
createPng()
\family default
 instead.
 
\end_layout

\begin_layout Itemize
If a record with this name already exists, it will be replaced.
 
\end_layout

\begin_layout Itemize
The name is always converted to lowercase and the method makes sure that
 PNG is appended to it.
 
\end_layout

\begin_layout Itemize
To get the list of images in a PDBFile, just do a 
\family typewriter
readString()
\family default
 at the beginning of each record.
 
\end_layout

\begin_layout Itemize
To retrieve the image, use the 
\family typewriter
loadFrom(PDBFile cat, String name)
\family default
 method.
\end_layout

\begin_layout Standard
Here is a sample code: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// create the image and paint over it
\end_layout

\begin_layout Plain Layout

Image img = new Image(100,100);
\end_layout

\begin_layout Plain Layout

Graphics g = img.getGraphics();
\end_layout

\begin_layout Plain Layout

g.backColor = Color.getRGB(100,150,200);
\end_layout

\begin_layout Plain Layout

g.fillRect(25,25,50,50);
\end_layout

\begin_layout Plain Layout

g.foreColor = Color.WHITE;
\end_layout

\begin_layout Plain Layout

g.drawCircle(50,50,20);  // create the PDBFile to save the image.
 You must change CRTR to match your apps creator ID
\end_layout

\begin_layout Plain Layout

String pdbName = "images.CRTR.TYPE";
\end_layout

\begin_layout Plain Layout

PDBFile pdb = new PDBFile(pdbName, PDBFile.CREATE);
\end_layout

\begin_layout Plain Layout

img.saveTo(pdb, "boxcircle.png");
\end_layout

\begin_layout Plain Layout

pdb.close();  // load the previously created image
\end_layout

\begin_layout Plain Layout

PDBFile pdb = new PDBFile(pdbName, PDBFile.READ_WRITE);
\end_layout

\begin_layout Plain Layout

add(new ImageControl(Image.loadFrom(pdb,"boxcircle.png")),CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

pdb.close();  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's a code that lists the images in a PDB (saved using this method).
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static String[] list(PDBFile cat) throws IOException  
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	DataStream ds = new DataStream(cat);
\end_layout

\begin_layout Plain Layout

	int n = cat.getRecordCount();
\end_layout

\begin_layout Plain Layout

	String[] names = new String[n];
\end_layout

\begin_layout Plain Layout

	for (int i =0; i < n; i++)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		cat.setRecordPos(i);
\end_layout

\begin_layout Plain Layout

		names[i] = ds.readString();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return names;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
Some other 
\family typewriter
Image
\family default
 public methods (omitting the ones from its superclass):
\end_layout

\begin_layout Itemize

\family typewriter
getPixels()
\family default
 Used only on the desktop to get the image's pixels; NOT AVAILABLE on the
 device (it will throw a 
\family typewriter
NoSuchMethodError
\family default
).
 
\end_layout

\begin_layout Itemize

\family typewriter
getX()
\family default
,
\begin_inset space ~
\end_inset


\family typewriter
getY()
\family default
 Returns 0.
\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

o)
\family default
 Returns 
\family typewriter
true
\family default
 if the given 
\family typewriter
Image
\family default
 object has the same size and RGB pixels of the original one.
 The alpha-channel is ignored.
\end_layout

\begin_layout Itemize

\family typewriter
applyColor2(int
\begin_inset space ~
\end_inset

color) 
\family default
Applies the given color RGB values to all pixels of this image, preserving
 the transparent color and alpha channel, if set.
 This method is used to colorize the Android buttons.
\end_layout

\begin_layout Standard
Here's an example of how to create buttons for several resolutions based
 on a 320x320 images: (adapted from the old UIGadgets sample)
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	setTitle("ImageButton resolution scale");
\end_layout

\begin_layout Plain Layout

	String[] imageNames = {"clear.gif", "go.gif"};
\end_layout

\begin_layout Plain Layout

	int imgRes = 320;
\end_layout

\begin_layout Plain Layout

	int targetRes[] = {160, 176, 240, 320};
\end_layout

\begin_layout Plain Layout

	int backColor = getBackColor();
\end_layout

\begin_layout Plain Layout

	int coordX = LEFT;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		for (int i = imageNames.length - 1; i >= 0; i--)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Image img = new Image(imageNames[i]);
\end_layout

\begin_layout Plain Layout

			int imgWidth = img.getWidth();
\end_layout

\begin_layout Plain Layout

			int coordY = TOP;
\end_layout

\begin_layout Plain Layout

			for (int j = targetRes.length - 1; j >= 0; j--)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				double factor = (double) targetRes[j] / (double) imgRes;
\end_layout

\begin_layout Plain Layout

				Image img2 = img.smoothScaledBy(factor, factor, backColor);
\end_layout

\begin_layout Plain Layout

				Button btn = new Button(img2);
\end_layout

\begin_layout Plain Layout

				btn.setBorder(Button.BORDER_NONE);
\end_layout

\begin_layout Plain Layout

				add(btn, coordX, coordY);
\end_layout

\begin_layout Plain Layout

				coordY += img2.getHeight() + 5;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			coordX += imgWidth + 5;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another example with an animated GIF: (adapted from the old GifAnimatedTest
 sample now inside the 
\family typewriter
ui
\family default
 package from the TotalCrossAPI sample):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void initUI()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	try
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		img = new Image("alligator.gif");
\end_layout

\begin_layout Plain Layout

		imgCtrl = new ImageControl(img);
\end_layout

\begin_layout Plain Layout

		add(imgCtrl, CENTER, CENTER);
\end_layout

\begin_layout Plain Layout

		addTimer(200);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	catch (Exception e)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

public void onEvent(Event event)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	if (event.type == TimerEvent.TRIGGERED)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		img.nextFrame();
\end_layout

\begin_layout Plain Layout

		imgCtrl.repaintNow();
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Note that it will work in the same way on desktop or on device.
 
\end_layout

\begin_layout Chapter
Camera
\end_layout

\begin_layout Standard
This class is used to enable the camera of the underlying device.
 The following platforms are supported: Android and iOS.
 It is not possible to use the webcam on PC platforms (JavaSE, Windows XP,
 Vista, Seven, 8, and Linux).
 
\end_layout

\begin_layout Standard
Note that you can easily rotate the image to put it in portrait mode, using
 the 
\family typewriter
Image.
\begin_inset Newline newline
\end_inset

getRotatedScaledInstance()
\family default
 method, after retrieving the image.
 You may change the following options: 
\family typewriter
initialDir, defaultFileName
\family default
 (must end with 
\family typewriter
.jpg
\family default
), and 
\family typewriter
resolutionWidth
\family default
 x 
\family typewriter
resolutionHeight
\family default
 (possible values are 320x240, 640x480, 1024x768, 2048x1536; different values
 defaults to 640x480).
 All other options are ignored.
 
\end_layout

\begin_layout Standard
On Android you can set the 
\family typewriter
defaultFileName
\family default
, 
\family typewriter
stillQuality
\family default
, 
\family typewriter
resolutionWidth
\family default
 and 
\family typewriter
resolutionHeight
\family default
.
 All other options are ignored.
 You can call the
\begin_inset Newline newline
\end_inset


\family typewriter
getSupportedResolutions()
\family default
 method to see the resolutions that are available on the device.
 
\end_layout

\begin_layout Standard
On iOS there's no way to return the supported resolutions; it will take
 a photo using the default camera's resolution, and then will resize to
 the resolution defined in 
\family typewriter
resolutionWidth
\family default
 x 
\family typewriter
resolutionHeight
\family default
, keeping the camera's aspect ratio.
 On iOS you can specify the
\family typewriter

\begin_inset Newline newline
\end_inset

defaultFileName
\family default
 with a path or just the name, or use a system-generated name.
 On iOS it is not possible to record a movie, only to take pictures.
\end_layout

\begin_layout Standard
This class only has de default constructor.
 The other interesting fields are:
\end_layout

\begin_layout Itemize

\family typewriter
title
\family default
 The title to display in the window opened for the camera.
\end_layout

\begin_layout Itemize

\family typewriter
stillQuality
\family default
 Defines the quality of the image.
 It can be equal to
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_DEFAULT
\family default
 (default quality),
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_LOW
\family default
 (low quality),
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_NORMAL
\family default
 (normal quality), or
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_STILLQUALITY_HIGH
\family default
 (high quality).
\end_layout

\begin_layout Itemize

\family typewriter
videoType
\family default
 Can be one of 
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_VIDEOTYPE_ALL
\family default
 (produces video clips that match video profiles, using just the video resolutio
n for the match criteria, the default value)
\family typewriter

\begin_inset Newline newline
\end_inset

CAMERACAPTURE_VIDEOTYPE_STANDARD
\family default
 (produces high-quality video clips used for home movies and e-mail video
 messaging, using a video encoder such as the Windows Media encoder), or
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_VIDEOTYPE_MESSAGING
\family default
 (Produces video clips used for Multimedia Messaging Service (MMS) video
 messaging, which require a video encoder that conforms to the 3rd Generation
 Partnership Project (3GPP) specification on
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "http://go.microsoft.com/fwlink/?LinkId=32710"
target "http://go.microsoft.com/fwlink/?LinkId=32710"

\end_inset

).
\end_layout

\begin_layout Itemize

\family typewriter
videoTimeLimit
\family default
 Maximum time limit for recording a video.
 
\end_layout

\begin_layout Itemize

\family typewriter
captureMode
\family default
 Can be one of
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_MODE_STILL
\family default
 (only picture, the default value), 
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_MODE_VIDEOONLY
\family default
 (no sound), or
\begin_inset Newline newline
\end_inset


\family typewriter
CAMERACAPTURE_MODE_VIDEOWITHAUDIO
\family default
 (video and sound).
\end_layout

\begin_layout Itemize

\family typewriter
allowRotation
\family default
 Use this on Android only.
 If 
\family typewriter
false
\family default
, the camera buttons will be on landscape.
 If 
\family typewriter
true
\family default
, the camera buttons will follow the device current rotation when the camera
 is opened.
 
\end_layout

\begin_layout Standard
The class 
\family typewriter
Camera
\family default
 only has one method:
\end_layout

\begin_layout Itemize

\family typewriter
click()
\family default
 Takes a photo or records a video based on the members set.
 It returns a string with the file name where the image or video is located,
 or 
\family typewriter
null
\family default
 if the user canceled.
 
\end_layout

\begin_layout Itemize

\family typewriter
getSupportedResolutions()
\family default
 Gets the supported resolutions on the current device.
\end_layout

\begin_layout Part
UTILITY CLASSES
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
This section covers utility classes to deal with date and time, random number
 generation, data structures, logging and conversions.
\end_layout

\begin_layout Chapter
totalcross.util
\end_layout

\begin_layout Standard
For more details about each class, please read their JavaDocs.
\end_layout

\begin_layout Section
Date
\end_layout

\begin_layout Standard
The 
\family typewriter
Date
\family default
 class is a general date data type implementation of the Gregorian Calendar,
 and supports dates from January 1
\begin_inset script superscript

\begin_layout Plain Layout
st
\end_layout

\end_inset

, 1000 to December 31
\begin_inset script superscript

\begin_layout Plain Layout
th
\end_layout

\end_inset

, 2999.
 It checks to make sure that the dates that are instanciated or changed
 exist and if they don't an exception (
\family typewriter
InvalidDateException
\family default
) is thrown.
 It provides methods to advance the date backwards and forwards by increments
 of day, week, and month.
 It provides comparisons 
\family typewriter
=
\family default
,
\family typewriter
>
\family default
,
\family typewriter
<
\family default
.
 It also provides constants and methods for date manipulation and comparison.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Months
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.JANUARY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.FEBRUARY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.MARCH
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.APRIL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.MAY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.JUNE
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.JULY
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.AUGUST
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.SEPTEMBER
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.OCTOBER
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.NOVEMBER
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Date.DECEMBER
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Date
\family default
 has six constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Date()
\family default
 Creates a 
\family typewriter
Date
\family default
 object set with today's date.
\end_layout

\begin_layout Itemize

\family typewriter
Date(int
\begin_inset space ~
\end_inset

sentDate)
\family default
 Creates a 
\family typewriter
Date
\family default
 object using the given value, which must be in the format 
\family typewriter
YYYYMMDD
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
Date(int
\begin_inset space ~
\end_inset

sentDay,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sentMonth,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sentYear)
\family default
 Creates a 
\family typewriter
Date
\family default
 object using the given values, where 
\family typewriter
sentDay
\family default
 must be an integer between 1 and the last day in the month, 
\family typewriter
sentMonth
\family default
 must be an integer between 1 and 12, and 
\family typewriter
sentYear
\family default
 must be an integer between 1000 and 2999.
 
\end_layout

\begin_layout Itemize

\family typewriter
Date(String
\begin_inset space ~
\end_inset

strDate) 
\family default
Creates a 
\family typewriter
Date
\family default
 object with the given 
\family typewriter
strDate
\family default
, which must be a valid date in the current device date format (See 
\family typewriter
Settings.dateFormat
\family default
).
 The date separator can be any non-number character; the constructor auto-detect
s what character is being used as separator.
\end_layout

\begin_layout Itemize

\family typewriter
Date(String
\begin_inset space ~
\end_inset

strDate,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

dateFormat) 
\family default
Creates a 
\family typewriter
Date
\family default
 object with the given 
\family typewriter
strDate
\family default
, which must be a valid date in the given 
\family typewriter
dateFormat
\family default
.
 The argument 
\family typewriter
dateFormat
\family default
 must be one of the 
\family typewriter
Settings.DATE_XXX
\family default
 constants, where
\family typewriter
 DATE_MDY
\family default
 stands for month, day, and year format, 
\family typewriter
DATE_DMY
\family default
 stands for day, year, and month format, and 
\family typewriter
DATE_YMD
\family default
 stands for year, month, and day format.
\end_layout

\begin_layout Itemize

\family typewriter
Date(Time
\begin_inset space ~
\end_inset

t) 
\family default
Creates a 
\family typewriter
Date
\family default
 object using the given 
\family typewriter
Time
\family default
 object (See section 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Time"

\end_inset

).
\end_layout

\begin_layout Standard
Except for the default constructor, all 
\family typewriter
Date
\family default
 constructors may throw the checked exception 
\family typewriter
InvalidDateException
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Date
\family default
 objects can be manipulated in a simple way with the following methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
advance(int
\begin_inset space ~
\end_inset

numberDays)
\family default
 Advances (or regresses if 
\family typewriter
numberDays
\family default
 is negative) the date by the given value.
\end_layout

\begin_layout Itemize

\family typewriter
advanceMonth()
\family default
 Advances the date to the beginning of the next month.
\end_layout

\begin_layout Itemize

\family typewriter
advanceMonth(boolean
\begin_inset space ~
\end_inset

direction)
\family default
 Changes the date to the beginning of the next or previous month.
 The static variables 
\family typewriter
Date.FORWARD
\family default
 or 
\family typewriter
Date.BACKWARD
\family default
 instructs the method to either move to the next or previous month.
\end_layout

\begin_layout Itemize

\family typewriter
advanceWeek()
\family default
 Advances the date to the beginning of the next week.
 
\end_layout

\begin_layout Itemize

\family typewriter
advanceWeek(boolean
\begin_inset space ~
\end_inset

direction)
\family default
 Changes the date to the beginning of the next or previous week.
 The static variables 
\family typewriter
Date.FORWARD
\family default
 or 
\family typewriter
Date.BACKWARD
\family default
 instructs the method to either move to the next or previous week.
\end_layout

\begin_layout Itemize

\family typewriter
setToday()
\family default
 Sets this 
\family typewriter
Date
\family default
 object to the current day.
\end_layout

\begin_layout Itemize

\family typewriter
set(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year)
\family default
 Sets the date fields to the given ones and returns an integer in the format
 
\family typewriter
YYYYMMDD
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
set(String
\begin_inset space ~
\end_inset

strDate,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

dateFormat)
\family default
 Sets the date fields by parsing the given string, and using the given 
\family typewriter
dateFormat
\family default
.
 If you want to use the default date format, use 
\family typewriter
Settings.dateFormat
\family default
.
 Trailing spaces are skipped.
 It returns an integer in the format 
\family typewriter
YYYYMMDD
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Date
\family default
 objects can be easily compared using the following methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
isAfter(Date
\begin_inset space ~
\end_inset

sentDate)
\family default
 Returns 
\family typewriter
true
\family default
 if 
\family typewriter
sentDate
\family default
 is after this 
\family typewriter
Date
\family default
 object.
\end_layout

\begin_layout Itemize

\family typewriter
isBefore(Date
\begin_inset space ~
\end_inset

sentDate)
\family default
 Returns 
\family typewriter
true
\family default
 if 
\family typewriter
sentDate
\family default
 is before this 
\family typewriter
Date
\family default
 object.
\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

sentDate)
\family default
 Returns 
\family typewriter
true
\family default
 if 
\family typewriter
sentDate
\family default
 represents the same 
\family typewriter
Date
\family default
 as this 
\family typewriter
Date
\family default
 object.
\end_layout

\begin_layout Itemize

\family typewriter
compareTo(Object
\begin_inset space ~
\end_inset

other)
\family default
 Implementation of the 
\family typewriter
Comparable
\family default
 interface.
 Return is 
\family typewriter
> 0
\family default
 if this object is greater than the other one, 
\family typewriter
< 0
\family default
 if its smaller, and 0 if they are equal.
\end_layout

\begin_layout Standard
You can get the difference in days between two dates using the method 
\family typewriter
subtract(Date other)
\family default
 (
\family typewriter
other – this
\family default
).
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Never use 
\family typewriter
subtract()
\family default
 to compare dates.
 Using 
\family typewriter
subtract()
\family default
 to compare dates can be 15 times slower than using one of the above methods,
 like 
\family typewriter
compareTo()
\family default
.
 Use 
\family typewriter
subtract()
\family default
 only when you need to know the exact difference between two dates.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The following methods can be used to retrieve information about the set
 date:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
getDay()
\family default
 Returns the day.
\end_layout

\begin_layout Itemize

\family typewriter
getMonth()
\family default
 Returns the month.
\end_layout

\begin_layout Itemize

\family typewriter
getYear()
\family default
 Returns the year.
\end_layout

\begin_layout Itemize

\family typewriter
getDayOfWeek()
\family default
 Returns the day of week, where 0 is Sunday and 6 is Saturday.
\end_layout

\begin_layout Itemize

\family typewriter
getWeek()
\family default
 Calculates and returns the ordinal value of the week (1-52).
\end_layout

\begin_layout Itemize

\family typewriter
getDateInt()
\family default
 Returns an integer representing the date in the format 
\family typewriter
YYYYMMDD
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
getDaysInMonth()
\family default
 Returns the number of days the set month has.
\end_layout

\begin_layout Itemize

\family typewriter
getDaysInMonth(int
\begin_inset space ~
\end_inset

month)
\family default
 Returns the number of days in the given month of the set year.
\end_layout

\begin_layout Itemize

\family typewriter
getDaysInMonth(int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year)
\family default
 Static method which returns the number of days in the passed month and
 year.
\end_layout

\begin_layout Itemize

\family typewriter
getMonthName(int
\begin_inset space ~
\end_inset

m)
\family default
 Static method that returns the string representation of the month passed,
 that is 
\family typewriter
monthNames[m]
\family default
 if 
\family typewriter
Date.JANUARY <= m
\family default
 and 
\family typewriter
m <= Date.
\begin_inset Newline newline
\end_inset

DECEMBER
\family default
.
 It returns an empty string if 
\family typewriter
m
\family default
 is out of the valid bounds.
\end_layout

\begin_layout Itemize

\family typewriter
getGregorianDay()
\family default
 Returns the number of days since the January 1
\begin_inset script superscript

\begin_layout Plain Layout
st
\end_layout

\end_inset

 of the epoch year 1000.
\end_layout

\begin_layout Itemize

\family typewriter
isLeapYear(int
\begin_inset space ~
\end_inset

year)
\family default
 Static method that checks if the year is a leap year.
 
\end_layout

\end_deeper
\begin_layout Itemize
You can also retrieve the date as a string:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
formatDayMonth()
\family default
 Returns a zero padded string representation of the day and month, using
 the current device settings (see 
\family typewriter
Settings.dateFormat
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year)
\family default
 Formats the date specified with 
\family typewriter
Settings.dateFormat
\family default
, zero padded.
 The date separator used is 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

dateSeparator
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

separator)
\family default

\begin_inset Newline newline
\end_inset

Formats the date specified with 
\family typewriter
Settings.dateFormat
\family default
, zero padded, and using the given separator.
\end_layout

\begin_layout Itemize

\family typewriter
formatDate(int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

year,
\begin_inset space ~
\end_inset

byte
\begin_inset space ~
\end_inset

dateFormat)
\family default

\begin_inset Newline newline
\end_inset

Formats the date specified with the 
\family typewriter
dateFormat
\family default
 parameter, zero padded.
 The date separator used is 
\family typewriter
Settings.dateSeparator
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
formatDate(int
\begin_inset space ~
\end_inset

day,int
\begin_inset space ~
\end_inset

month,int
\begin_inset space ~
\end_inset

year,byte
\begin_inset space ~
\end_inset

dateFormat,String
\begin_inset Newline newline
\end_inset

dateSeparator)
\family default
 Formats the date specified with the 
\family typewriter
dateFormat
\family default
 parameter, zero padded, and using the given separator.
 
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns a string representation of the date using the current device settings
 (see 
\family typewriter
Settings.dateFormat
\family default
).
 The date separator used is 
\family typewriter
Settings.
\begin_inset Newline newline
\end_inset

dateSeparator
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
toString(byte
\begin_inset space ~
\end_inset

format)
\family default
 Returns a string representation of the date using the given format, which
 must be one of the 
\family typewriter
Settings.DATE_XXX
\family default
 constants.
 The date separator used is 
\family typewriter
Settings.dateSeparator
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
toString(byte
\begin_inset space ~
\end_inset

dateFormat,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

separator)
\family default
 Returns the date in a string format and using the given format and separator.
\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
Date
\family default
 class has the field 
\family typewriter
monthNames
\family default
, which is the month names used in some routines.
 You can localize it if you wish.
 Its default value is: 
\family typewriter
{"", "January", "February", "March", "April", "May", "June", "July", "August",
 "September",
\begin_inset Newline newline
\end_inset

"October", "November", "December"}
\family default
.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Date PaulBorn = null;
\end_layout

\begin_layout Plain Layout

Date DavidBorn = null;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	PaulBorn = new Date(23, 12, 1960);
\end_layout

\begin_layout Plain Layout

	DavidBorn = new Date(20, 7, 1978);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (InvalidDateException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

new MessageBox("Paul was born in " + Date.getMonthName(PaulBorn.getMonth())).popup(
);
\end_layout

\begin_layout Plain Layout

if (PaulBorn.isAfter(DavidBorn))
\end_layout

\begin_layout Plain Layout

	new MessageBox("David is older than Paul").popup();
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

	new MessageBox("Paul is older than David").popup();
\end_layout

\begin_layout Plain Layout

PaulBorn.setToday(); // Now Paul has just been born.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Vector
\end_layout

\begin_layout Standard
The 
\family typewriter
Vector
\family default
 class implements a growable array of objects.
 Like an array, it contains components that can be accessed using an integer
 index.
 However, the size of a 
\family typewriter
Vector
\family default
 can dynamically grow as needed, but it never shrinks.
 If the array never needs to be increased, an array should be used.
\end_layout

\begin_layout Standard
In Java you cannot directly access the 
\family typewriter
Vector
\family default
's internal array, you must use its methods to 
\family typewriter
insert()
\family default
, 
\family typewriter
remove()
\family default
, 
\family typewriter
retrieve()
\family default
, or 
\family typewriter
replace()
\family default
 elements in a 
\family typewriter
Vector
\family default
.
 This way the programmer cannot accidentally (or intentionally) corrupt
 the object's internal state.
\end_layout

\begin_layout Standard
Unfortunately this makes 
\family typewriter
Vector
\family default
 iteration a very costly operation, because each iteration requires at least
 one method call.
\end_layout

\begin_layout Standard
To avoid this performance issue, TotalCross' 
\family typewriter
Vector
\family default
 implementation allows public access to its internal array (
\family typewriter
items
\family default
).
 However, to guarantee the Vector's integrity
\emph on
 you must only access it to retrieve (get) or replace (set) elements, and
 never to insert, remove, or resize the buffer
\emph default
.
\end_layout

\begin_layout Standard
You may also use a 
\family typewriter
Vector
\family default
 as a stack, whose feature is better explained below.
\end_layout

\begin_layout Standard
Here is an example showing a vector being used: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

Vector vec = new Vector();
\end_layout

\begin_layout Plain Layout

vec.addElement(obj1);
\end_layout

\begin_layout Plain Layout

vec.addElement(obj2);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

vec.insertElementAt(obj3, 3);
\end_layout

\begin_layout Plain Layout

vec.removeElementAt(2);
\end_layout

\begin_layout Plain Layout

if (vec.size() > 5)
\end_layout

\begin_layout Plain Layout

   ...
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Vector
\family default
 has three constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Vector()
\family default
 Default constructor, which creates a 
\family typewriter
Vector
\family default
 with the default size 8.
 This constructor should be avoided.
\end_layout

\begin_layout Itemize

\family typewriter
Vector(int
\begin_inset space ~
\end_inset

size)
\family default
 Creates a 
\family typewriter
Vector
\family default
 with the given size, which is the initial size of the vector's internal
 object array and cannot be negative (the minimum size is 0).
 The vector will grow as needed when objects are added.
 
\end_layout

\begin_layout Itemize

\family typewriter
Vector(Object[]
\begin_inset space ~
\end_inset

startingWith)
\family default
 Creates a 
\family typewriter
Vector
\family default
, assigning the given array as the internal buffer and its size as the 
\family typewriter
Vector
\family default
 size.
 Note that the given array must not have 
\family typewriter
null
\family default
 elements.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice this constructor uses the given array as internal buffer,
 not a copy.
 So you should not use this array after initializing the 
\family typewriter
Vector
\family default
 with it.
 If you want to initialize the 
\family typewriter
Vector
\family default
 with a copy of the array, use 
\family typewriter
Vm.arrayCopy()
\family default
, or for string arrays, 
\family typewriter
Convert.cloneStringArray()
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To add an element to a vector, you may use:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
addElement(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Adds a reference to the given object to the end of the 
\family typewriter
Vector
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
addElements(Object[]
\begin_inset space ~
\end_inset

objects)
\family default
 Adds an array of objects at the end of the vector.
 
\end_layout

\begin_layout Itemize

\family typewriter
addElementsNotNull(Object[]
\begin_inset space ~
\end_inset

objects)
\family default
 Adds an array of objects at the end of the vector (
\family typewriter
null
\family default
 objects are skipped).
 
\end_layout

\begin_layout Itemize

\family typewriter
insertElementAt(Object
\begin_inset space ~
\end_inset

obj,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index)
\family default
 Inserts a reference to the given object at the specified index of this
 
\family typewriter
Vector
\family default
, shifting elements with index greater or equal to the specified index to
 have an index one greater than it had previously.
 If 
\family typewriter
index
\family default
 is less than 0 or above the number of elements, the object is inserted
 at the end.
 
\end_layout

\end_deeper
\begin_layout Itemize
And to remove:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
removeElement(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Removes the reference of the given object from this 
\family typewriter
Vector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout Itemize

\family typewriter
removeElementAt(int
\begin_inset space ~
\end_inset

index)
\family default
 Removes the reference to the object at the given index of this 
\family typewriter
Vector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout Itemize

\family typewriter
removeAllElements()
\family default
 Removes all elements from this 
\family typewriter
Vector
\family default
, reseting its length to 0.
 Note that this method sets all items in this vector to 
\family typewriter
null
\family default
, so, if you had directly assigned an array to this vector, all items inside
 it will be nulled.
 
\end_layout

\end_deeper
\begin_layout Itemize
To find the index of a 
\family typewriter
Vector
\family default
's element:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
indexOf(Object
\begin_inset space ~
\end_inset

obj,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startIndex)
\family default
 Returns the index of the given object, or -1 if the object is not found.
 The array is searched using an 
\family typewriter
O(n)
\family default
 linear search, starting at the given start index, until the object is found
 or the end of the array is reached.
\end_layout

\begin_layout Itemize

\family typewriter
indexOf(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Like the above, but always start the search at the first position (index
 0).
 In fact its implementation consists of a single method call: 
\family typewriter
indexOf(obj, 0)
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Vector
\family default
 also provides the following handy methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
isEmpty()
\family default
 Returns 
\family typewriter
true
\family default
 if the 
\family typewriter
Vector
\family default
 is empty.
\end_layout

\begin_layout Itemize

\family typewriter
size()
\family default
 Returns the number of elements in the 
\family typewriter
Vector
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
setSize(int
\begin_inset space ~
\end_inset

newSize)
\family default
 Sets the size of the 
\family typewriter
Vector
\family default
.
 If the new size is greater than the current size, new 
\family typewriter
null
\family default
 items are added to the end of the 
\family typewriter
Vector
\family default
.
 If the new size is less than the current size, all components at index
 
\family typewriter
newSize
\family default
 and greater are discarded (set to 
\family typewriter
null
\family default
).
 The new size can't be negative.
\end_layout

\begin_layout Itemize

\family typewriter
qsort()
\family default
 Sorts the elements of the 
\family typewriter
Vector
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If the elements are strings, the sort will be faster because a cast to 
\family typewriter
String
\family default
 will be done.
 Otherwise, it will use the method 
\family typewriter
toString()
\family default
 to get a 
\family typewriter
String
\family default
 representation of the object to use on the sort.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
toObjectArray()
\family default
 Returns an array of objects containing all elements of the 
\family typewriter
Vector
\family default
, or 
\family typewriter
null
\family default
 if the 
\family typewriter
Vector
\family default
 is empty.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
If the first element of the 
\family typewriter
Vector
\family default
 is a string, it will assume all elements are of the same type and create
 a 
\family typewriter
String
\family default
 array instead of an 
\family typewriter
Object
\family default
 array.
 In this case, you may safely cast the return from 
\family typewriter
Object[]
\family default
 to 
\family typewriter
String[]
\family default
.
 This is only valid for strings.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
dump()
\family default
 Dumps the contents of the 
\family typewriter
Vector
\family default
, returning a string representation of it.
 If the number of elements is big, it can take a lot of memory! 
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns the items of the vector separated by comma in a string.
\end_layout

\begin_layout Itemize

\family typewriter
toString(String
\begin_inset space ~
\end_inset

separator)
\family default
 Returns the items of the vector separated by the given string 
\family typewriter
separator
\family default
 in a string.
\end_layout

\begin_layout Itemize

\family typewriter
copyInto(Object[]
\begin_inset space ~
\end_inset

out)
\family default
 Copies the items of the vector into the given array, which must have at
 least the current size of the vector.
 If the output vector is greater than the current size, the remaining positions
 will remain unchanged.
 
\end_layout

\begin_layout Itemize

\family typewriter
contains(Object
\begin_inset space ~
\end_inset

o)
\family default
 Returns 
\family typewriter
true
\family default
 if the vector contains the specified element.
 
\end_layout

\begin_layout Itemize

\family typewriter
reverse()
\family default
 Reverses the order of the elements in the vector.
 In a vector with 
\family typewriter
n
\family default
 elements, the element of index 0 is moved to the index 
\family typewriter
n-1
\family default
, the element of index 1 is moved to the index 
\family typewriter
n-2
\family default
, and so on.
 
\end_layout

\end_deeper
\begin_layout Itemize
To use a 
\family typewriter
Vector
\family default
 as a stack, you may use the following methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
push(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Pushes an item onto the top of the stack.
 It actually just calls the method 
\family typewriter
addElement()
\family default
 passing the given object.
\end_layout

\begin_layout Itemize

\family typewriter
pop()
\family default
 Removes the object at the top of the stack, returning that object.
 
\end_layout

\begin_layout Itemize

\family typewriter
pop(int
\begin_inset space ~
\end_inset

n)
\family default
 Pops 
\family typewriter
n
\family default
 last elements from the stack.
 
\end_layout

\begin_layout Itemize

\family typewriter
peek()
\family default
 Returns the object at the top of the stack without removing it.
\end_layout

\begin_layout Itemize

\family typewriter
peek(int
\begin_inset space ~
\end_inset

n)
\family default
 Returns the 
\family typewriter
n
\family default
-last object, without removing it.
 Note that 
\family typewriter
peek(0)
\family default
 is the same of 
\family typewriter
peek()
\family default
.
 
\family typewriter
n
\family default
 is how many elements to get from the top and must be a positive number.
\end_layout

\end_deeper
\begin_layout Standard
Although 
\family typewriter
Vector
\family default
 can grow to accommodate more elements, this is a costly operation that
 should be avoided.
 Keep in mind the following when using 
\family typewriter
Vector
\family default
s:
\end_layout

\begin_layout Itemize
If you can estimate the number of elements, you can create the 
\family typewriter
Vector
\family default
 object with enough room for them:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// we expect at least 1000 elements
\end_layout

\begin_layout Plain Layout

Vector v = new Vector(1100) // a little extra space just in case
\end_layout

\begin_layout Plain Layout

Foo f;
\end_layout

\begin_layout Plain Layout

while ((f = getNextFoo()) != null)
\end_layout

\begin_layout Plain Layout

	v.addElement(f);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
If you know the exact number of elements, you can create an array and initialize
 the 
\family typewriter
Vector
\family default
 object with this array:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// we can get the exact number of elements we'll receive
\end_layout

\begin_layout Plain Layout

int fooCount = getFooCount();
\end_layout

\begin_layout Plain Layout

Foo[] f = new Foo[fooCount];
\end_layout

\begin_layout Plain Layout

for (int i = 0 ; i < fooCount ; i++)
\end_layout

\begin_layout Plain Layout

	f[i] = getNextFoo();
\end_layout

\begin_layout Plain Layout

Vector v = new Vector(f);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Use this approach only when you know the initial number of elements is not
 too low and you do not expect to make several insertions later.
 Otherwise the 
\family typewriter
Vector
\family default
 may need to grow several times, decreasing the performance.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The 
\family typewriter
Vector
\family default
 growth rate is 20% + 1 on device (100% + 1 on Java), so you should avoid
 using the default constructor (the default size is 8) or initializing the
 
\family typewriter
Vector
\family default
 with less than 20 positions.
\end_layout

\begin_layout Itemize

\family typewriter
Vector
\family default
 does not shrinks automatically.
 If you make several inserts followed by even more removals, you may end
 up with a huge 
\family typewriter
Vector
\family default
 consuming more memory than it actually needs (i.
 e.
 after the inserts the 
\family typewriter
Vector
\family default
 ends up with 1200 positions but after the removals only 500 positions are
 actually being used).
\end_layout

\begin_layout Section
IntVector
\end_layout

\begin_layout Standard
The 
\family typewriter
IntVector
\family default
 is a growable array of integers.
 It's a 
\family typewriter
Vector
\family default
 implementation specific for integers, which provides better performance
 and takes less memory than using 
\family typewriter
Vector
\family default
 to hold only integers.
\end_layout

\begin_layout Standard
For efficiency, 
\family typewriter
IntVector
\family default
 was implemented exactly like 
\family typewriter
Vector
\family default
: it also allows public access to its internal array (
\family typewriter
items
\family default
), but 
\emph on
you must only access it to retrieve (get) or replace (set) elements, and
 never to insert, remove, or resize the buffer
\emph default
.
\end_layout

\begin_layout Standard
Like 
\family typewriter
Vector
\family default
, 
\family typewriter
IntVector
\family default
 may also be used as a stack (an integer stack in this case).
 It can also be used as a bit array.
 These features are better described below.
 
\end_layout

\begin_layout Itemize

\family typewriter
IntVector
\family default
 has three constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
IntVector()
\family default
 Default constructor, creates an 
\family typewriter
IntVector
\family default
 with the default size 20.
\end_layout

\begin_layout Itemize

\family typewriter
IntVector(int
\begin_inset space ~
\end_inset

size)
\family default
 Creates an 
\family typewriter
IntVector
\family default
 with the given size, which MUST BE greater than 0.
\end_layout

\begin_layout Itemize

\family typewriter
IntVector(int[]
\begin_inset space ~
\end_inset

items)
\family default
 Creates an 
\family typewriter
IntVector
\family default
, assigning the given array as the internal buffer and its size as the an
 
\family typewriter
IntVector
\family default
 size.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice that this constructor uses the given array as internal buffer,
 not a copy.
 So you should not use this array after initializing the 
\family typewriter
IntVector
\family default
 with it.
 If you want to initialize the 
\family typewriter
IntVector
\family default
 with a copy of the array, use
\family typewriter
 Vm.arrayCopy()
\family default
.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To add an element to an 
\family typewriter
IntVector
\family default
, you may use:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
addElement(int
\begin_inset space ~
\end_inset

item)
\family default
 Adds the given integer to the end of the 
\family typewriter
intVector
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
addElements(int[]
\begin_inset space ~
\end_inset

elements)
\family default
 Appends an array of integers at the end of the 
\family typewriter
intVector
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
insertElementAt(int
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

index)
\family default
 Inserts the given integer at the specified index of this 
\family typewriter
IntVector
\family default
, shifting elements with index greater or equal to the specified index to
 have an index one greater than it had previously.
 If 
\family typewriter
index
\family default
 is less than 0 or above the number of elements, the new item is inserted
 at the end.
 
\end_layout

\end_deeper
\begin_layout Itemize
And to remove:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
removeElement(int
\begin_inset space ~
\end_inset

item)
\family default
 Removes the given integer from this 
\family typewriter
IntVector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout Itemize

\family typewriter
removeElementAt(int
\begin_inset space ~
\end_inset

index)
\family default
 Removes the integer at the given index of this
\family typewriter

\begin_inset Newline newline
\end_inset

IntVector
\family default
, shifting elements with index greater than the specified index to have
 an index one smaller than it had previously.
\end_layout

\begin_layout Itemize

\family typewriter
removeAllElements()
\family default
 Removes all elements from this 
\family typewriter
IntVector
\family default
, reseting its length to 0 and setting all elements to 0.
\end_layout

\end_deeper
\begin_layout Itemize
To find the index of an element of this 
\family typewriter
IntVector
\family default
:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
indexOf(int
\begin_inset space ~
\end_inset

item,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

startIndex)
\family default
 Returns the index of the given integer, or -1 if the integer is not found.
 The array is searched using an 
\family typewriter
O(n)
\family default
 linear search, starting at the given start index, until the integer is
 found or the end of the array is reached.
\end_layout

\begin_layout Itemize

\family typewriter
indexOf(int
\begin_inset space ~
\end_inset

item)
\family default
 Like the above, but always start the search at the first position (index
 0).
 In fact its implementation consists of a single method call: 
\family typewriter
indexOf(item, 0)
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
IntVector
\family default
 also provides the following handy methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
isEmpty()
\family default
 Returns 
\family typewriter
true
\family default
 if the 
\family typewriter
IntVector
\family default
 is empty.
\end_layout

\begin_layout Itemize

\family typewriter
size()
\family default
 Returns the number of elements in the 
\family typewriter
IntVector
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
qsort()
\family default
 Sorts the elements of the 
\family typewriter
IntVector
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
toIntArray()
\family default
 Returns an array of integers containing all elements of the 
\family typewriter
IntVector
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Unlike 
\family typewriter
Vector.toObjectArray()
\family default
, the method 
\family typewriter
toIntArray()
\family default
 does not return 
\family typewriter
null
\family default
 if the 
\family typewriter
IntVector
\family default
 is empty.
 It always returns an integer array, which may contain elements or not.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
setSize(int
\begin_inset space ~
\end_inset

newSize)
\family default
 Sets the size of the 
\family typewriter
IntVector
\family default
.
 If the new size is greater than the current size, new items equal to zero
 are added to the end of the 
\family typewriter
IntVector
\family default
.
 If the new size is less than the current size, all components at index
 
\family typewriter
newSize
\family default
 and greater are discarded (set to 0).
 The new size can't be negative.
\end_layout

\begin_layout Itemize

\family typewriter
copyInto(int[]
\begin_inset space ~
\end_inset

out)
\family default
 Copies the items of the vector into the given array, which MUST have at
 least the current size of this vector.
 If the out vector is greater than the current size, the remaining positions
 will remain unchanged.
\end_layout

\begin_layout Itemize

\family typewriter
contains(int
\begin_inset space ~
\end_inset

v)
\family default
 Returns 
\family typewriter
true
\family default
 if the vector contains the specified element.
\end_layout

\begin_layout Itemize

\family typewriter
reverse()
\family default
 Reverses the order of the elements in the vector.
 In a vector with 
\family typewriter
n
\family default
 elements, the element of index 0 is moved to the index 
\family typewriter
n-1
\family default
, the element of index 1 is moved to the index 
\family typewriter
n-2
\family default
, and so on.
 
\end_layout

\end_deeper
\begin_layout Itemize
To use an 
\family typewriter
IntVector
\family default
 as a stack, you may use the following methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
push(int
\begin_inset space ~
\end_inset

item)
\family default
 Pushes an item onto the top of the stack.
 It actually just calls the method 
\family typewriter
addElement()
\family default
 passing the given integer.
\end_layout

\begin_layout Itemize

\family typewriter
pop()
\family default
 Removes the item at the top of the stack, returning that integer.
 
\end_layout

\begin_layout Itemize

\family typewriter
pop(int
\begin_inset space ~
\end_inset

howMany)
\family default
 Removes the desired number of items from the top of the stack.
 Unlike the previous method, nothing is returned.
\end_layout

\begin_layout Itemize

\family typewriter
peek()
\family default
 Returns the item at the top of the stack without removing it.
\end_layout

\end_deeper
\begin_layout Standard
When we want to deal with bit values, we usually use a boolean array.
 However, each position of a boolean array takes 1 byte of memory instead
 of 1 bit.
 This can be a problem when you need to deal with large arrays of bits.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
A single boolean variable is stored in memory as an integer, which costs
 4 bytes.
 But in a boolean array, each position takes 1 byte instead of 4 bytes.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As an alternative, you may use the 
\family typewriter
IntVector
\family default
 as a real bit array using the provided methods and save a lot of memory.
 But there is a drawback: the internal array does not grow by itself when
 you try to access an index bigger than the array's size.
 So you must make sure the 
\family typewriter
IntVector
\family default
 is large enough to hold the number of bits you want to manipulate, otherwise
 you may get an 
\family typewriter
ArrayIndexOutOfBoundsException
\family default
.
\end_layout

\begin_layout Itemize
The 
\family typewriter
IntVector
\family default
 provides the following methods to be used as a bit array:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
ensureBit(int
\begin_inset space ~
\end_inset

sizeInBits)
\family default
 Makes sure the 
\family typewriter
IntVector
\family default
 is large enough to hold the given number of bits.
 You should always call this method before using it as a bit array.
 After that, you can safely use the two methods below.
 This must be done because those methods do not check the bounds of the
 array.
 
\end_layout

\begin_layout Itemize

\family typewriter
setBit(int
\begin_inset space ~
\end_inset

index,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

on)
\family default
 Sets the bit at the given index if 
\family typewriter
on
\family default
 is 
\family typewriter
true
\family default
; unsets it, otherwise.
\end_layout

\begin_layout Itemize

\family typewriter
isBitSet(int
\begin_inset space ~
\end_inset

index)
\family default
 Returns 
\family typewriter
true
\family default
 if the bit at the given index is set; 
\family typewriter
false
\family default
, otherwise.
\end_layout

\end_deeper
\begin_layout Standard
Sample code of the 
\family typewriter
IntVector
\family default
 as a bit array:
\end_layout

\begin_layout Itemize
We need to hold 40000 bits, let's do it with a boolean array:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

boolean[] bitArray = new boolean[40000]; // That's 40000 bytes
\end_layout

\begin_layout Plain Layout

bitArray[5] = true; // easy to set a bit, just use the index.
\end_layout

\begin_layout Plain Layout

boolean aux = bitArray[5]; // easy to get a bit.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Now using an 
\family typewriter
IntVector
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

IntVector bitVector = new IntVector();
\end_layout

\begin_layout Plain Layout

bitVector.ensureBits(40000); // First we make sure the array is large enough.
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// This time our array uses only 1251 bytes.
\end_layout

\begin_layout Plain Layout

bitVector.setBit(5, true); // just as easy to set
\end_layout

\begin_layout Plain Layout

boolean aux = bitVector.isBitSet(5); // just as easy to get.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Hashtable
\end_layout

\begin_layout Standard
This class implements a hash table, which is a data structure that associates
 keys with values.
 It's primary operation is a lookup: given a key, finds the corresponding
 value.
 It works by transforming the key into a hash using the method 
\family typewriter
hashCode()
\family default
 (inherited from 
\family typewriter
Object
\family default
), which is then used as an index for the hash table.
\end_layout

\begin_layout Standard
Hash tables should be used when the number of search operations greatly
 supersedes the number of insertions.
\end_layout

\begin_layout Standard
Any non-null object can be used as a key or as a value, optionally, you
 can provide your own hash code instead of providing a key from which the
 hash code will be calculated.
\end_layout

\begin_layout Standard
An instance of 
\family typewriter
Hashtable
\family default
 has two parameters that affect its efficiency: its 
\emph on
capacity
\emph default
 and its 
\emph on
load factor
\emph default
.
 The load factor should be between 0.0 and 1.0.
 When the number of entries in the hash table exceeds the product of the
 load factor and the current capacity, the capacity is increased by calling
 the 
\family typewriter
rehash()
\family default
 method.
 Larger load factors use memory more efficiently, at the expense of larger
 expected time per lookup.
 
\end_layout

\begin_layout Standard
If many entries are to be made into a hash table, creating it with a sufficientl
y large capacity may allow the entries to be inserted more efficiently than
 letting it perform automatic rehashing as needed to grow the table.
\end_layout

\begin_layout Itemize

\family typewriter
Hashtable
\family default
 has two public fields:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
collisions
\family default
 Computes the number of collisions for a set of inserts.
 You must zero this each time you want to compute it.
 Keep in mind that the lower collisions is better, but don't waste too much
 memory if it's too high.
 
\end_layout

\begin_layout Itemize

\family typewriter
allowDuplicateKeys
\family default
 Setting this to 
\family typewriter
true
\family default
 will allow the hashtable to have more than one key with the same value.
 In this case, the methods will always return the first matching key.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
Hashtable
\family default
 has four constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Hashtable(int
\begin_inset space ~
\end_inset

initialCapacity)
\family default
 Creates an empty hash table with the specified initial capacity and default
 load factor of 
\family typewriter
0.75f
\family default
.
 If 
\family typewriter
initialCapacity
\family default
 is zero, it is changed to 5.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The argument 
\family typewriter
initialCapacity
\family default
's value should be the final number of entries in the hash table to avoid
 rehashing.
 The hash table will grow if necessary, but using a number near or above
 the final size can improve performance.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Hashtable(int
\begin_inset space ~
\end_inset

initialCapacity,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

loadFactor)
\family default
 Creates a new, 
\begin_inset Newline newline
\end_inset

empty hashtable with the specified initial capacity and the specified load
 factor, which must be between 0.0 and 1.0.
 If 
\family typewriter
initialCapacity
\family default
 is zero, it is changed to 5.
\end_layout

\begin_layout Itemize

\family typewriter
Hashtable(String
\begin_inset space ~
\end_inset

res)
\family default
 Creates a new hash table parsing the elements from the given string.
 The string must be in the form: 
\family typewriter
key = value
\family default
, split in lines (
\family typewriter

\backslash
n
\family default
).
 This aids the task of creating resource bundles to add localization to
 your application.
 For example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// save these two lines in a file named EN.txt:  
\end_layout

\begin_layout Plain Layout

Message = Message  
\end_layout

\begin_layout Plain Layout

TestMsg = This is a test  
\end_layout

\begin_layout Plain Layout

Exit = Exit  
\end_layout

\begin_layout Plain Layout

// save these other two in a file named PT.txt:  
\end_layout

\begin_layout Plain Layout

Message = Mensagem 
\end_layout

\begin_layout Plain Layout

TestMsg = Isso e um teste 
\end_layout

\begin_layout Plain Layout

Exit = Sair 
\end_layout

\end_inset

The TotalCross deployer will include the two files referenced below in the
 
\family typewriter
.tcz
\family default
 file.
 Now, when your program starts, you can do:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String txt = idiom == EN? "EN.txt" : "PT.txt";
\end_layout

\begin_layout Plain Layout

byte[] b = Vm.getFile(txt);
\end_layout

\begin_layout Plain Layout

Hashtable res = new Hashtable(new String(b,0,b.length));
\end_layout

\begin_layout Plain Layout

new MessageBox(res.get("Message"), res.get("TestMsg"), new String[]{res.get("Exit")
}).popupNonBlocking();
\end_layout

\end_inset

Note that the keys are case sensitive, and that all strings are trimmed.
 
\end_layout

\begin_layout Itemize

\family typewriter
Hashtable(Object[]
\begin_inset space ~
\end_inset

keys,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

values)
\family default
 Creates a 
\family typewriter
Hashtable
\family default
 with the given keys and values.
 The values can be two things: 
\end_layout

\begin_layout Enumerate
An 
\family typewriter
Object
\family default
 array (
\family typewriter
Object[]
\family default
).
 In this case, the number of keys and values must match.
 
\end_layout

\begin_layout Enumerate
A single 
\family typewriter
Object
\family default
.
 This object is set as value to all keys.
 
\end_layout

\begin_deeper
\begin_layout Standard
The values parameter cannot be 
\family typewriter
null
\family default
.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
To insert a new entry on the hash table:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
put(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

value)
\family default
 Maps the given value to the hash code of the given key.
 Neither the key nor the value can be 
\family typewriter
null
\family default
.
 The value can be retrieved by calling the 
\family typewriter
get()
\family default
 method with a key that is equal to the original key.
 It returns the previous value of the specified key in the hash table, or
 
\family typewriter
null
\family default
 if it did not have one.
 
\end_layout

\begin_layout Itemize

\family typewriter
put(int
\begin_inset space ~
\end_inset

hash,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

value)
\family default
 Maps the given value to the given hash.
 The value can't be 
\family typewriter
null
\family default
 and can be retrieved by calling the 
\family typewriter
get()
\family default
 method with a key that is equal to the original key.
 It returns the previous value of the specified key in the hash table, or
 
\family typewriter
null
\family default
 if it did not have one.
\begin_inset Newline newline
\end_inset

This method receives a hash code instead of the object.
 You MUST use the 
\family typewriter
get(int)
\family default
 method to retrieve the value, otherwise you will get a 
\family typewriter
NullPointerException
\family default
, because no key is stored using this method.
 
\begin_inset Newline newline
\end_inset

If the given hash (or key's hash code) already exists in the hash table,
 the old value will be replaced by the given value (unless 
\family typewriter
allowDuplicateKeys
\family default
 is 
\family typewriter
true
\family default
) and the 
\family typewriter
put()
\family default
 method will return the old value.
 Otherwise, a 
\family typewriter
null
\family default
 value will be returned.
\end_layout

\end_deeper
\begin_layout Itemize
To test if a key is already mapped in the hash table, use the method 
\family typewriter
exists(Object key)
\family default
.
\end_layout

\begin_layout Itemize
To retrieve a value from a hash table:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
get(Object
\begin_inset space ~
\end_inset

key)
\family default
 Returns the value to which the specified key is mapped in the hash table.
 It returns 
\family typewriter
null
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout Itemize

\family typewriter
get(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

defaultValue)
\family default
 Returns the value to which the specified key is mapped in the hash table.
 It returns 
\family typewriter
defaultValue
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout Itemize

\family typewriter
get(int
\begin_inset space ~
\end_inset

hash)
\family default
 Returns the value to which the specified hash is mapped in the hash table.
 Caution: since you're passing an integer instead of an object, if there
 are two objects that map to the same key, this method will always return
 the first one only.
 It returns 
\family typewriter
null
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout Itemize

\family typewriter
get(int
\begin_inset space ~
\end_inset

hash,
\begin_inset space ~
\end_inset

Object
\begin_inset space ~
\end_inset

defaultValue)
\family default
 Returns the value to which the specified hash is mapped in the hash table.
 Caution: since you're passing an integer instead of an object, if there
 are two objects that map to the same key, this method will always return
 the first one only.
 It returns 
\family typewriter
defaultValue
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout Itemize

\family typewriter
getString(Object
\begin_inset space ~
\end_inset

key)
\family default
 Returns the value to which the specified key is mapped in this hash table
 as a string.
 If the item is a string, a cast is made, otherwise, the 
\family typewriter
toString()
\family default
 method is called.
 It returns 
\family typewriter
null
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\begin_layout Itemize

\family typewriter
getString(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

defaultValue)
\family default
 Returns the value to which the specified key is mapped in the hash table
 as a string.
 If the item is a atring, a cast is made, otherwise, the 
\family typewriter
toString()
\family default
 method is called.
 It returns 
\family typewriter
defaultValue
\family default
 if the key is not mapped to any value in the hash table.
 
\end_layout

\end_deeper
\begin_layout Itemize
To retrieve all values and/or keys from a hash table:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
getKeys()
\family default
 Returns a 
\family typewriter
Vector
\family default
 with all the keys in the hash table.
 The order is the same of the 
\family typewriter
getValues()
\family default
 method.
 
\end_layout

\begin_layout Itemize

\family typewriter
getValues()
\family default
 Returns a 
\family typewriter
Vector
\family default
 with all the values in the hash table.
 The order is the same of the 
\family typewriter
getKeys()
\family default
 method.
\end_layout

\begin_layout Itemize

\family typewriter
getKeyValuePairs(String
\begin_inset space ~
\end_inset

separator)
\family default
 Returns a 
\family typewriter
Vector
\family default
 with all the key/value pairs in the form 
\family typewriter
key + separator + value
\family default
.
 Each vector's element can safely be casted to string and separator sould
 be 
\family typewriter
:
\family default
, 
\family typewriter
=
\family default
, etc.
 
\end_layout

\begin_layout Itemize

\family typewriter
copyInto(Hashtable
\begin_inset space ~
\end_inset

target)
\family default
 Copies the keys and values of the hash table into the given target hash
 table.
 Note that the target hash table is not cleared; you should do that by yourself.
\end_layout

\begin_layout Itemize

\family typewriter
dumpKeysValues(StringBuffer
\begin_inset space ~
\end_inset

sb,vString
\begin_inset space ~
\end_inset

keyvalueSeparator,
\begin_inset Newline newline
\end_inset

String
\begin_inset space ~
\end_inset

lineSeparator)
\family default
 Dumps the keys and values into the given 
\family typewriter
StringBuffer
\family default
, where 
\family typewriter
keyvalueSeparator
\family default
 is the separator between the key and the value (e.
 g.
 
\family typewriter
:
\family default
) and 
\family typewriter
lineSeparator
\family default
 is the separator placed after each key+value pair (e.
 g.
 
\family typewriter

\backslash
r
\backslash
n
\family default
).
 The last separator is cut from the 
\family typewriter
StringBuffer
\family default
.
 
\end_layout

\end_deeper
\begin_layout Itemize
The method 
\family typewriter
size()
\family default
 returns the number of keys in the hash table.
\end_layout

\begin_layout Itemize
To remove a key and its corresponding value from the hash table, use:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
remove(Object
\family default

\begin_inset space ~
\end_inset


\family typewriter
key)
\family default
 Removes the key (and its corresponding value) from the hash table.
 This method does nothing if the key is not in the hash table.
 It returns the value to which the key had been mapped in the hash table,
 or 
\family typewriter
null
\family default
 if the key did not have a mapping.
\end_layout

\begin_layout Itemize

\family typewriter
remove(int
\begin_inset space ~
\end_inset

hash)
\family default
 Removes the key (and its corresponding value) from the hash table.
 This method does nothing if the key is not in the hash table.
 It returns the value to which the key had been mapped in the hash table,
 or 
\family typewriter
null
\family default
 if the key did not have a mapping.
\end_layout

\end_deeper
\begin_layout Itemize
To clear the hash table, removing all its entries, use 
\family typewriter
clear()
\family default
.
\end_layout

\begin_layout Itemize
The Hashtable class has a nested class called 
\family typewriter
Hashtable.Entry
\family default
.
 It has the following public fields:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
hash
\family default
 The hash code of a key.
\end_layout

\begin_layout Itemize

\family typewriter
key
\family default
 A key in the hash table.
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
 The value mapped to this key.
\end_layout

\begin_layout Itemize

\family typewriter
next
\family default
 Another entry in the hash table.
\end_layout

\end_deeper
\begin_layout Standard
This example creates a hash table of numbers.
 It uses the name of the numbers as keys:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Hashtable numbers = new Hashtable(13);
\end_layout

\begin_layout Plain Layout

numbers.put("one", Convert.toString(1));
\end_layout

\begin_layout Plain Layout

numbers.put("two", Convert.toString(2));
\end_layout

\begin_layout Plain Layout

numbers.put("three",Convert.toString(3));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To retrieve a number, use the following code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String n = (String)numbers.get("two");
\end_layout

\begin_layout Plain Layout

if (n != null)
\end_layout

\begin_layout Plain Layout

	new MessageBox("two = " + Convert.toInt(n)).popup(); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
IntHashtable
\end_layout

\begin_layout Standard
This class implements a hash table where both the keys and values inserted
 must be integers.
\end_layout

\begin_layout Itemize
Its public fields are similar to the ones from 
\family typewriter
Hashtable
\family default
.
 In 
\family typewriter
allowDuplicateKeys
\family default
, set it to 
\family typewriter
false
\family default
 to throw a 
\family typewriter
IntHashtable.DuplicatedKeyException
\family default
 if you add a key that already exists.
 It's very unusually to have two objects with same key, but it can occur.
 This is good to improve the program's correctness.
 
\end_layout

\begin_layout Itemize
It also has an 
\family typewriter
Entry
\family default
 nested class.
 However, diferently from 
\family typewriter
Hashtable
\family default
, it does not have the field 
\family typewriter
hash
\family default
 and 
\family typewriter
key
\family default
 is an integer instead of an object.
\end_layout

\begin_layout Itemize

\family typewriter
IntHashtable
\family default
 has two constructor:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
IntHashtable(int
\begin_inset space ~
\end_inset

initialCapacity)
\family default
 Creates an empty hash table with the specified initial capacity and default
 load factor of 
\family typewriter
0.75f
\family default
.
 The initial capacity must be the number of elements you think the hash
 table will end with.
 The hash table will grow if necessary, but using a number near or above
 the final size can improve performance.
 If 
\family typewriter
initialCapacity
\family default
 is zero, it is changed to 5.
 
\end_layout

\begin_layout Itemize

\family typewriter
IntHashtable(int
\begin_inset space ~
\end_inset

initialCapacity,
\begin_inset space ~
\end_inset

double
\begin_inset space ~
\end_inset

loadFactor)
\family default
 Same as above but receiving a load factor which must be between 0.0 and
 1.0.
\end_layout

\end_deeper
\begin_layout Itemize
To insert a new entry on the hash table:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
put(int
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

value)
\family default
 Maps the given value to the given key.
\end_layout

\begin_layout Itemize

\family typewriter
put(Object
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

value)
\family default
 Takes out the hash code from the given key object (
\family typewriter
object.hashCode()
\family default
) and calls the previous method.
 To increase safeness, set 
\family typewriter
allowDuplicateKeys
\family default
 to 
\family typewriter
false
\family default
.
 
\end_layout

\begin_layout Standard
If the given hash (or key's hash code) already exists in the hash table,
 the old value will be replaced by the given value (unless 
\family typewriter
allowDuplicateKeys
\family default
 is 
\family typewriter
true
\family default
) and the 
\family typewriter
put()
\family default
 method will return the old value (or the object hash code when inserting
 an object).
 Otherwise, the given value will be returned.
 If 
\family typewriter
allowDuplicateKeys
\family default
 is 
\family typewriter
false
\family default
 and a duplicated key is inserted, 
\family typewriter
IntHashtable.DuplicatedKeyException
\family default
 is thrown.
\begin_inset Newline newline
\end_inset

The value can be retrieved by calling the 
\family typewriter
get()
\family default
 method with a key that is equal to the original key.
\end_layout

\end_deeper
\begin_layout Itemize
To test if a key is already mapped in the hash table, use the method 
\family typewriter
exists(int key)
\family default
.
\end_layout

\begin_layout Itemize
To retrieve a value from a hash table:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
get(int
\begin_inset space ~
\end_inset

key)
\family default
 Returns the value to which the specified key is mapped in this hash table.
 It throws an 
\family typewriter
ElementNotFoundException
\family default
 when the key was not found.
 
\end_layout

\begin_layout Itemize

\family typewriter
get(Object
\begin_inset space ~
\end_inset

key)
\family default
 Returns the value to which the specified key hash code (
\family typewriter
key.
\begin_inset Newline newline
\end_inset

hashCode()
\family default
) is mapped in this hash table.
 It throws an 
\family typewriter
ElementNotFoundException
\family default
 when the key was not found.
 
\end_layout

\begin_layout Itemize

\family typewriter
get(int
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

def)
\family default
 Returns the value to which the specified key is mapped in this hash table,
 or the given default value (
\family typewriter
def
\family default
) if the key is not found.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Make sure you choose a value for 
\family typewriter
def
\family default
 that is never inserted as a value in the hash table, otherwise the return
 value of this method may be treated as a false negative (i.
 e.
 the key maps to a value equals to the given 
\family typewriter
def
\family default
, thus, if you test if the return is not equals to 
\family typewriter
def
\family default
 to check if the key was found, the result will be a false negative).
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
To retrieve all keys and values from a hash table:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
getKeys()
\family default
 Returns an 
\family typewriter
IntVector
\family default
 with all the keys in the hash table.
 The order is the same of the 
\family typewriter
getValues()
\family default
 method.
 
\end_layout

\begin_layout Itemize

\family typewriter
getValues()
\family default
 Returns an 
\family typewriter
IntVector
\family default
 with all the values in the hash table.
 The order is the same of the 
\family typewriter
getKeys()
\family default
 method.
 
\end_layout

\end_deeper
\begin_layout Itemize
You may use the method 
\family typewriter
getKey(int pos)
\family default
 to retrieve the key at the given position (
\family typewriter
pos
\family default
).
 An 
\family typewriter
ArrayIndexOutOfBoundsException
\family default
 is thrown if the given position is out of range.
 Note that the first key has no relation with the smallest key.
 
\end_layout

\begin_layout Itemize
The method 
\family typewriter
size()
\family default
 returns the number of keys in the hash table.
\end_layout

\begin_layout Itemize
To remove a key and its corresponding value from the hash table, use 
\family typewriter
remove(int key)
\family default
.
 This method throws an 
\family typewriter
ElementNotFoundException
\family default
 when the key was not found.
\end_layout

\begin_layout Itemize
To clear the hash table, removing all its entries, use 
\family typewriter
clear()
\family default
.
\end_layout

\begin_layout Itemize
The method 
\family typewriter
incrementValue(int key, int amount)
\family default
 increments the value of a key by the given amount.
 If the key doesn't exist, a new one is created with the amount.
 Otherwise, its value is changed by the amount.
 This method is useful to use an 
\family typewriter
IntHashtable
\family default
 as a multi counter.
 
\end_layout

\begin_layout Standard
This example creates a small hash table of numbers:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

IntHashtable numbers = new IntHashtable(10);
\end_layout

\begin_layout Plain Layout

numbers.put(1, 1000);
\end_layout

\begin_layout Plain Layout

numbers.put(2, 2000);
\end_layout

\begin_layout Plain Layout

numbers.put(3, 3000);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To retrieve a number, use the following code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	int i = numbers.get(2);
\end_layout

\begin_layout Plain Layout

	new MessageBox("two = " + i).popup();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch(ElementNotFoundException e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(e, true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another example is to count the number of collisions so that it is possible
 to chose the best 
\family typewriter
IntHashtable
\family default
 size (a similar code can be used for 
\family typewriter
Hashtable
\family default
):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int max = 0xFFFFFFF;
\end_layout

\begin_layout Plain Layout

for (int h = 5; ; h++)  
\end_layout

\begin_layout Plain Layout

{     
\end_layout

\begin_layout Plain Layout

	IntHashtable ht = new IntHashtable(h);
\end_layout

\begin_layout Plain Layout

	ht.put("nbsp".hashCode(),' ');
\end_layout

\begin_layout Plain Layout

	ht.put("shy".hashCode(),'-');
\end_layout

\begin_layout Plain Layout

	ht.put("quot".hashCode(),'"');
\end_layout

\begin_layout Plain Layout

	...
     
\end_layout

\begin_layout Plain Layout

	if (ht.collisions < max)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		Vm.debug("h: "+h+" colli: "+ht.collisions);
\end_layout

\begin_layout Plain Layout

		max = ht.collisions;
\end_layout

\begin_layout Plain Layout

		if (max == 0)
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout Section
Properties
\end_layout

\begin_layout Standard

\family typewriter
Properties
\family default
 can be used to store properties pairs (key, value) using a hash table.
 Currently, the key must be a string and the value must be an instance of
 
\family typewriter
Properties.Value
\family default
.
\end_layout

\begin_layout Standard
The properties can be saved and loaded to/from a 
\family typewriter
DataStream
\family default
.
\end_layout

\begin_layout Standard
Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Properties props = new Properties();
\end_layout

\begin_layout Plain Layout

File file;
\end_layout

\begin_layout Plain Layout

if (existe_arquivo(arquivo))
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	file = new File(arquivo, File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

	props.load(new DataStream(file));
\end_layout

\begin_layout Plain Layout

	file.close();
\end_layout

\begin_layout Plain Layout

}         
\end_layout

\begin_layout Plain Layout

props.put(propriedade,new Properties.Str(valor));
\end_layout

\begin_layout Plain Layout

file = new File(arquivo, File.CREATE);
\end_layout

\begin_layout Plain Layout

props.save(new DataStream(file));
\end_layout

\begin_layout Plain Layout

file.close();      
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
To avoid that the 
\family typewriter
load()
\family default
 method gets into an infinite loop if the file is empty or corrupted, the
 constant 
\family typewriter
MAX_PROPS
\family default
 limits the number of properties to 1000.
 If you are saving more than 1000 properties, just change this maximum value.
 
\end_layout

\begin_layout Itemize

\family typewriter
Properties
\family default
 has the following constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Properties()
\family default
 Default constructor, creates an empty 
\family typewriter
Properties
\family default
 object.
\end_layout

\begin_layout Itemize

\family typewriter
Properties(String[]
\begin_inset space ~
\end_inset

keys,
\begin_inset space ~
\end_inset

Properties.Value[]
\begin_inset space ~
\end_inset

values)
\family default
 Creates a 
\family typewriter

\begin_inset Newline newline
\end_inset

Properties
\family default
 object, storing the given keys/values pairs.
\end_layout

\end_deeper
\begin_layout Itemize
The following methods are provided to handle a 
\family typewriter
Properties
\family default
 objects and its entries:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
put(String
\begin_inset space ~
\end_inset

key,
\begin_inset space ~
\end_inset

Properties.Value
\begin_inset space ~
\end_inset

v)
\family default
 Maps the given value to the given key in the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
get(String
\begin_inset space ~
\end_inset

key)
\family default
 Returns the value whose key is mapped to in the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
remove(String
\begin_inset space ~
\end_inset

key)
\family default
 Remove the value mapped to the given key from the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
size()
\family default
 Returns the number of 
\family typewriter
Properties
\family default
 stored.
\end_layout

\begin_layout Itemize

\family typewriter
getKeys()
\family default
 Returns a 
\family typewriter
Vector
\family default
 with the current keys.
\end_layout

\begin_layout Itemize

\family typewriter
clear()
\family default
 Clears the 
\family typewriter
Properties
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
dumpKeysValues(StringBuffer
\begin_inset space ~
\end_inset

sb,String
\begin_inset space ~
\end_inset

keyvalueSeparator,
\begin_inset Newline newline
\end_inset

String
\begin_inset space ~
\end_inset

lineSeparator)
\family default
 Similar to 
\family typewriter
Hashtable.dumpKeysValues()
\family default
.
\end_layout

\end_deeper
\begin_layout Itemize
To load or save data directly from/to a 
\family typewriter
DataStream
\family default
:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
load(DataStream
\begin_inset space ~
\end_inset

ds)
\family default
 Load all 
\family typewriter
Properties
\family default
 from the given 
\family typewriter
DataStream
\family default
.
 Before calling this method, be sure that there's something to be read (i.
 e., that the file is not empty), to improve efficiency.
\end_layout

\begin_layout Itemize

\family typewriter
load(DataStream
\begin_inset space ~
\end_inset

ds,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

cleanBeforeLoad)
\family default
 Load all 
\family typewriter
Properties
\family default
 from the given 
\family typewriter
DataStream
\family default
.
 If 
\family typewriter
cleanBeforeLoad
\family default
 is 
\family typewriter
true
\family default
, the contents of the object will be cleared before reading from the stream.
 
\end_layout

\begin_layout Itemize

\family typewriter
save(DataStream
\begin_inset space ~
\end_inset

ds)
\family default
 Save all 
\family typewriter
Properties
\family default
 in the given 
\family typewriter
DataStream
\family default
.
 
\end_layout

\end_deeper
\begin_layout Standard
To store a value in 
\family typewriter
Properties
\family default
, you must extend the abstract class 
\family typewriter
Properties.Value
\family default
 and implement the method 
\family typewriter
toString()
\family default
.
\end_layout

\begin_layout Itemize
The following classes (and their field definition) are already implemented
 in the SDK:
\end_layout

\begin_deeper
\begin_layout Enumerate

\family typewriter
Properties.Boolean
\family default
 Implements a value of type 
\family typewriter
boolean
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
type
\family default
 Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
B
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
typeStr
\family default
 Equals to 
\family typewriter
boolean
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
 The 
\family typewriter
boolean
\family default
 value.
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns 
\family typewriter
1
\family default
 if value is 
\family typewriter
true
\family default
; 
\family typewriter
0
\family default
, otherwise.
\end_layout

\begin_layout Itemize

\family typewriter
hashCode()
\family default
 Returns the integer 1231 if the object represents 
\family typewriter
true
\family default
 and returns the integer 1237 if the object represents 
\family typewriter
false
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Returns 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Boolean
\family default
 object that represents the same 
\family typewriter
boolean
\family default
 value as the current object.
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Double
\family default
 Implements a value of type 
\family typewriter
double
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
type
\family default
 Equals to 
\family typewriter
TYPE 
\family default
(D).
\end_layout

\begin_layout Itemize

\family typewriter
typeStr
\family default
 Equals to 
\family typewriter
double
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
 The 
\family typewriter
double
\family default
 value.
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns a string representation of the value number (
\family typewriter
Convert.
\begin_inset Newline newline
\end_inset

toString(value)
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
hashCode()
\family default
 Returns a hash code for the 
\family typewriter
Properties.Double
\family default
 object.
 The result is the exclusive OR of the two halves of the 
\family typewriter
long
\family default
 integer bit representation, exactly as produced by the method 
\family typewriter
doubleToLongBits(double)
\family default
, of the primitive 
\family typewriter
double
\family default
 value represented by the object.
 That is, the hash code is the value of the expression: 
\family typewriter
(int) (v ˆ (v >>> 32))
\family default
 where 
\family typewriter
v
\family default
 is defined by: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

long v = Convert.doubleToLongBits(this.value); 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Properties.
\begin_inset Newline newline
\end_inset

Double
\family default
 object that represents a 
\family typewriter
double
\family default
 that has the same value as the 
\family typewriter
double
\family default
 represented by the original object.
 For this purpose, two 
\family typewriter
double
\family default
 values are considered to be the same if and only if the method 
\family typewriter
doubleToLongBits(double)
\family default
 returns the identical 
\family typewriter
long
\family default
 value when applied to each.
 
\begin_inset Newline newline
\end_inset

Note that, in most cases, for two instances of class 
\family typewriter
Properties.Double
\family default
, 
\family typewriter
d1
\family default
 and 
\family typewriter
d2
\family default
, the value of 
\family typewriter
d1.equals(d2)
\family default
 is 
\family typewriter
true
\family default
 if and only if 
\family typewriter

\begin_inset Newline newline
\end_inset

Convert.doubleToLongBits(d1.value) ==
\begin_inset Newline newline
\end_inset

Convert.doubleToLongBits(d2.value)
\family default
 also has the value 
\family typewriter
true
\family default
.
 However, there are two exceptions: 
\begin_inset Newline newline
\end_inset

If 
\family typewriter
d1
\family default
 and 
\family typewriter
d2
\family default
 both represent 
\family typewriter
Convert.DOUBLE_NAN_BITS
\family default
, then the 
\family typewriter
equals()
\family default
 method returns 
\family typewriter
true
\family default
, even though 
\family typewriter
Convert.doubleToLongBits(Convert.
\begin_inset Newline newline
\end_inset

DOUBLE_NAN_BITS) == Convert.doubleToLongBits(Convert.
\begin_inset Newline newline
\end_inset

DOUBLE_NAN_BITS)
\family default
 has the value 
\family typewriter
false
\family default
.
\begin_inset Newline newline
\end_inset

If 
\family typewriter
d1
\family default
 represents 
\family typewriter
+0.0
\family default
 while 
\family typewriter
d2
\family default
 represents 
\family typewriter
-0.0
\family default
, or vice versa, the equal test has the value 
\family typewriter
false
\family default
, even though 
\family typewriter
+0.0==-0.0
\family default
 has the value 
\family typewriter
true
\family default
.
 This definition allows hash tables to operate properly.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Int
\family default
 Implements a value of type 
\family typewriter
int
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
type
\family default
 Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
I
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
typeStr
\family default
 Equals to 
\family typewriter
int
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
 The 
\family typewriter
int
\family default
 value.
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns a string representation of the value number (
\family typewriter
Convert.
\begin_inset Newline newline
\end_inset

toString(value)
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
hashCode()
\family default
 Returns a hash code value for the object, equal to the primitive 
\family typewriter
int
\family default
 value represented by the 
\family typewriter
Properties.Int
\family default
 object.
 
\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Properties.Int
\family default
 object that contains the same 
\family typewriter
int
\family default
 value as the original object.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Long
\family default
 Implements a value of type 
\family typewriter
long
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
type
\family default
 Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
L
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
typeStr
\family default
 Equals to 
\family typewriter
long
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
value
\family default
 The 
\family typewriter
long
\family default
 value.
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns a string representation of the value number (
\family typewriter
Convert.
\begin_inset Newline newline
\end_inset

toString(value)
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
hashCode()
\family default
 Returns a hash code for the 
\family typewriter
Properties.Long
\family default
 object.
 The result is the exclusive OR of the two halves of the primitive 
\family typewriter
long
\family default
 value held by the object.
 That is, the hash code is the value of the expression: 
\family typewriter
(int) (this.value ˆ (this.value >>> 32))
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
Properties.
\begin_inset Newline newline
\end_inset

Long
\family default
 object that contains the same 
\family typewriter
long
\family default
 value as the original object.
 
\end_layout

\end_deeper
\begin_layout Enumerate

\family typewriter
Properties.Str
\family default
 Implements a value of type 
\family typewriter
String
\family default
.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
type
\family default
 Equals to 
\family typewriter
TYPE 
\family default
(
\family typewriter
S
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
typeStr
\family default
 Equals to 
\family typewriter
String
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns 
\family typewriter
value
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
hashCode()
\family default
 Returns the hash code of the enclosed string value (
\family typewriter
value.
\begin_inset Newline newline
\end_inset

hashCode()
\family default
).
 
\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

obj)
\family default
 Compares one object against another specified object.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and is a 
\family typewriter
String
\family default
 object, or another 
\family typewriter
Properties.Str
\family default
 object, that represents the same sequence of characters as the original
 object.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Section
Random
\end_layout

\begin_layout Standard
This is a simple Linear Congruential Generator which produces random numbers
 in the range 
\begin_inset Formula $\left[0,2^{31}\right)$
\end_inset

, derived from 
\family typewriter
ran0()
\family default
 in Numerical Recipes.
 Note that 
\family typewriter
ran0()
\family default
 isn't that great – there are much better generators out there -- but it
 is fast and has low memory consumption, and it will do the job.
\end_layout

\begin_layout Standard
Here's a sample of how to use the Random class: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Random r = new Random(0x1234); // the use of the same key is sometimes desirable
 
\end_layout

\begin_layout Plain Layout

for (...) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int nextRandomInt = r.between(0,10);
\end_layout

\begin_layout Plain Layout

	char nextRandomChar = r.between('a','z');
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Random
\family default
 has the following constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Random()
\family default
 Default constructor, creates a 
\family typewriter
Random
\family default
 instance using a seed based on the timestamp.
\end_layout

\begin_layout Itemize

\family typewriter
Random(int
\begin_inset space ~
\end_inset

seed)
\family default
 Creates a 
\family typewriter
Random
\family default
 object using the given seed.
 The only reasonable seeds are between 0 and 2
\begin_inset script superscript

\begin_layout Plain Layout
31
\end_layout

\end_inset

 inclusive.
 If a negative value is received, its absolute value will be used.
\end_layout

\end_deeper
\begin_layout Itemize
The class has only 4 simple methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
nextInt(int
\begin_inset space ~
\end_inset

n)
\family default
 Returns a random integer in the range 
\family typewriter
[0, n)
\family default
.
 
\family typewriter
n
\family default
 must be 
\family typewriter
> 0
\family default
; otherwise, -1 is returned.
 
\end_layout

\begin_layout Itemize

\family typewriter
nextDouble()
\family default
 Returns a random 
\family typewriter
double
\family default
 in the half-open range 
\family typewriter
[0, 1)
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
between(int
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

e)
\family default
 Returns a random integer in the given region.
 E.
 g.
 : 
\family typewriter
rand(1, 10)
\family default
 returns a random integer in the range of 1 to 10, inclusive.
 Note that if 
\family typewriter
s == e
\family default
, it will return in the range 
\family typewriter
s
\family default
 and 
\family typewriter
e+1
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
between(char
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

e)
\family default
 Returns a random character in the given region.
 E.
 g.: 
\family typewriter
between('a', 'e')
\family default
 returns a random character between 
\family typewriter
a
\family default
 and 
\family typewriter
e
\family default
, inclusive.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You should only use one instance of 
\family typewriter
Random
\family default
, otherwise you might not get good values.
 Creating a new instance using always the same seed will always result on
 the same sequence of numbers.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Logger
\end_layout

\begin_layout Standard
A 
\family typewriter
Logger
\family default
 object is used to log messages for a specific system or application component.
 Loggers are usually named using a hierarchical dot-separated namespace.
 Logger names can be arbitrary strings, but they should usually be based
 on the package name or class name of the logged component, such as 
\family typewriter
totalcross.net
\family default
 or 
\family typewriter
totalcross.io
\family default
.
 In addition it is possible to retrieve one global "anonymous" logger that
 can be used in the whole system.
 A logger can be created or retrieved (if it already exists) by 
\family typewriter
getLogger()
\family default
.
 To dispose a logger after using it, just call 
\family typewriter
dispose()
\family default
 and it will be permanently discarded (it will be closed and it won't be
 possible to use it anymore).
 To log a message, you may call the 
\family typewriter
log()
\family default
 method or any of the other convenience methods (
\family typewriter
info()
\family default
, 
\family typewriter
severe()
\family default
, 
\family typewriter
entering()
\family default
, etc).
 
\end_layout

\begin_layout Itemize
First you must be familiar with the different message levels:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
CONFIG
\family default
 Message level for static configuration messages.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
INFO
\family default
 Message level for informational messages.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
FINE
\family default
 Message level providing tracing information.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
FINER
\family default
 Indicates a fairly detailed tracing message.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
FINEST
\family default
 Indicates a highly detailed tracing message.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
WARNING
\family default
 Message level indicating a potential problem.
\end_layout

\begin_layout Labeling
\labelwidthstring WARNING0

\family typewriter
SEVERE
\family default
 Message level indicating a serious failure.
\end_layout

\end_deeper
\begin_layout Itemize
You may get or set the logger default settings with these static methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
getDefaultSeparator()
\family default
 Returns the string used as initial message separator, which is used by
 new loggers.
 A separator is a string that separates two log messages.
\end_layout

\begin_layout Itemize

\family typewriter
setDefaultSeparator(String
\begin_inset space ~
\end_inset

separator)
\family default
 Sets the initial message separator to be used by new loggers.
\end_layout

\begin_layout Itemize

\family typewriter
getDefaultLevel()
\family default
 Returns the initial logger level, which is used by new loggers.
\end_layout

\begin_layout Itemize

\family typewriter
setDefaultLevel(int
\begin_inset space ~
\end_inset

level)
\family default
 Sets the initial logger level to be used by new loggers.
\end_layout

\end_deeper
\begin_layout Itemize
The logger level may be one of the above message levels, or any composition
 of them 
\family typewriter
OR
\family default
'ed together.
 You may also use one of the following constants:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
ALL
\family default
 Indicates that all messages should be logged.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
OFF
\family default
 Special level that can be used to turn off logging.
\end_layout

\end_deeper
\begin_layout Itemize
To get a logger, you may use one of the following static methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
getLogger(String
\begin_inset space ~
\end_inset

name)
\family default
 Returns the logger with the given name, keeping its level and output handlers
 unchanged.
 If the logger does not exist, it will be created and stored for future
 use.
\end_layout

\begin_layout Itemize

\family typewriter
getLogger(String
\begin_inset space ~
\end_inset

name,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

level)
\family default
 Returns the logger with the given name, setting the specified level and
 keeping the output handlers unchanged.
 If the logger does not exist, it will be created and stored for future
 use.
 If 
\family typewriter
level == -1
\family default
, it won't be changed.
\end_layout

\begin_layout Itemize

\family typewriter
getLogger(String
\begin_inset space ~
\end_inset

name,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

level,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

outputStream)
\family default
 Returns
\begin_inset Newline newline
\end_inset

the logger with the given name, setting the level specified and optionally
 adding the given stream to the list of output handlers.
 If the logger does not exist, it will be created and stored for future
 use.
 If 
\family typewriter
level == -1
\family default
 or 
\family typewriter
outputStream == null
\family default
, it won't be changed.
\end_layout

\begin_layout Itemize

\family typewriter
getGlobalLogger()
\family default
 Returns the global anonymous logger (
\family typewriter
name == null
\family default
).
 Notice that the name can't be null in the above methods.
\end_layout

\end_deeper
\begin_layout Itemize
After getting a 
\family typewriter
Logger
\family default
 instance, you may get or set its settings:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
getName()
\family default
 Returns the name of the logger or 
\family typewriter
null
\family default
, if the logger is the global anonymous logger.
\end_layout

\begin_layout Itemize

\family typewriter
getSeparator()
\family default
 Returns the string used by the logger to separate log messages.
\end_layout

\begin_layout Itemize

\family typewriter
setSeparator(String
\begin_inset space ~
\end_inset

separator)
\family default
 Sets the separator to be used by the logger.
\end_layout

\begin_layout Itemize

\family typewriter
getLevel()
\family default
 Returns the current level of the logger, which is an integer number representin
g the current logger level.
 To check if the logger is set to log a specific type of message (
\family typewriter
SEVERE
\family default
, 
\family typewriter
WARNING
\family default
, etc), just check if the level 
\family typewriter
OR
\family default
'ed with the message level is different from zero.
\end_layout

\begin_layout Itemize

\family typewriter
setLevel(int
\begin_inset space ~
\end_inset

level)
\family default
 Sets the current level of the logger.
 
\family typewriter
level
\family default
 should be a composition of one or more of the message types constants (
\family typewriter
FINEST
\family default
, 
\family typewriter
FINER
\family default
, 
\family typewriter
FINE
\family default
, 
\family typewriter
CONFIG
\family default
, 
\family typewriter
INFO
\family default
, 
\family typewriter
WARNING
\family default
, or 
\family typewriter
SEVERE
\family default
), 
\family typewriter
OFF
\family default
, if you want to disable all logging, or 
\family typewriter
ALL
\family default
, if you want to enable all logging.
\end_layout

\begin_layout Itemize

\family typewriter
getSeparator()
\family default
 Gets the string used to separate two log messages, that is, the string
 written after each log message.
 A separator can be 
\family typewriter

\backslash
n
\family default
 (newline), white spaces, etc.
 
\end_layout

\begin_layout Itemize

\family typewriter
setSeparator(String
\begin_inset space ~
\end_inset

separator)
\family default
 Sets the string used to separate two log messages.
 
\end_layout

\end_deeper
\begin_layout Itemize
You must add an output handler to a logger, which is a stream object that
 will receive the log messages.
 A logger may have multiple output handlers.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
addOutputHandler(Stream
\begin_inset space ~
\end_inset

output)
\family default
 Adds an output stream to the logger's output handler set.
 It does nothing if the given stream was previously added to this logger.
 This means that every logged message (depending on the current logger level)
 will be written to this new stream.
 
\end_layout

\begin_layout Itemize

\family typewriter
getOutputHandlers()
\family default
 Gets the output handlers associated with the logger, returning an array
 of all registered output handlers.
\end_layout

\begin_layout Itemize

\family typewriter
removeOutputHandler(Stream
\begin_inset space ~
\end_inset

output)
\family default
 Removes an output handler from the logger's output handler set.
 It return 
\family typewriter
true
\family default
 if, and only if, the stream was successfully removed.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You may use the static field 
\family typewriter
DEBUG_CONSOLE
\family default
, which is a stream to the TotalCross' debug file.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
The following methods can be used to help you trace the execution flow of
 your code and log exceptions:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
entering(String
\begin_inset space ~
\end_inset

sourceClass,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

sourceMethod,
\begin_inset Newline newline
\end_inset

String
\begin_inset space ~
\end_inset

params)
\family default
 Logs a 
\family typewriter
FINER
\family default
 message reporting a method entry.
 A record with message
\family typewriter
 ENTRY
\family default
, log level 
\family typewriter
FINER
\family default
, and the given parameters are logged.
\end_layout

\begin_layout Itemize

\family typewriter
exiting(String
\begin_inset space ~
\end_inset

sourceClass,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

sourceMethod)
\family default
 Logs a 
\family typewriter
FINER
\family default
 message reporting a method return.
 A record with message
\family typewriter
 RETURN
\family default
, log level 
\family typewriter
FINER
\family default
, and the given parameters are logged.
\end_layout

\begin_layout Itemize

\family typewriter
throwing(String
\begin_inset space ~
\end_inset

sourceClass,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

sourceMethod,
\begin_inset Newline newline
\end_inset

Throwable
\begin_inset space ~
\end_inset

thrown)
\family default
 Logs a 
\family typewriter
SEVERE
\family default
 message reporting an exception being thrown.
 A record with message
\family typewriter
 THROW
\family default
, log level 
\family typewriter
SEVERE
\family default
, and the given parameters are logged.
\end_layout

\end_deeper
\begin_layout Itemize
To log your own message, you may use:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
log(int
\begin_inset space ~
\end_inset

level,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

message,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

prependInfo)
\family default
 Logs the given message, using the given level.
 The last argument is a flag indicating whether this log message must be
 prepended with the current date and time, level string, logger name, etc.
 It will throw a 
\family typewriter
NullPointerException
\family default
 if one or more registered output handler streams are 
\family typewriter
null
\family default
 or the logger has been disposed.
\end_layout

\end_deeper
\begin_layout Itemize
Or one of the convenience methods, which are actually just calls to the
 method 
\family typewriter
log()
\family default
 using the given message, the appropriate level, and the 
\family typewriter
prependInfo
\family default
 flag always on:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
config(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
CONFIG
\family default
 message.
\end_layout

\begin_layout Itemize

\family typewriter
info(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs an 
\family typewriter
INFO
\family default
 message.
\end_layout

\begin_layout Itemize

\family typewriter
fine(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
FINE
\family default
 message.
\end_layout

\begin_layout Itemize

\family typewriter
finer(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
FINER
\family default
 message.
\end_layout

\begin_layout Itemize

\family typewriter
finest(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
FINEST
\family default
 message.
\end_layout

\begin_layout Itemize

\family typewriter
warning(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
WARNING
\family default
 message.
\end_layout

\begin_layout Itemize

\family typewriter
severe(String
\begin_inset space ~
\end_inset

message)
\family default
 Logs a 
\family typewriter
SEVERE
\family default
 message.
\end_layout

\end_deeper
\begin_layout Itemize
Finally, you should dispose the logger and close all streams associated
 to the logger, unless its streams are still in use by the program.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
dispose(boolean
\begin_inset space ~
\end_inset

closeOutputHandlers)
\family default
 Permanently discards this logger, removing it from the loggers registry.
 If 
\family typewriter
closeOutputHandlers
\family default
 is 
\family typewriter
true
\family default
, all streams associated to this logger are closed.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You shouldn't (and in fact you can't) dispose the global logger.
 Calling 
\family typewriter
dispose()
\family default
 for the global logger does not discard it, only adds an useless method
 call to your code.
\end_layout

\end_inset


\end_layout

\begin_layout Section
BigDecimal
\end_layout

\begin_layout Standard
Arbitrary-precision signed decimal numbers.
 A 
\family typewriter
BigDecimal
\family default
 consists of an arbitrary precision integer unscaled value and a 32-bit
 integer scale.
 If zero or positive, the scale is the number of digits to the right of
 the decimal point.
 If negative, the unscaled value of the number is multiplied by ten to the
 power of the negation of the scale.
 The value of the number represented by the 
\family typewriter
BigDecimal
\family default
 is therefore 
\family typewriter
unscaledValue × 10
\begin_inset script superscript

\begin_layout Plain Layout

\family typewriter
-scale
\end_layout

\end_inset


\family default
.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
BigDecimal
\family default
 class provides operations for arithmetic, scale manipulation, rounding,
 comparison, hashing, and format conversion.
 The 
\family typewriter
toString()
\family default
 method provides a canonical representation of a 
\family typewriter
BigDecimal
\family default
.
\end_layout

\begin_layout Standard
The 
\family typewriter
BigDecimal
\family default
 class gives its user complete control over rounding behavior.
 If no rounding mode is specified and the exact result cannot be represented,
 an exception is thrown; otherwise, calculations can be carried out to a
 chosen precision and rounding mode.
\end_layout

\begin_layout Standard
Since the same numerical value can have different representations (with
 different scales), the rules of arithmetic and rounding must specify both
 the numerical result and the scale used in the result's representation.
 In general the rounding modes and precision setting determine how operations
 return results with a limited number of digits when the exact result has
 more digits (perhaps infinitely many in the case of division) than the
 number of digits returned.
 
\end_layout

\begin_layout Standard
For all arithmetic operators, the operation is carried out as though an
 exact intermediate result were first calculated and then rounded to the
 number of digits specified by the precision setting (if necessary), using
 the selected rounding mode.
 If the exact result is not returned, some digit positions of the exact
 result are discarded.
 When rounding increases the magnitude of the returned result, it is possible
 for a new digit position to be created by a carry propagating to a leading
 "9" digit.
 For example, rounding the value 999.9 to three digits rounding up would
 be numerically equal to one thousand, represented as 100×10
\begin_inset script superscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

.
 In such cases, the new "1" is the leading digit position of the returned
 result.
 
\end_layout

\begin_layout Standard
Besides a logical exact result, each arithmetic operation has a preferred
 scale for representing a result.
 The preferred scale for each operation is listed in the table below.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Preferred Scale of Result
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Add
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
max(addend.scale(), augend.scale())
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Subtract
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
max(minuend.scale(), subtrahend.scale())
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Multiply
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
multiplier.scale() + multiplicand.scale()
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Divide
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
dividend.scale() - divisor.scale()
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
These scales are the ones used by the methods which return exact arithmetic
 results; except that an exact divide may have to use a larger scale since
 the exact result may have more digits.
 For example, 1/32 is 0.03125.
 
\end_layout

\begin_layout Standard
Before rounding, the scale of the logical exact intermediate result is the
 preferred scale for that operation.
 If the exact numerical result cannot be represented in precision digits,
 rounding selects the set of digits to return and the scale of the result
 is reduced from the scale of the intermediate result to the least scale
 which can represent the precision digits actually returned.
 If the exact result can be represented with at most precision digits, the
 representation of the result with the scale closest to the preferred scale
 is returned.
 In particular, an exactly representable quotient may be represented in
 fewer than precision digits by removing trailing zeros and decreasing the
 scale.
 For example, rounding to three digits using the floor rounding mode, 
\family typewriter

\begin_inset Newline newline
\end_inset

19/100 = 0.19 // integer=19, scale=2 
\family default

\begin_inset Newline newline
\end_inset

but 
\begin_inset Newline newline
\end_inset


\family typewriter
21/110 = 0.190 // integer=190, scale=3
\family default
 
\end_layout

\begin_layout Standard
Note that for add, subtract, and multiply, the reduction in scale will equal
 the number of digit positions of the exact result which are discarded.
 If the rounding causes a carry propagation to create a new high-order digit
 position, an additional digit of the result is discarded than when no new
 digit position is created.
 
\end_layout

\begin_layout Standard
Other methods may have slightly different rounding semantics.
 For example, the result of the 
\family typewriter
pow()
\family default
 method using the specified algorithm can occasionally differ from the rounded
 mathematical result by more than one unit in the last place, one ulp.
 
\end_layout

\begin_layout Standard
Two types of operations are provided for manipulating the scale of a 
\family typewriter
BigDecimal
\family default
: scaling/rounding operations and decimal point motion operations.
 Scaling/rounding operations (
\family typewriter

\begin_inset Newline newline
\end_inset

setScale()
\family default
) return a 
\family typewriter
BigDecimal
\family default
 whose value is approximately (or exactly) equal to that of the operand,
 but whose scale or precision is the specified value; that is, they increase
 or decrease the precision of the stored number with minimal effect on its
 value.
 Decimal point motion operations (
\family typewriter
movePointLeft()
\family default
 and 
\family typewriter
movePointRight()
\family default
) return a 
\family typewriter
BigDecimal
\family default
 created from the operand by moving the decimal point a specified distance
 in the specified direction.
 
\end_layout

\begin_layout Standard
All methods and constructors for this class throw 
\family typewriter
NullPointerException
\family default
 when passed a 
\family typewriter
null
\family default
 object reference for any input parameter.
 
\end_layout

\begin_layout Standard
If you need numerical precision, you need to use this class when dealing
 with floating point numbers.
 
\end_layout

\begin_layout Standard
Computers don't deal properly with decimals.
 As you already know, data is represented internaly using the binary format.
\end_layout

\begin_layout Standard
The number 4, for instance, is represented by 100 (
\family typewriter
1x2
\begin_inset script superscript

\begin_layout Plain Layout
2
\end_layout

\end_inset

 + 0x2
\begin_inset script superscript

\begin_layout Plain Layout
1
\end_layout

\end_inset

 + 0x2
\begin_inset script superscript

\begin_layout Plain Layout
0
\end_layout

\end_inset

 = 4
\family default
).
\end_layout

\begin_layout Standard
How to represent a number smaller than 1? Each decimal digit after the dot
 represents the values 
\family typewriter
1/2
\family default
 (
\family typewriter
2
\begin_inset script superscript

\begin_layout Plain Layout
-1
\end_layout

\end_inset


\family default
), 
\family typewriter
1/4
\family default
 (
\family typewriter
2
\begin_inset script superscript

\begin_layout Plain Layout
-2
\end_layout

\end_inset


\family default
), 
\family typewriter
1/8
\family default
 (
\family typewriter
2
\begin_inset script superscript

\begin_layout Plain Layout
-3
\end_layout

\end_inset


\family default
), and so on.
\end_layout

\begin_layout Standard
Therefore, the numbers 4.25, 4.5, and 4.75 are represented in binary like this,
 respectively: 100,01, 100,10, and 100,11.
\end_layout

\begin_layout Standard
This is very poor to represent decimals.
 Trying to represent 0.3 in binary results in an infinite binary number,
 because 0.3 = 0.25 + 0.03125 + 0.009765635...
\end_layout

\begin_layout Standard
To bypass the problem, the calculations are done with many decimal digits
 and then the result is rounded.
 This explains why 
\family typewriter
double
\family default
 and 
\family typewriter
float
\family default
 calculations are not precise.
 Some processors use 50 bits, which is good enough for many applications.
 However, it is not an infinite number of bits, which is needed to represent
 some numbers, such as 0.3.
 
\end_layout

\begin_layout Standard
A correct example to use this class is the following:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public static BigDecimal newBigDecimal(String value) throws InvalidNumberExcepti
on
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return new BigDecimal(value.replace(Settings.decimalSeparator, '.'));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public static String toPlainString(BigDecimal value)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	return value.toPlainString().replace('.', Settings.decimalSeparator);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

BigDecimal num1 = newBigDecimal("5.912");
\end_layout

\begin_layout Plain Layout

BigDecimal num2 = newBigDecimal("0.01");
\end_layout

\begin_layout Plain Layout

BigDecimal num3 = num1.multiply(num2).setScale(4, BigDecimal.ROUND_HALF_EVEN);
\end_layout

\begin_layout Plain Layout

Vm.debug("Resultado: "+toPlainString(num3)); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you are getting a value typed by the user in a text box, DON'T CONVERT
 IT TO DOUBLE! You must create a 
\family typewriter
BigDecimal
\family default
 directly.
\end_layout

\begin_layout Standard
That is, the following code is WRONG:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double d = Convert.toDouble(edValor.getText());
\end_layout

\begin_layout Plain Layout

BigDecimal b = new BigDecimal(d);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When you convert the number to double, you LOSE PRECISION.
 The correct code is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

BigDecimal b = new BigDecimal(edValor.getText()); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Read its JavaDoc (and also 
\family typewriter
java.math.BigDecimal
\family default
 JavaDoc for the parts used in TotalCross) to learn how to use each method,
 constructor, and constant!
\end_layout

\begin_layout Section
BigInteger
\end_layout

\begin_layout Standard
This class represents arbitrary-precision integers.
 All operations behave as if 
\family typewriter
BigIntegers
\family default
 were represented in two's-complement notation (like Java's primitive integer
 types).
 
\family typewriter
BigInteger
\family default
 provides analogues to all of Java's primitive integer operators.
 Additionally, 
\family typewriter
BigInteger
\family default
 provides operations for modular arithmetic, GCD calculation, primality
 testing, prime generation, bit manipulation, and a few other miscellaneous
 operations.
 
\end_layout

\begin_layout Standard
Semantics of arithmetic operations exactly mimic those of Java's integer
 arithmetic operators, as defined in The Java Language Specification.
 For example, division by zero throws an
\family typewriter

\begin_inset Newline newline
\end_inset

ArithmeticException
\family default
, and division of a negative by a positive yields a negative (or zero) remainder.
 All of the details in the specification concerning overflow are ignored,
 as 
\family typewriter
BigIntegers
\family default
 are made as large as necessary to accommodate the results of an operation.
 
\end_layout

\begin_layout Standard
Semantics of shift operations extend those of Java's shift operators to
 allow for negative shift distances.
 A right-shift with a negative shift distance results in a left shift, and
 vice-versa.
 The unsigned right shift operator (>>>) is omitted, as this operation makes
 little sense in combination with the "infinite word size" abstraction provided
 by this class.
 
\end_layout

\begin_layout Standard
Semantics of bitwise logical operations exactly mimic those of Java's bitwise
 integer operators.
 The binary operators (and, or, xor) implicitly perform sign extension on
 the shorter of the two operands prior to performing the operation.
 
\end_layout

\begin_layout Standard
Comparison operations perform signed integer comparisons, analogous to those
 performed by Java's relational and equality operators.
 
\end_layout

\begin_layout Standard
Modular arithmetic operations are provided to compute residues, perform
 exponentiation, and compute multiplicative inverses.
 These methods always return a non-negative result, between 0 and (modulus
 - 1), inclusive.
 
\end_layout

\begin_layout Standard
Bit operations operate on a single bit of the two's-complement representation
 of their operand.
 If necessary, the operand is sign-extended so that it contains the designated
 bit.
 None of the single-bit operations can produce a 
\family typewriter
BigInteger
\family default
 with a different sign from the 
\family typewriter
BigInteger
\family default
 being operated on, as they affect only a single bit, and the "infinite
 word size" abstraction provided by this class ensures that there are infinitely
 many "virtual sign bits" preceding each 
\family typewriter
BigInteger
\family default
.
 
\end_layout

\begin_layout Standard
Most methods and constructors in this class throw 
\family typewriter
NullPointerException
\family default
 when passed a 
\family typewriter
null
\family default
 object reference for any input parameter.
 
\end_layout

\begin_layout Standard
Read its JavaDoc (and also 
\family typewriter
java.math.BigInteger
\family default
 JavaDoc for the parts used in TotalCross) to learn how to use each method,
 constructor, and constant!
\end_layout

\begin_layout Chapter
totalcross.sys
\end_layout

\begin_layout Standard
For more details about each class, please read their JavaDocs.
\end_layout

\begin_layout Section
Time
\begin_inset CommandInset label
LatexCommand label
name "sec:Time"

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
Time
\family default
 class stores a specific a date and time.
 The year must have 4 digits and the hour is numbered in 24-hour notation,
 which is the international standard notation of time, and may also be referred
 as military time or astronomical time.
\end_layout

\begin_layout Standard
For performance reasons, the 
\family typewriter
Time
\family default
 fields have public access.
 So you can directly access the field day to get or set its value, instead
 of calling a method.
 However, that makes the 
\family typewriter
Time
\family default
 objects unsafe because the fields' values are not checked when they are
 set, and may not be within the field valid range.
\end_layout

\begin_layout Standard
Since the fields can be set without any kind of validation, it would be
 pointless to add validation to the other methods, therefore, 
\emph on
the Time fields' values are never validated by any method or constructor
\emph default
.
 So you must know and always respect the fields' range, and never set a
 field with a variable without first checking if the value is withing range
 (for instance, let the user type the hour in an edit and simply convert
 it to 
\family typewriter
int
\family default
 and set the 
\family typewriter
hour
\family default
 field, without checking if its value is between 0 and 23).
\end_layout

\begin_layout Itemize
The 
\family typewriter
Time
\family default
 fields with their respective range:
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
year
\family default
 The year in 4 digits.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
month
\family default
 The month in the range of 1 to 12.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
day
\family default
 The day in the range of 1 to the last day of the specified month.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
hour
\family default
 The hour in the range of 0 to 23.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
minute
\family default
 The minute in the range of 0 to 59.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
second
\family default
 The second in the range of 0 to 59.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
millis
\family default
 Milliseconds in the range of 0 to 999.
\end_layout

\end_deeper
\begin_layout Itemize
Time has a constant called 
\family typewriter
SECONDS_PER_DAY
\family default
, which obviously represents the number of seconds in a day, being equal
 to 
\family typewriter
24 * 3600
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
Time
\family default
 has six constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Time()
\family default
 Default constructor, creates a 
\family typewriter
Time
\family default
 object set with the device's current date and time.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Most devices do not keep track of the milliseconds, therefore, the field
 
\family typewriter
millis
\family default
 of the new object will always have the default value 0 on them.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Time(int
\begin_inset space ~
\end_inset

year,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

month,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

day,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

hour,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

minute,
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

second,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

millis)
\family default
 Creates a 
\family typewriter
Time
\family default
 object with the given values.
\end_layout

\begin_layout Itemize

\family typewriter
Time(long
\begin_inset space ~
\end_inset

t)
\family default
 Creates a 
\family typewriter
Time
\family default
 object from the given value, which must be in the format 
\family typewriter
YYYYMMDDHHMMSS
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
Time(int
\begin_inset space ~
\end_inset

yyyymmdd,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

hhmmssmmm)
\family default
 Constructs a 
\family typewriter
Time
\family default
 object from the given date and time values.
 
\end_layout

\begin_layout Itemize

\family typewriter
Time(String
\begin_inset space ~
\end_inset

iso8601)
\family default
 Creates a 
\family typewriter
Time
\family default
 object using the given string, which must be in the ISO8601 format: 
\family typewriter
YYYYMMDDTHH:MM:SS
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Please notice the last three constructors do not include the milliseconds,
 so the field 
\family typewriter
millis
\family default
 will keep its default value 0.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
Time(String
\begin_inset space ~
\end_inset

time,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

hasYear,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

hasMonth,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

hasDay,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

hasHour,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

hasMinute,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

hasSeconds)
\family default
 Constructs a 
\family typewriter
Time
\family default
 object, parsing the string and placing the fields depending on the flags
 that were set, using 
\family typewriter
Settings.timeSeparator
\family default
 as spliter.
 The number of parts must match the number of 
\family typewriter
true
\family default
 flags, or an
\family typewriter

\begin_inset Newline newline
\end_inset

ArrayIndexOutOfBoundsException
\family default
 will be thrown.
 AM/PM is supported.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember: no kind of validation is done on the 
\family typewriter
Time
\family default
 fields values, not even on the constructors.
 However, the default constructor will never initialize an object with invalid
 values, and the last two constructors may throw an 
\family typewriter
InvalidNumberException
\family default
 if it fails to parse the given string.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Finally, 
\family typewriter
Time
\family default
 has the following methods:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
update()
\family default
 Updates the internal fields with the current timestamp.
\end_layout

\begin_layout Itemize

\family typewriter
equals(Object
\begin_inset space ~
\end_inset

o)
\family default
 Compares two 
\family typewriter
Time
\family default
 objects for equality.
 The result is 
\family typewriter
true
\family default
 if and only if the argument is not 
\family typewriter
null
\family default
 and it's a 
\family typewriter
Time
\family default
 object that represents the same point in time, from year to millisecond,
 as this object.
\end_layout

\begin_layout Itemize

\family typewriter
getTimeLong()
\family default
 Converts this 
\family typewriter
Time
\family default
 object to a long value in the format
\family typewriter

\begin_inset Newline newline
\end_inset

YYYYMMDDHHMMSS.

\family default
 Milliseconds is not included.
\end_layout

\begin_layout Itemize

\family typewriter
toIso8601()
\family default
 Converts this 
\family typewriter
Time
\family default
 object to a string in the ISO8601 format:
\family typewriter

\begin_inset Newline newline
\end_inset

YYYYMMDDTHH:MM:SS
\family default
.
 Milliseconds is not included.
\end_layout

\begin_layout Itemize

\family typewriter
toString()
\family default
 Returns the time in format specified in 
\family typewriter
totalcross.sys.Settings
\family default
 (does NOT include the date neither the milliseconds).
 To return the date, use the class 
\family typewriter
totalcross.util.Date
\family default
.
 So, to get a string with the date and time, use: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Time t = new Time(); 
\end_layout

\begin_layout Plain Layout

String dateAndTime = new Date(t) + " " + t;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
toString(String
\begin_inset space ~
\end_inset

timeSeparator)
\family default
 Similar to the above method except that it uses the specified separator.
\end_layout

\begin_layout Itemize

\family typewriter
dump(StringBuffer
\begin_inset space ~
\end_inset

sb,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

timeSeparator,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

includeMillis)
\family default
 Dumps the time into the given 
\family typewriter
StringBuffer
\family default
, using the given separator and including the millileconds if asked by the
 user.
\end_layout

\begin_layout Itemize

\family typewriter
isValid()
\family default
 Returns 
\family typewriter
true
\family default
 if the time is valid.
 Note that the date part is NOT checked; only hour, minute, second, and
 millis are checked against valid ranges.
 
\end_layout

\begin_layout Itemize

\family typewriter
inc(int
\begin_inset space ~
\end_inset

hours,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

minutes,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

seconds)
\family default
 Increments or decrements the fields below.
 Note that this method does NOT update the day/month/year fields.
 The parameters can be positive (to increment), zero (to keep it), or negative
 (to decrement).
 
\end_layout

\end_deeper
\begin_layout Section
CharacterConvert
\end_layout

\begin_layout Standard
This class is used to correctly handle international character conversions.
 The default character scheme converter is the 8859-1 (ISO Latin 1).
 If you want to use a different one, you must extend this class, implementing
 the 
\family typewriter
bytes2chars()
\family default
 and 
\family typewriter
chars2bytes()
\family default
 methods, and then assign the public member of 
\family typewriter
Convert.charConverter
\family default
 to use your class instead of this default one.
 You can also use the method 
\family typewriter
Convert.setDefaultConverter()
\family default
 to change it, passing, as parameter, the prefix of your 
\family typewriter
CharacterConverter
\family default
 class (better look at the implementation to know what to pass on).
 For example, if you created a class named 
\family typewriter
Iso88592CharacterConverter
\family default
, call 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Convert.setDefaultConverter("Iso88592"); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To find out which 
\family typewriter
sun.io.CharacterEncoder
\family default
 you're using on JDK to implement an equivalent version for TotalCross,
 use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

System.out.println("" + sun.io.ByteToCharConverter.getDefault());
\end_layout

\end_inset


\end_layout

\begin_layout Section
UTF8CharacterConvert
\end_layout

\begin_layout Standard
This class extends the 
\family typewriter
CharacterConvert
\family default
 class, and implements the UTF8 byte to UCS-2 character conversion.
 To use this class, you can call:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Convert.setDefaultConverter("UTF8");
\end_layout

\end_inset


\end_layout

\begin_layout Section
Convert
\end_layout

\begin_layout Standard

\family typewriter
Convert
\family default
 basically provides methods that allows object and basic type conversion.
 Furthermore, it also provides handy methods for common operations that
 should be used for a better performance.
\end_layout

\begin_layout Standard
This class is final and cannot be instantiated – its methods and fields
 are static.
\end_layout

\begin_layout Standard
To give you a better view of this class, its documentation was split into
 sub-sections:
\end_layout

\begin_layout Subsection
Changing the default character converter
\end_layout

\begin_layout Standard
The field 
\family typewriter
charConverter
\family default
 keeps a reference to a character converter that will be used by default.
 You may change it by setting another character converter of your choice.
\end_layout

\begin_layout Standard
You may also use the method 
\family typewriter
setDefaultConverter(String name)
\family default
, which searches for a character converter by its name, and makes it the
 default by changing the 
\family typewriter
charConverter
\family default
 field.
 Use like 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Convert.setDefaultConverter("UTF8");
\end_layout

\end_inset

to change all bytes_to_char and char_to_bytes operations to use UTF8 instead.
 Issuing 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Convert.setDefaultConverter("");
\end_layout

\end_inset

sets back the default encoder.
 The method returns 
\family typewriter
true
\family default
 if the given encoder was found; 
\family typewriter
false
\family default
, otherwise.
 If not found, the encoder is reseted to the default one (ISO 8859-1).
 
\end_layout

\begin_layout Subsection
Conversion between String and basic types
\end_layout

\begin_layout Itemize

\family typewriter
toDouble(String
\begin_inset space ~
\end_inset

s)
\family default
 Converts the given string to 
\family typewriter
double
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
toInt(String
\begin_inset space ~
\end_inset

s)
\family default
 Converts the given string to 
\family typewriter
int
\family default
.
 The number may be prefixed with 0's.
 
\end_layout

\begin_layout Itemize

\family typewriter
toShort(String
\begin_inset space ~
\end_inset

s)
\family default
 Convert a string to the 
\family typewriter
short
\family default
 type.
 Note that this method is slower than 
\family typewriter
(short)Convert.toInt()
\family default
.
 However, it will throw an 
\family typewriter
InvalidNumberException
\family default
 if the number is out of the 
\family typewriter
short
\family default
 range.
\end_layout

\begin_layout Itemize

\family typewriter
toLong(String
\begin_inset space ~
\end_inset

s)
\family default
 Converts the given string to 
\family typewriter
long
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
toLong(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix)
\family default
 Converts the given string to 
\family typewriter
long
\family default
 in the given radix, which must be between 2 and 16.
\end_layout

\begin_layout Itemize

\family typewriter
toString(boolean
\begin_inset space ~
\end_inset

b)
\family default
 Converts the given boolean to a string.
\end_layout

\begin_layout Itemize

\family typewriter
toString(char
\begin_inset space ~
\end_inset

c)
\family default
 Converts the given 
\family typewriter
char
\family default
 to a string.
\end_layout

\begin_layout Itemize

\family typewriter
toString(double
\begin_inset space ~
\end_inset

d)
\family default
 Converts the given 
\family typewriter
double
\family default
 to a string, formatted in scientific notation.
\end_layout

\begin_layout Itemize

\family typewriter
toString(double
\begin_inset space ~
\end_inset

val,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

decimalCount)
\family default
 Converts the given 
\family typewriter
double
\family default
 to a string, formatted with the given number of decimal places.
\end_layout

\begin_layout Itemize

\family typewriter
toString(int
\begin_inset space ~
\end_inset

i)
\family default
 Converts the given 
\family typewriter
int
\family default
 to a string.
\end_layout

\begin_layout Itemize

\family typewriter
toString(long
\begin_inset space ~
\end_inset

l)
\family default
 Converts the given 
\family typewriter
long
\family default
 to a string using base 10.
\end_layout

\begin_layout Itemize

\family typewriter
toString(long
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix)
\family default
 Converts the given 
\family typewriter
long
\family default
 to a string in the given radix, which must be between 2 and 16.
\end_layout

\begin_layout Itemize

\family typewriter
toString(String
\begin_inset space ~
\end_inset

doubleValue,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

n)
\family default
 Formats the given string as a 
\family typewriter
double
\family default
, rounding with 
\family typewriter
n
\family default
 decimal places.
\end_layout

\begin_layout Itemize

\family typewriter
unsigned2hex(int
\begin_inset space ~
\end_inset

b,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

places)
\family default
 Converts the given unsigned integer to hexadecimal using the given number
 of places (up to 8).
\end_layout

\begin_layout Subsection
Character, String and StringBuffer utilities
\end_layout

\begin_layout Itemize

\family typewriter
appendPath(String
\begin_inset space ~
\end_inset

path1,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

path2)
\family default
 Concatenates two strings, ensuring
\begin_inset Newline newline
\end_inset

there's a single slash between them.
 Removes extra slashes or backslashes if necessary.
\end_layout

\begin_layout Itemize

\family typewriter
digitOf(char
\begin_inset space ~
\end_inset

ch,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix)
\family default
 Returns the value of the digit stored as 
\family typewriter
char
\family default
 in the specified radix, which must be between 2 and 16.
 This method only handles the standard ASCII table.
\end_layout

\begin_layout Itemize

\family typewriter
dup(char
\begin_inset space ~
\end_inset

c,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count)
\family default
 Returns a string filled with the given 
\family typewriter
char
\family default
 and size equals to 
\family typewriter
count
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
forDigit(int
\begin_inset space ~
\end_inset

digit,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

radix)
\family default
 Returns the given digit in the specified radix, which must be between 2
 and 16.
\end_layout

\begin_layout Itemize

\family typewriter
getBreakPos(FontMetrics
\begin_inset space ~
\end_inset

fm,StringBuffer
\begin_inset space ~
\end_inset

sb,int
\begin_inset space ~
\end_inset

start,
\begin_inset Newline newline
\end_inset

int
\begin_inset space ~
\end_inset

width,boolean
\begin_inset space ~
\end_inset

doWordWrap)
\family default
 Finds the best position to break the line with the given width, respecting
 word-wrap option and line endings (
\family typewriter

\backslash
n
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
hashCode(StringBuffer
\begin_inset space ~
\end_inset

sb)
\family default
 Returns the hash code of the string stored by this
\family typewriter

\begin_inset Newline newline
\end_inset

StringBuffer
\family default
.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The class 
\family typewriter
StringBuffer
\family default
 does not have a method that returns its hash code, so you would have to
 first create a 
\family typewriter
String
\family default
 from the 
\family typewriter
StringBuffer
\family default
 to get its hash code, like this:
\end_layout

\begin_layout Plain Layout

\family typewriter
int hashCode = sb.toString.hashCode();
\end_layout

\begin_layout Plain Layout

\family typewriter
Convert.hashCode()
\family default
 calculates the
\family typewriter
 StringBuffer
\family default
's hash code directly, without using an intermediary 
\family typewriter
String
\family default
 object, resulting in better performance and memory usage.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
insertAt(StringBuffer
\begin_inset space ~
\end_inset

sb,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

pos,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

c)
\family default
 Inserts the given 
\family typewriter
char
\family default
 at the specified position in the 
\family typewriter
StringBuffer
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
insertLineBreak(int
\begin_inset space ~
\end_inset

maxWidth,
\begin_inset space ~
\end_inset

FontMetrics
\begin_inset space ~
\end_inset

fm,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

text)
\family default
 Returns a new string which is a copy of the given text with line breaks,
 placed based on the 
\family typewriter
maxWidth
\family default
 and 
\family typewriter
fm
\family default
 arguments.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Very useful method to help you keep your application's interface cross-platform.
 It can be used to insert line breaks on strings passed to message boxes
 or list boxes.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
numberOf(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

c)
\family default
 Returns the number of occurrences of the specified 
\family typewriter
char
\family default
 in the given string.
\end_layout

\begin_layout Itemize

\family typewriter
replace(String
\begin_inset space ~
\end_inset

source,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

from,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

to)
\family default
 Searches the string source for occurrences of the string 
\family typewriter
from
\family default
, replacing them by the string 
\family typewriter
to
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
tokenizeString(String
\begin_inset space ~
\end_inset

input,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

delim)
\family default
 Tokenizes the given string using the given char as separator.
 The return is a string array with size equal to the number of tokens.
\end_layout

\begin_layout Itemize

\family typewriter
tokenizeString(String
\begin_inset space ~
\end_inset

input,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

delim)
\family default
 Same as the above, but uses a 
\family typewriter
String
\family default
 instead of a 
\family typewriter
char
\family default
 as separator.
\begin_inset Newline newline
\end_inset


\family typewriter

\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Never use this method with 1 character length strings, like:
\end_layout

\begin_layout Plain Layout

\family typewriter
String[] tokens = Convert.tokenizeString(input, 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

);
\end_layout

\begin_layout Plain Layout
Use the previous method instead for better performance:
\end_layout

\begin_layout Plain Layout

\family typewriter
String[] tokens = Convert.tokenizeString(input, '#');
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
toLowerCase(char
\begin_inset space ~
\end_inset

c)
\family default
 Converts the given 
\family typewriter
char
\family default
 to lower case.
\end_layout

\begin_layout Itemize

\family typewriter
toUpperCase(char
\begin_inset space ~
\end_inset

c)
\family default
 Converts the given 
\family typewriter
char
\family default
 to upper case.
\end_layout

\begin_layout Itemize

\family typewriter
zeroPad(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

size)
\family default
 Pads the string, adding zeros at left.
\end_layout

\begin_layout Itemize

\family typewriter
zeroUnpad(String
\begin_inset space ~
\end_inset

s)
\family default
 Removes left zeros of the string.
\end_layout

\begin_layout Subsection
Arrays
\end_layout

\begin_layout Itemize

\family typewriter
cloneStringArray(String[]
\begin_inset space ~
\end_inset

strs)
\family default
 Returns a copy of the given string array.
\end_layout

\begin_layout Itemize

\family typewriter
toStringArray(Object[]
\begin_inset space ~
\end_inset

objs)
\family default
 Converts the given object array into a string array, by calling 
\family typewriter
toString()
\family default
 for each object.
\end_layout

\begin_layout Itemize

\family typewriter
detectSortType(Object
\begin_inset space ~
\end_inset

item)
\family default
 Returns the sort type for the given item sample (which is usually the first
 item of an array).
\end_layout

\begin_layout Standard
Convert provides the quick sort algorithm for array sorting.
\end_layout

\begin_layout Subsubsection*
Constants
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_AUTODETECT
\family default
 Chooses between one of the sort types below based on the first element
 of the array.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_OBJECT
\family default
 The objects are compared by their string representation.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_STRING
\family default
 The array contains 
\family typewriter
String
\family default
 objects, and the sort is case sensitive.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_INT
\family default
 The array contains 
\family typewriter
String
\family default
 objects that represents integer values.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_DOUBLE
\family default
 The array contains 
\family typewriter
String
\family default
 objects that represents double values.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_DATE
\family default
 The array contains 
\family typewriter
String
\family default
 objects that represents a 
\family typewriter
Date
\family default
 object with day, month, and year.
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_COMPARABLE
\family default
 The array contains comparable objects (objects that implements the 
\family typewriter

\begin_inset Newline newline
\end_inset

Comparable
\family default
 interface).
\end_layout

\begin_layout Labeling
\labelwidthstring SORT.STRING.NOCASE00

\family typewriter
SORT_STRING_NOCASE
\family default
 The array contains 
\family typewriter
String
\family default
 objects, and the sort is case insensitive, which is slower than case sensitive
 sorting.
\end_layout

\begin_layout Subsubsection*
Methods
\end_layout

\begin_layout Itemize

\family typewriter
qsort(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

first,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

last)
\family default
 Applies the quick sort algorithm to the elements of the given array, sorting
 in ascending order and sort type equals to 
\family typewriter

\begin_inset Newline newline
\end_inset

SORT_AUTODETECT
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
qsort(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

first,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

last,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sortType)
\family default
 Same as the above method, but you can specify the sort type.
\end_layout

\begin_layout Itemize

\family typewriter
qsort(Object[]
\begin_inset space ~
\end_inset

items,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

first,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

last,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sortType,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

ascending)
\family default
 Same as the above, but you can also choose between sorting in ascending
 or descending order.
\end_layout

\begin_layout Subsection
Other Conversions and Methods
\end_layout

\begin_layout Itemize

\family typewriter
chars2int(String
\begin_inset space ~
\end_inset

fourChars)
\family default
 Converts a creator id or type to 
\family typewriter
int
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
int2chars(int
\begin_inset space ~
\end_inset

i)
\family default
 Converts an 
\family typewriter
int
\family default
 to a creator id or type.
\end_layout

\begin_layout Itemize

\family typewriter
doubleToIntBits(double
\begin_inset space ~
\end_inset

f)
\family default
 Converts the given double to its bit representation in IEEE 754 format,
 using 4 bytes instead of 8 (a conversion to 
\family typewriter
float
\family default
 is applied).
\end_layout

\begin_layout Itemize

\family typewriter
intBitsToDouble(int
\begin_inset space ~
\end_inset

i)
\family default
 Converts the given IEEE 754 bit representation of a 
\family typewriter
float
\family default
 to a 
\family typewriter
double
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
doubleToLongBits(double
\begin_inset space ~
\end_inset

value)
\family default
 Returns a representation of the specified floating-point value according
 to the IEEE 754 floating-point "double format" bit layout.
 
\end_layout

\begin_layout Itemize

\family typewriter
longBitsToDouble(long
\begin_inset space ~
\end_inset

bits)
\family default
 Converts the given bit representation to a 
\family typewriter
double
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
rol(long
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

n,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

bits)
\family default
 Does a 
\family typewriter
rol
\family default
 of 
\family typewriter
n
\family default
 bits in the given 
\family typewriter
long
\family default
.
 
\family typewriter
n
\family default
 must be 
\family typewriter
< bits
\family default
.
 Unlike the shift left operator (
\family typewriter
<<
\family default
), bits that would have been lost are reinserted in order at the right.
\end_layout

\begin_layout Itemize

\family typewriter
ror(long
\begin_inset space ~
\end_inset

i,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

n,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

bits)
\family default
 Does a 
\family typewriter
ror
\family default
 of 
\family typewriter
n
\family default
 bits in the given 
\family typewriter
long
\family default
.
 
\family typewriter
n
\family default
 must be 
\family typewriter
< bits
\family default
.
 Unlike the shift right operator (
\family typewriter
>>
\family default
), bits that would have been lost are reinserted in order at the left.
\end_layout

\begin_layout Subsection
Another Useful Constants
\end_layout

\begin_layout Itemize

\family typewriter
CRLF
\family default
 Equals to 
\family typewriter

\backslash
r
\backslash
n
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
CRLF_BYTES
\family default
 Equals to 
\family typewriter
{'
\backslash
r','
\backslash
n'}
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
MAX_SHORT_VALUE
\family default
 The maximum short value: 32767.
\end_layout

\begin_layout Itemize

\family typewriter
MIN_SHORT_VALUE
\family default
 The minimum short value: -32768.
\end_layout

\begin_layout Itemize

\family typewriter
MIN_INT_VALUE
\family default
 The minimum int value: -2147483648.
\end_layout

\begin_layout Itemize

\family typewriter
MAX_INT_VALUE
\family default
 The maximum int value: 2147483647.
\end_layout

\begin_layout Itemize

\family typewriter
MIN_LONG_VALUE
\family default
 The minimum long value: -9223372036854775808.
\end_layout

\begin_layout Itemize

\family typewriter
MAX_LONG_VALUE
\family default
 The maximum long value: 9223372036854775807.
\end_layout

\begin_layout Itemize

\family typewriter
MAX_DOUBLE_VALUE
\family default
 The maximum double value: 9.007199254740992E15.
\end_layout

\begin_layout Itemize

\family typewriter
MIN_DOUBLE_VALUE
\family default
 The minimum double value: 1.1102230246251565E-16.
\end_layout

\begin_layout Itemize

\family typewriter
MAX_DOUBLE_DIGITS
\family default
 The maximum number of digits in a double value, used when formatting to
 string.
\end_layout

\begin_layout Itemize

\family typewriter
DOUBLE_POSITIVE_INFINITY_VALUE
\family default
 The 
\family typewriter
double
\family default
 that represents a positive infinity.
\end_layout

\begin_layout Itemize

\family typewriter
DOUBLE_NEGATIVE_INFINITY_VALUE
\family default
 The 
\family typewriter
double
\family default
 that represents a negative infinity.
\end_layout

\begin_layout Itemize

\family typewriter
DOUBLE_POSITIVE_INFINITY_BITS
\family default
 The 
\family typewriter
long
\family default
 whose bits represent a positive infinity.
\end_layout

\begin_layout Itemize

\family typewriter
DOUBLE_NEGATIVE_INFINITY_BITS
\family default
 The 
\family typewriter
long
\family default
 whose bits represent a negative infinity.
\end_layout

\begin_layout Itemize

\family typewriter
DOUBLE_NAN_BITS
\family default
 The 
\family typewriter
long
\family default
 whose bits represent a Not a Number (
\family typewriter
NaN
\family default
).
 
\end_layout

\begin_layout Section
Settings
\end_layout

\begin_layout Standard
This class provides some preferences from the device configuration and other
 VM settings.
 All settings are read-only, unless otherwise specified.
 Changing their values may cause the VM to crash.
 Look at its JavaDoc for more details.
\end_layout

\begin_layout Itemize
 
\end_layout

\begin_layout Section
Vm
\end_layout

\begin_layout Standard

\family typewriter
Vm
\family default
 contains various system-level methods.
 This class contains methods to copy arrays, obtain a timestamp, sleep,
 and get platform and version information, among many other things.
 Look at its JavaDoc for more details.
\end_layout

\begin_layout Part
INPUT & OUTPUT
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
The purpose of this part is to teach you how to use the classes in the 
\family typewriter
totalcross.io
\family default
 package.
 The classes that will be covered in this tutorial are outlined below:
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.Stream
\family default
: is the main class of all classes inside the 
\family typewriter
totalcross.io
\family default
 package.
 It can be viewed as a generic stream where data can flow in and out of
 the device.
 All classes inside package 
\family typewriter
totalcross.io
\family default
 extend this class, and most classes receive a 
\family typewriter
totalcross.io.Stream
\family default
 in their constructor parameter.
 This allows you to combine different streams to meet your needs.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.DataStream
\family default
 (and 
\family typewriter
DataStreamLE
\family default
): used to read/write primitive types and strings in Big Endian (default)
 or Little Endian format.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.BufferedStream
\family default
: offers a faster way to read and write data from streams in a buffered
 manner.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.ByteArrayStream
\family default
: a resizable buffer that can be used to feed data to a stream or to store
 data coming from a stream.
 It can be used to emulate a virtual stream.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.CompressedByteArrayStream
\family default
: creates a compressed byte array stream, saving memory when reading and
 writting huge amount of data.
 
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.RandomAccessStream
\family default
: represents a stream that behaves like a large array of bytes and may be
 randomly accessed.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.CRC32Stream
\family default
: computes CRC32 data checksum of a stream.
 
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.Connector
\family default
: used to open socket connections over CRADLE, WIFI, MDS, GPRS.
 
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.StreamConnectionNotifier
\family default
: base class for connection notifiers.
 
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.device.PortConnector
\family default
: used to send and receive bytes via Serial Cradle, USB, IrComm, and Bluetooth.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.File
\family default
: used to create files and manage directories.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.LineReader
\family default
: used to read lines ending with 
\family typewriter

\backslash
r
\backslash
n
\family default
 (enter/linefeed) or 
\family typewriter

\backslash
n
\family default
 (linefeed) from a stream.
 
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.TokenReader
\family default
: Used to read an array of tokens in a line ending with 
\family typewriter

\backslash
r
\backslash
n
\family default
 (enter/linefeed) from a stream.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.device.gps.GPS 
\family default
retrieves GPS coordinates.
\end_layout

\begin_layout Enumerate

\family typewriter
totalcross.io.device.RadioDevice
\family default
 provides access to the device's radios and information about their status.
\end_layout

\begin_layout Standard
The classes related to PDB files (
\family typewriter
PDBFile
\family default
, 
\family typewriter
ObjectPDBFile
\family default
, 
\family typewriter
PDBStream
\family default
, 
\family typewriter
ResizeRecord
\family default
, 
\family typewriter
RemotePDBFile
\family default
, and 
\family typewriter
RemotePDBRecord
\family default
) are ommited because they are inefficient on all platforms.
 Unless you use a legacy TotalCross program, don't use PDB files.
\end_layout

\begin_layout Chapter
Stream
\end_layout

\begin_layout Standard

\family typewriter
Stream
\family default
 is an abstract class that serves as the base class for all classes that
 handles I/O operations.
 It defines the interface and the basic behavior that all its subclasses
 must implement.
\end_layout

\begin_layout Itemize

\family typewriter
close()
\family default
 Closes this stream, releasing any resources associated to it.
 Once closed a connection is no longer valid.
 
\end_layout

\begin_layout Itemize

\family typewriter
readBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count)
\family default
 Tries to read 
\family typewriter
count
\family default
 bytes from this stream to the given byte array 
\family typewriter
buf
\family default
, beginning from the position 
\family typewriter
start
\family default
.
 Returns the number of bytes actually read.
\end_layout

\begin_layout Itemize

\family typewriter
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count)
\family default
 Tries to write 
\family typewriter
count
\family default
 bytes to this stream from the given byte array 
\family typewriter
buf
\family default
, beginning from the position 
\family typewriter
start
\family default
.
 Returns the number of bytes actually written.
\end_layout

\begin_layout Standard
These three methods may throw an 
\family typewriter
IOException
\family default
, which usually means that something out of our control went wrong, preventing
 the method to be executed.
\end_layout

\begin_layout Standard

\family typewriter
Stream
\family default
 subclasses usually throw more exceptions that extends 
\family typewriter
IOException
\family default
 to denote more specific problems and allow you to properly handle the situation
, like 
\family typewriter
FileNotFoundException
\family default
.
\end_layout

\begin_layout Standard

\family typewriter
Streams
\family default
 subclasses can be divided into two main groups:
\end_layout

\begin_layout Itemize
Classes that actually perform I/O operations, like 
\family typewriter
File
\family default
 or 
\family typewriter
Socket
\family default
.
\end_layout

\begin_layout Itemize
Classes that wrap a stream, providing features or operations that can be
 applied to any other stream, like 
\family typewriter
DataStream
\family default
 or 
\family typewriter
BufferedStream
\family default
.
\end_layout

\begin_layout Standard
We'll first look into this last group, which provides easier and more efficient
 ways of reading and writing data.
\end_layout

\begin_layout Standard
You should always chech the return of the methods to see if the written
 or read number of bytes are the expected one.
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.Stream
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
DataStream/DataStreamLE
\end_layout

\begin_layout Standard

\family typewriter
DataStream
\family default
 is a wrapper that you can place around any stream such as a 
\family typewriter
File
\family default
, 
\family typewriter
Socket
\family default
, or 
\family typewriter
ByteArrayStream
\family default
, which allows you to read and write TotalCross' primitive data types and
 objects, like 
\family typewriter
int
\family default
s, 
\family typewriter
long
\family default
s, 
\family typewriter
double
\family default
s, and 
\family typewriter
String
\family default
s, in a simple and standard way.
 
\end_layout

\begin_layout Standard
Although TotalCross internally uses the little endian format, the 
\family typewriter
DataStream
\family default
 class uses the big endian format - the standard Java format.
 To read and write using the little endian format, you must use the 
\family typewriter
DataStreamLE
\family default
 class instead.
\end_layout

\begin_layout Standard
Here is a sample:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PortConnector port = new PortConnector(9600, 0);
\end_layout

\begin_layout Plain Layout

DataStream ds = new DataStream(port);
\end_layout

\begin_layout Plain Layout

ds.writeString("Hello");
\end_layout

\begin_layout Plain Layout

int status = ds.readUnsignedByte();
\end_layout

\begin_layout Plain Layout

if (status == 1)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ds.writeString("Pi");
\end_layout

\begin_layout Plain Layout

	ds.writeDouble(3.14);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

port.close();   
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
DataStream
\family default
 has two constructors:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
DataStream(Stream
\begin_inset space ~
\end_inset

stream)
\family default
 Creates a data stream which wraps the given stream.
\end_layout

\begin_layout Itemize

\family typewriter
DataStream(Stream
\begin_inset space ~
\end_inset

stream,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

ensureWrite
\family default
) The same as above but if the second parameter is 
\family typewriter
true
\family default
, write operations are blocked until all the requested data is written to
 the underlying stream.
 
\end_layout

\end_deeper
\begin_layout Standard
Handling primitive data types:
\end_layout

\begin_layout Itemize

\family typewriter
byte
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readByte()
\family default
 Reads a 
\family typewriter
byte
\family default
.
 The returned value will range from -128 to 127.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeByte(byte
\begin_inset space ~
\end_inset

by)
\family default
 Writes a 
\family typewriter
byte
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
readUnsignedByte()
\family default
 Reads an unsigned 
\family typewriter
byte
\family default
, returning its value as an 
\family typewriter
int
\family default
.
 The returned value will range from 0 to 255.
 Use 
\family typewriter
writeByte()
\family default
 to write the unsigned byte.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeByte(int
\begin_inset space ~
\end_inset

by)
\family default
 Writes an unsigned 
\family typewriter
byte
\family default
, which is the first byte from the given 
\family typewriter
int
\family default
, whose value must be between 0 and 255.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
boolean
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readBoolean()
\family default
 Reads a byte as a 
\family typewriter
boolean
\family default
.
 
\family typewriter
true
\family default
 is returned if the byte is not zero; 
\family typewriter
false
\family default
, otherwise.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeBoolean(boolean
\begin_inset space ~
\end_inset

bool)
\family default
 Writes a 
\family typewriter
boolean
\family default
 as a byte.
 
\family typewriter
true
\family default
 values are written as 1 and 
\family typewriter
false
\family default
 values as 0.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
char
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readChar()
\family default
 Reads two bytes as a 
\family typewriter
char
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeChar(char
\begin_inset space ~
\end_inset

c)
\family default
 Writes a 
\family typewriter
char
\family default
 as two bytes.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
short
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readShort()
\family default
 Reads two bytes as a 
\family typewriter
short
\family default
.
 The returned value will range from -32768 to 32767.
\end_layout

\begin_layout Itemize

\family typewriter
readUnsignedShort()
\family default
 Reads two bytes as an unsigned 
\family typewriter
short
\family default
, returning its value as an 
\family typewriter
int
\family default
.
 The returned value will range from 0 to 65535.
 Use
\family typewriter
 writeShort()
\family default
 to write the unsigned 
\family typewriter
short
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeShort(int
\begin_inset space ~
\end_inset

i)
\family default
 Writes a 
\family typewriter
short
\family default
 as two bytes.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
There's only one method to write a 
\family typewriter
short
\family default
, which receives an integer.
 It may be used to write signed and unsigned 
\family typewriter
short
\family default
s.
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
int
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readInt()
\family default
 Reads four bytes as an 
\family typewriter
int
\family default
.
 The returned value will range from -2147483648 to 2147483647.
 
\end_layout

\begin_layout Itemize

\family typewriter
readUnsignedInt()
\family default
 Reads four bytes as an unsigned 
\family typewriter
int
\family default
, returning its value as a 
\family typewriter
long
\family default
.
 The returned value will range from 0 to 4294967295.
 
\family typewriter
Use writeLong()
\family default
 to write the unsigned 
\family typewriter
int
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeInt(int
\begin_inset space ~
\end_inset

i)
\family default
 Writes an 
\family typewriter
int
\family default
 as four bytes.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
long
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readLong()
\family default
 Reads eight bytes as a 
\family typewriter
long
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeLong(long
\begin_inset space ~
\end_inset

l)
\family default
 Writes a 
\family typewriter
long
\family default
 as eight bytes.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
float
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readFloat()
\family default
 Reads four bytes as a 
\family typewriter
float
\family default
 in IEEE 754 format, returning its value as a 
\family typewriter
double
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeFloat(double
\begin_inset space ~
\end_inset

f)
\family default
 Writes a 
\family typewriter
float
\family default
 as four bytes in IEEE 754 format.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
double
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
readDouble()
\family default
 Reads eight bytes as a 
\family typewriter
double
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeDouble(double
\begin_inset space ~
\end_inset

d)
\family default
 Writes a 
\family typewriter
double
\family default
 as eight bytes.
\end_layout

\end_deeper
\begin_layout Standard
Handling 
\family typewriter
char
\family default
 arrays:
\end_layout

\begin_layout Itemize

\family typewriter
readChars()
\family default
 Reads an array of 
\family typewriter
char
\family default
s, where its length is stored in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65,535 characters).
\end_layout

\begin_layout Itemize

\family typewriter
readChars(int
\begin_inset space ~
\end_inset

len)
\family default
 Reads an array of 
\family typewriter
char
\family default
s with the given length.
\end_layout

\begin_layout Itemize

\family typewriter
readChars(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len)
\family default
 Reads an array of 
\family typewriter
char
\family default
s with the given length to the given array of 
\family typewriter
char
\family default
s.
\end_layout

\begin_layout Itemize

\family typewriter
readChars(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count)
\family default
 Reads 
\family typewriter
count
\family default
 
\family typewriter
char
\family default
s from the stream to the given array of 
\family typewriter
char
\family default
s, starting from index 
\family typewriter
start
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeChars(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len)
\family default
 Writes an array of 
\family typewriter
char
\family default
s, placing its length in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65535 characters), where 
\family typewriter
start
\family default
 is the start index of the array and 
\family typewriter
len
\family default
 is the length to be written or -1 if it is to write the whole 
\family typewriter
char
\family default
 array.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeChars(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

lenSize)
\family default
 Writes the given 
\family typewriter
char
\family default
 array, writting the length as an 
\family typewriter
int
\family default
,
\family typewriter
 
\family default
as a 
\family typewriter
short
\family default
, as a byte, or don't writting the length, depending on the number of bytes
 given (4,2,1,0).
 If the size to be written is greater than a non-zero 
\family typewriter
lenSize
\family default
, an 
\family typewriter
IOException
\family default
 will be thrown.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeChars(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len)
\family default
 Writes the string as a 
\family typewriter
char
\family default
 array.
 The characters are read using the 
\family typewriter
charAt()
\family default
 method from the 
\family typewriter
String
\family default
 class.
 This method is slower on all devices.
 The 
\family typewriter
char
\family default
 array size is limited to 65535 characters.
 
\end_layout

\begin_layout Itemize

\family typewriter
readBigChars()
\family default
 Reads an array of 
\family typewriter
char
\family default
s, where its length is stored in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2147483647 characters).
\end_layout

\begin_layout Itemize

\family typewriter
writeBigChars(char[]
\begin_inset space ~
\end_inset

chars,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len)
\family default
 Writes an array of 
\family typewriter
char
\family default
s, placing its length in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2147483647 characters), where 
\family typewriter
start
\family default
 is the start index of the array and 
\family typewriter
len
\family default
 is the length to be written or -1 if it is to write the whole 
\family typewriter
char
\family default
 array.
\end_layout

\begin_layout Standard
Handling 
\family typewriter
String
\family default
s:
\end_layout

\begin_layout Itemize

\family typewriter
readString()
\family default
 Reads a 
\family typewriter
String
\family default
, where its length is stored in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65535 characters).
 If the length is zero, an empty string is returned.
 
\family typewriter
null
\family default
 is never returned.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeString(String
\begin_inset space ~
\end_inset

s)
\family default
 Writes a 
\family typewriter
String
\family default
, placing its length in the first two bytes as an unsigned 
\family typewriter
short
\family default
 (limited to 65535 characters).
\end_layout

\begin_layout Itemize

\family typewriter
readBigString()
\family default
 Reads a 
\family typewriter
String
\family default
, where its length is stored in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2147483647 characters).
 If the length is zero, an empty string is returned.
 
\family typewriter
null
\family default
 is never returned.
\end_layout

\begin_layout Itemize

\family typewriter
writeBigString(String
\begin_inset space ~
\end_inset

s)
\family default
 Writes a 
\family typewriter
String
\family default
, placing its length in the first four bytes as an 
\family typewriter
int
\family default
 (limited to +2147483647 characters).
\end_layout

\begin_layout Itemize

\family typewriter
readCString()
\family default
 Reads a C-style (null terminated) string (no implicit limit).
 This format is commonly used by other applications.
 Note that if you're creating your own stream, choose 
\family typewriter
readString()
\family default
 instead of 
\family typewriter
readCString()
\family default
, because 
\family typewriter
readCString()
\family default
 is MUCH slower.
 Also, this method does not handle correctly unicode characters.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeCString(String
\begin_inset space ~
\end_inset

s)
\family default
 Writes a C-style (null terminated) string.
 (no implicit limit).
 This means that all the characters of the string are written out, followed
 by a 
\family typewriter
NULL
\family default
 (0) character.
 This format is commonly used by other applications.
\end_layout

\begin_layout Standard
Handling ASCII strings:
\end_layout

\begin_layout Standard
These methods are used to read and write strings comprised of only ASCII
 
\family typewriter
char
\family default
s – each character is cast from/to byte, and requires 1 byte instead of
 2 bytes.
 Make sure your strings have only characters between the ASCII range (0-255),
 because characters outside this range will not be properly handled.
\end_layout

\begin_layout Itemize

\family typewriter
readSmallString()
\family default
 Reads a small string, where its length is stored in the first byte as an
 unsigned byte (limited to 255 characters).
 If the length is zero, an empty string is returned.
 
\family typewriter
null
\family default
 is never returned.
\end_layout

\begin_layout Itemize

\family typewriter
writeSmallString(String
\begin_inset space ~
\end_inset

s)
\family default
 Writes a small string, placing its length in the first byte as an unsigned
 byte (limited to 255 characters).
\end_layout

\begin_layout Itemize

\family typewriter
writeSmallString8(String
\begin_inset space ~
\end_inset

s)
\family default
 Writes a small string taking each character as a byte.
 To read it, use 
\family typewriter
readString()
\family default
.
 The maximum allowed length is 65536.
 
\end_layout

\begin_layout Itemize

\family typewriter
readFixedString(int
\begin_inset space ~
\end_inset

length)
\family default
 Reads a fixed length string from the stream.
 The given number of characters are read and converted to a string.
\end_layout

\begin_layout Itemize

\family typewriter
writeFixedString(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

length)
\family default
 Writes a fixed length string to the
\begin_inset Newline newline
\end_inset

stream.
 If the given string is longer than the given length, it will be truncated
 and if it is shorter, it will be padded with spaces.
 
\end_layout

\begin_layout Itemize

\family typewriter
writeFixedString(String
\begin_inset space ~
\end_inset

s,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

length,
\begin_inset space ~
\end_inset

char
\begin_inset space ~
\end_inset

pad)
\family default
 Writes a fixed length
\begin_inset Newline newline
\end_inset

string to the stream.
 If the given string is longer than the given length, it will be truncated
 and if it is shorter, it will be padded the given pad character.
 
\end_layout

\begin_layout Standard
Handling 
\family typewriter
String
\family default
 arrays:
\end_layout

\begin_layout Standard
The methods below may be used to handle 
\family typewriter
String
\family default
 arrays, and both should be used together.
 This is because the size of the array is stored in the first two bytes
 as an unsigned 
\family typewriter
short
\family default
, before the very first 
\family typewriter
String
\family default
 (e.g.
 if you write several strings with 
\family typewriter
writeString()
\family default
, you cannot use 
\family typewriter
readStringArray()
\family default
 to read them, and vice-versa).
\end_layout

\begin_layout Standard
It's important to notice these methods handle 
\family typewriter
Strings
\family default
 like the 
\family typewriter
readString()
\family default
 and 
\family typewriter

\begin_inset Newline newline
\end_inset

writeString()
\family default
 methods, so the current character encoding will be used and their length
 stored as an unsigned 
\family typewriter
short
\family default
, therefore, the 
\family typewriter
String
\family default
 array cannot contain a 
\family typewriter
String
\family default
 with more than 65,535 characters.
\end_layout

\begin_layout Itemize

\family typewriter
readStringArray()
\family default
 Reads an array of 
\family typewriter
String
\family default
s, where its size is stored in the first two bytes as an unsigned 
\family typewriter
short
\family default
.
 If the length is zero, an empty array is returned.
 
\family typewriter
null
\family default
 is never returned.
 
\end_layout

\begin_layout Itemize

\family typewriter
readStringArray(int
\begin_inset space ~
\end_inset

size)
\family default
 Reads an array of 
\family typewriter
String
\family default
s, where its size is given as a parameter.
 If the length is zero, an empty array is returned.
 
\family typewriter
null
\family default
 is never returned.
\end_layout

\begin_layout Itemize

\family typewriter
writeStringArray(String[]
\begin_inset space ~
\end_inset

v)
\family default
 Writes an array of 
\family typewriter
String
\family default
s, placing its size in the first two bytes as an unsigned 
\family typewriter
short
\family default
.
\end_layout

\begin_layout Standard
Handling 
\family typewriter
Object
\family default
s (
\family typewriter
Storable
\family default
):
\end_layout

\begin_layout Standard

\family typewriter
Object
\family default
s that implements the interface 
\family typewriter
Storable
\family default
 may have its internal state persisted or retrieved directly using the following
 methods:
\end_layout

\begin_layout Itemize

\family typewriter
readObject()
\family default
 Reads an 
\family typewriter
Object
\family default
 which implements the 
\family typewriter
Storable
\family default
 interface and was written using 
\family typewriter
writeObject()
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeObject(Storable
\begin_inset space ~
\end_inset

s)
\family default
 Writes a 
\family typewriter
Storable
\family default
 
\family typewriter
Object
\family default
.
\end_layout

\begin_layout Standard
Utility methods:
\end_layout

\begin_layout Itemize

\family typewriter
getStream()
\family default
 Returns the stream attached to this 
\family typewriter
DataStream
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
pad(int
\begin_inset space ~
\end_inset

n)
\family default
 Pads the stream writing 
\family typewriter
n
\family default
 bytes with value 0.
\end_layout

\begin_layout Itemize

\family typewriter
skip(int
\begin_inset space ~
\end_inset

n)
\family default
 Skips reading the next 
\family typewriter
n
\family default
 bytes in the stream (only forward!).
\end_layout

\begin_layout Itemize

\family typewriter
readBytes(byte[]
\begin_inset space ~
\end_inset

buf)
\family default
 Same as 
\family typewriter
readBytes(buf, 0, buf.length)
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf)
\family default
 Same as 
\family typewriter
writeBytes(buf, 0, buf.length)
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
close()
\family default
 Closes the stream.
 This just calls the 
\family typewriter
close()
\family default
 method of the attached stream, thus closing it.
 Usually, this method may never be called.
 Remember that closing a stream twice may throw an 
\family typewriter
IOException
\family default
, so if you call this close method, don't call the base 
\family typewriter
Stream
\family default
's.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
As a general rule, strings and arrays with 
\family typewriter
null
\family default
 value are persisted as zero sized strings and arrays (e.g.
 a string persisted with 
\family typewriter
writeString(null)
\family default
 is read as 
\family typewriter
“”
\family default
 - a zero sized string, which is not a 
\family typewriter
null
\family default
 value).
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.DataStream
\family default
 and 
\family typewriter
totalcross.io.
\begin_inset Newline newline
\end_inset

DataStreamLE
\family default
 JavaDocs.
\end_layout

\begin_layout Chapter
BufferedStream 
\end_layout

\begin_layout Standard

\family typewriter
BufferedStream
\family default
 offers a faster way to read and write data from streams in a buffered manner.
 This is especially useful when reading or writing large amounts of data.
 It works like the 
\family typewriter
CompressedByteArrayStream
\family default
, however it does not compresses the data like that one.
 Here's a sample code: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void writeLargeFile(String path, byte[] largeData) throws IOException
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	File f = new File(path, File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

	BufferedStream bs = new BufferedStream(f, BufferedStream.WRITE, 4096);
\end_layout

\begin_layout Plain Layout

	bs.writeBytes(largeData, 0, largeData.length);
\end_layout

\begin_layout Plain Layout

	bs.close(); // important!
\end_layout

\begin_layout Plain Layout

	f.close();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.BufferedStream
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
ByteArrayStream
\end_layout

\begin_layout Standard

\family typewriter
ByteArrayStream
\family default
 is a 
\family typewriter
Stream
\family default
 that has an internal growable byte array, and it is commonly used as a
 buffer.
 
\end_layout

\begin_layout Itemize
In I/O operations, usually it's faster and/or less resource consuming to
 send larger chunks of data at once, instead of sending several small chunks
 of data.
 You may use a 
\family typewriter
ByteArrayStream
\family default
 as a buffer and wait until it reaches a minimum size performing any actual
 I/O operation.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Socket s = new Socket(host, 8080); // connect to our host
\end_layout

\begin_layout Plain Layout

PortConnector pc = new PortConnector(0, 9600); // open a serial connection
\end_layout

\begin_layout Plain Layout

ByteArrayStream bas = new ByteArrayStream(512); // length 512
\end_layout

\begin_layout Plain Layout

bas.readFully(s, 10, 0); /* reads from the given stream (our socket) until
 the maximum number of retries is reached, in this case, 10 times.
 */
\end_layout

\begin_layout Plain Layout

int available = bas.available();
\end_layout

\begin_layout Plain Layout

if (available > 0) // did we receive anything?
\end_layout

\begin_layout Plain Layout

	pc.writeBytes(bas.getBuffer(), 0, available); /* yes! Let's send the data
 over the serial connection.
 */
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This difference is easily noticeable when dealing with external connections,
 like socket or port connector, but don't forget their operations usually
 have a time limit (timeout), that must be adjusted according to your connection
 speed and the amount of data you want to be able to read or write in a
 single I/O operation.
 Using a low timeout to send or receive large amounts of data may cause
 problems.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You may also use a 
\family typewriter
ByteArrayStream
\family default
 with 
\family typewriter
DataStream
\family default
 to ensure you received enough data before handling it.
\end_layout

\begin_layout Standard
Sample code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Socket s = new Socket(host, 8080); // connect to our host
\end_layout

\begin_layout Plain Layout

ByteArrayStream bas = new ByteArrayStream(256); // length 256
\end_layout

\begin_layout Plain Layout

bas.readFully(s, 5, 0); /* reads from the given stream (our socket) until
 the maximum number of retries is reached, in this case, 5 times.
 */
\end_layout

\begin_layout Plain Layout

DataStream ds = new DataStream(bas); /* the DataStream wraps the ByteArrayStream
 instead of the Socket.
 */
\end_layout

\begin_layout Plain Layout

int value;
\end_layout

\begin_layout Plain Layout

if (bas.available() >= 4) // do we have at least 4 bytes available?
\end_layout

\begin_layout Plain Layout

	value = ds.readInt(); // yes! Then we can read an int from the buffer.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
ByteArrayStream
\family default
 is usually used as a read-only or write-only buffer, because its internal
 cursor is advanced every time a read or write operation is performed.
 However, you may use methods like 
\family typewriter
setPos()
\family default
, 
\family typewriter
reset()
\family default
, 
\family typewriter
mark()
\family default
, and 
\family typewriter
skipBytes()
\family default
 to navigate through the buffer and be able to perform read and write operations
 on the same buffer.
\end_layout

\begin_layout Standard
Like a 
\family typewriter
Vector
\family default
, 
\family typewriter
ByteArrayStream
\family default
 expands its internal buffer dynamically as needed (at a 20% rate).
\end_layout

\begin_layout Standard

\family typewriter
ByteArrayStream
\family default
 has three constructors:
\end_layout

\begin_layout Itemize

\family typewriter
ByteArrayStream(byte[]
\begin_inset space ~
\end_inset

buffer)
\family default
 Creates a 
\family typewriter
ByteArrayStream
\family default
, using the given byte array, which may not be empty, as the internal buffer.
 More often used to create read-only buffers.
\end_layout

\begin_layout Itemize

\family typewriter
ByteArrayStream(int
\begin_inset space ~
\end_inset

size)
\family default
 Creates a 
\family typewriter
ByteArrayStream
\family default
, with a newly created (empty) internal byte array of the given size.
 More often used to create write-only buffers.
\end_layout

\begin_layout Itemize

\family typewriter
ByteArrayStream(byte[]
\begin_inset space ~
\end_inset

buffer,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len)
\family default
 Creates a 
\family typewriter
ByteArrayStream
\family default
 where 
\family typewriter
len
\family default
 is the length to be read from the buffer.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Although the internal buffer is a private field, you may create a 
\family typewriter
ByteArrayStream
\family default
 with your own byte array or use methods like 
\family typewriter
getBuffer()
\family default
 and 
\family typewriter
setBuffer()
\family default
 to have a reference for this field.
 But you can't set the internal buffer to 
\family typewriter
null
\family default
 or change its size without also updating its length and reseting its cursor
 position.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
getBuffer()
\family default
 Returns a reference to the internal buffer.
 The actual length of the buffer may differ from the current buffer size.
 Use the 
\family typewriter
getPos()
\family default
 method to get the correct value.
 
\end_layout

\begin_layout Itemize

\family typewriter
setBuffer(byte[]
\begin_inset space ~
\end_inset

buffer)
\family default
 Assigns the given byte array as the internal buffer, reseting its current
 position and updating its size.
\end_layout

\begin_layout Itemize

\family typewriter
toByteArray()
\family default
 Returns a byte array, which is a copy of the contents of the internal buffer.
\end_layout

\begin_layout Standard
Methods inherited from 
\family typewriter
Stream
\family default
:
\end_layout

\begin_layout Itemize

\family typewriter
readBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count)
\family default
 Copies 
\family typewriter
count
\family default
 bytes from this byte array stream's buffer to the given byte array, starting
 at position 
\family typewriter
start
\family default
.
 The contents of the buffer are not changed, but its cursor is moved 
\family typewriter
count
\family default
 positions.
 It returns the number of bytes actually read or -1 if the end of the base
 stream was reached (if applicable to the base stream).
 
\end_layout

\begin_layout Itemize

\family typewriter
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

start,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

count)
\family default
 Copies 
\family typewriter
count
\family default
 bytes from the given byte array, starting at position 
\family typewriter
start
\family default
, to this byte array stream's buffer, expanding it if necessary.
 The internal cursor is moved 
\family typewriter
count
\family default
 positions.
\end_layout

\begin_layout Itemize

\family typewriter
close()
\family default
 Does nothing.
 The 
\family typewriter
ByteArrayStream
\family default
 does not encapsulate an actual handler for I/O operations, so there's nothing
 to be done.
\end_layout

\begin_layout Standard
Manipulating the internal array:
\end_layout

\begin_layout Itemize

\family typewriter
getPos()
\family default
 Returns the current cursor position in the buffer – the number of bytes
 read in a read-only, or the number of bytes written in a write-only way.
\end_layout

\begin_layout Itemize

\family typewriter
available()
\family default
 Returns the number of bytes available for reading or writing from the current
 cursor position (marked position of the buffer – current cursor position).
\end_layout

\begin_layout Itemize

\family typewriter
mark()
\family default
 Marks the current position as the buffer size and the cursor position to
 0, so you may read from the buffer without going past the number of bytes
 actually available for reading.
\end_layout

\begin_layout Itemize

\family typewriter
reset()
\family default
 Resets the cursor position to 0 and sets the mark with the actual array
 size.
\end_layout

\begin_layout Itemize

\family typewriter
reuse()
\family default
 Shifts the bytes starting at the current position to the first position
 of the buffer – this way you may reuse the buffer without exceeding the
 buffer limits, which would make the buffer grow and consume more memory.
 This method also returns the number of bytes shifted, which may be used
 to move the cursor to the end of it and reuse the buffer without overwriting
 the shifted bytes.
\end_layout

\begin_layout Itemize

\family typewriter
skipBytes(int
\begin_inset space ~
\end_inset

count)
\family default
 Moves the cursor 
\family typewriter
count
\family default
 bytes from the current position.
 A positive value moves the cursor forward, while a negative value moves
 the cursor backwards.
 The cursor cannot be placed outside the stream limits, stopping at position
 0 when moving backwards, or at the last position of the stream, when moving
 forward.
 
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This method 
\emph on
does not
\emph default
 throw an exception if the given argument exceeds the buffer bounds; instead,
 it returns -1.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
setPos(int
\begin_inset space ~
\end_inset

newPos)
\family default
 Sets cursor position to the given value (which should be between 0 and
 the position marked as the end of the buffer).
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
This method 
\emph on
does
\emph default
 check if the given value is valid and throws an 
\family typewriter
IOException
\family default
 if not.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
setSize(int
\begin_inset space ~
\end_inset

newSize,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

copyOldData)
\family default
 Resizes the internal buffer if the given size is greater than the position
 marked as the end of the buffer.
 If 
\family typewriter
copyOldData
\family default
 is 
\family typewriter
true
\family default
, it also copies the contents of the current buffer to the new buffer, starting
 from 0 to the current cursor position.
 If the given size is equal or smaller than the marked position of the buffer,
 nothing is changed.
\end_layout

\begin_layout Itemize

\family typewriter
readFully(Stream
\begin_inset space ~
\end_inset

inputStream,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

retryCount,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

bufSize)
\family default
 Resets
\begin_inset Newline newline
\end_inset

this byte array stream and reads the maximum amount of data available from
 the given stream, marking the last position used as the end of the buffer.
 The argument 
\family typewriter
retryCount
\family default
, if greater than 0, specifies the number of times the method should try
 to read data from the stream before returning.
 It will always try to read data at least once, even if 
\family typewriter
retryCount
\family default
 is not a positive value.
 This is specially useful for streams that handle external connections,
 like 
\family typewriter
Socket
\family default
 or 
\family typewriter
PortConnector
\family default
; you may specify 1 or any lower value for other streams, like 
\family typewriter
File
\family default
 or 
\family typewriter
PDBFile
\family default
.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Itemize
Be careful when using this method with streams like file.
 It may read the whole file at once, resulting in a great loss of performance
 and resources (the buffer may be resized several times).
 In the worst scenario, the device will run out of memory and the application
 will be halted.
 In this case, you should check the size of the stream before using 
\family typewriter
readFully()
\family default
.
\end_layout

\begin_layout Itemize
The argument 
\family typewriter
bufSize
\family default
 specifies a minimum size for the internal buffer – therefore, if its value
 is equal or lower than the size of the buffer, it is not resized (i.e.
 you cannot use it to shrink the buffer).
 Otherwise, the buffer will be resized to match the given value.
\begin_inset Newline newline
\end_inset

Please notice, the buffer will still grow if necessary, regardless of the
 
\family typewriter
bufSize
\family default
 value.
 So you cannot use it to limit the amount of data read, and you may specify
 a value 0 or lower if you do not wish to define a minimum size – this will
 not prevent its automatic resize.
\end_layout

\begin_layout Itemize
The byte array stream is reseted at the beginning of 
\family typewriter
readFully()
\family default
, so you can't use it in a loop as a buffer for a stream, you must use the
 argument 
\family typewriter
retryCount
\family default
 instead.
\end_layout

\begin_layout Itemize
Calling the method reset before 
\family typewriter
readFully()
\family default
 is pointless, since this is already done by 
\family typewriter
readFully()
\family default
.
\end_layout

\begin_layout Itemize
After 
\family typewriter
readFully()
\family default
 finishes reading from the internal buffer, it marks the current cursor
 position and sets the cursor to the first position of the array, so you
 may read from the buffer without going past the number of bytes actually
 available for reading.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.ByteArrayStream
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
CompressedByteArrayStream
\end_layout

\begin_layout Standard
Creates a 
\family typewriter
CompressedByteArrayStream
\family default
, saving memory when reading and writting huge amount of data.
 Arrays of 16000 bytes will be created and each byte array will be compressed
 once filled and will be automatically decompressed on read.
 This saves space but adds a slowdown to the process.
 It is useful when transferring FTP files to/from the server.
 
\end_layout

\begin_layout Standard
This class cannot be used for output AND input, but only for output OR input,
 in an absolutely sequential mode (the 
\family typewriter
skipBytes()
\family default
 method is NOT implemented): you must write everything, then read everything.
 To change the mode, use the 
\family typewriter
setMode(READ_MODE
\family default
 or 
\family typewriter
WRITE_MODE)
\family default
 method.
 No check is made to see if you're in the right mode, but your program will
 probably crash if you do it in the wrong one.
 
\end_layout

\begin_layout Standard
Sample that transfers bytes to the server: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CompressedByteArrayStream cbas = new CompressedByteArrayStream(9); // default
 mode is WRITE_MODE
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 50000; i++)
\end_layout

\begin_layout Plain Layout

	cbas.writeLine("1234567890"); // already appends 
\backslash
r
\backslash
n
\end_layout

\begin_layout Plain Layout

cbas.flush();
\end_layout

\begin_layout Plain Layout

cbas.setMode(CompressedByteArrayStream.READ_MODE); // prepare for read
\end_layout

\begin_layout Plain Layout

ftp.sendFile(cbas, "bigfile.txt", true); 
\end_layout

\begin_layout Plain Layout

// if you want to send another one, just call
\end_layout

\begin_layout Plain Layout

cbas.setMode(CompressedByteArrayStream.WRITE_MODE); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sample that transfers bytes from the server: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CompressedByteArrayStream cbas = new CompressedByteArrayStream(9);
\end_layout

\begin_layout Plain Layout

ftp.receiveFile("bigfile.txt", cbas);
\end_layout

\begin_layout Plain Layout

cbas.flush();
\end_layout

\begin_layout Plain Layout

String line;
\end_layout

\begin_layout Plain Layout

while ((line = cbas.readLine()) != null)
\end_layout

\begin_layout Plain Layout

	// do something with the line! 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is another fully functional sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int i;
\end_layout

\begin_layout Plain Layout

String g = "1234567890";
\end_layout

\begin_layout Plain Layout

CompressedByteArrayStream cbas = new CompressedByteArrayStream(9); // default
 mode is WRITE_MODE
\end_layout

\begin_layout Plain Layout

for (i = 0; i < 50000; i++)
\end_layout

\begin_layout Plain Layout

	cbas.writeLine(g); // already appends 
\backslash
r
\backslash
n
\end_layout

\begin_layout Plain Layout

cbas.flush();
\end_layout

\begin_layout Plain Layout

Vm.debug("size: " + cbas.getCompressedSize() + " -> " + cbas.getSize());
\end_layout

\begin_layout Plain Layout

String s;
\end_layout

\begin_layout Plain Layout

for (i = 0; (s = cbas.readLine()) != null; i++)
\end_layout

\begin_layout Plain Layout

	if (!g.equals(s))
\end_layout

\begin_layout Plain Layout

		Vm.debug("error in " + i);
\end_layout

\begin_layout Plain Layout

if (i != 50000)
\end_layout

\begin_layout Plain Layout

	Vm.debug("i differs!");
\end_layout

\begin_layout Plain Layout

cbas.close(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that, although the samples above use 
\family typewriter
writeLine()
\family default
 and 
\family typewriter
readLine()
\family default
, you can store any kind of data.
 By attaching a 
\family typewriter
DataStream
\family default
 it's possible to read any data type from the stream.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

CompressedByteArrayStream cbas = new CompressedByteArrayStream(5);
\end_layout

\begin_layout Plain Layout

DataStream ds = new DataStream(cbas);
\end_layout

\begin_layout Plain Layout

byte[] big = new byte[200000];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// fill big with something
\end_layout

\begin_layout Plain Layout

ds.writeBytes(big);
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 100000; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	ds.writeInt(0x123456);
\end_layout

\begin_layout Plain Layout

	ds.writeString("Michelle");
\end_layout

\begin_layout Plain Layout

	ds.writeDouble(123.456d);
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// well, now we do something with these!
\end_layout

\begin_layout Plain Layout

int realSize = cbas.getSize(); // just for fun
\end_layout

\begin_layout Plain Layout

int compressed = cbas.getCompressedSize(); // just for fun
\end_layout

\begin_layout Plain Layout

ds.readBytes(big);
\end_layout

\begin_layout Plain Layout

for (int i = 0; i < 100000; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int i = ds.readInt();
\end_layout

\begin_layout Plain Layout

	String love = ds.readString(); // Michelle
\end_layout

\begin_layout Plain Layout

	double d = ds.readDouble();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Call the 
\family typewriter
close()
\family default
 method only when you're completely done in using it: all the internal buffers
 will be released, and reading from it will crash your program.
 Note that the 
\family typewriter
readLine()
\family default
 method will not work if there are any character with accentuation.
 
\end_layout

\begin_layout Standard

\family typewriter
CompressedByteArrayStream
\family default
 has an enclosed class called 
\family typewriter
DirectCharConverter
\family default
, which implements a 
\family typewriter
CharacterConverter
\family default
 that converts from 
\family typewriter
char[]
\family default
 to 
\family typewriter
byte[]
\family default
 which just casts the char to byte; thus, ignoring any non-ASCII character.
 
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.CompressedByteArrayStream
\family default
 and
\family typewriter

\begin_inset Newline newline
\end_inset

CompressedByteArrayStream.DirectCharConverter
\family default
 JavaDocs.
\end_layout

\begin_layout Chapter
RandomAccessStream 
\end_layout

\begin_layout Standard
This class represents a stream that behaves like a large array of bytes
 and may be randomly accessed.
 For more details, check out 
\family typewriter
totalcross.io.RandomAccessStream
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
CRC32Stream 
\end_layout

\begin_layout Standard
Computes CRC32 data checksum of a stream.
 The actual CRC32 algorithm is described in RFC 1952 (GZIP file format specifica
tion version 4.3).
 It can be used to get the CRC32 over a stream if used with input/output
 streams.
 For more details, check out 
\family typewriter
totalcross.io.CRC32Stream
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
Connector
\end_layout

\begin_layout Standard
Class used to open socket connections over WIFI.
 The other kind of connections are not used for the currently supported
 devices anymore.
 For more details, check out 
\family typewriter
totalcross.io.Connector
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
StreamConnectionNotifier
\end_layout

\begin_layout Standard
This is the base (abstract) class for connection notifiers.
 For more details, check out 
\family typewriter
totalcross.io.StreamConnectionNotifier
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
PortConnector
\end_layout

\begin_layout Standard
This class is used to accesses the device ports.
 This works only on Windows 32 and on JDK (in this case, it uses 
\family typewriter
javax.comm
\family default
, which MUST be installed separately).
 Use this to access the computer serial ports (COM 1 to COM 4), bluetooth,
 and USB ports.
 For more details, check out 
\family typewriter
totalcross.io.device.PortConnector
\family default
 JavaDoc.
 
\end_layout

\begin_layout Chapter
File
\end_layout

\begin_layout Standard
Being able to persist and retrieve data is very important for any application
 – and also a difficult task when you're dealing with different platforms
 and OS versions, each one with your own features and flaws.
\end_layout

\begin_layout Standard
The 
\family typewriter
File
\family default
 class was designed to allow you to browse and manipulate the file system
 – with its directories and archives – of any supported device in a transparent
 and reliable manner.
\end_layout

\begin_layout Standard
A 
\family typewriter
File
\family default
 object represents an archive or a directory of the device's file system,
 stored either on its non-volatile memory or in a memory card inserted on
 the device (currently supported only on Android).
\end_layout

\begin_layout Standard
When creating a new 
\family typewriter
File
\family default
 object, you may specify the open mode using one of the following constants:
\end_layout

\begin_layout Itemize

\family typewriter
DONT_OPEN
\family default
 The path argument denotes either a directory or an archive that may not
 exist.
 The given path is stored but the file isn't actually accessed (i.e.
 no resource is locked to manipulate the file).
\begin_inset Newline newline
\end_inset

This mode may be used to perform operations that do not require the allocation
 of any resources, or to manipulate directories.
 In fact, it is the only mode that allows directory manipulation.
 
\begin_inset Newline newline
\end_inset

The 
\family typewriter
DONT_OPEN
\family default
 mode allows the 
\family typewriter
exists()
\family default
, 
\family typewriter
rename()
\family default
, 
\family typewriter
delete()
\family default
, 
\family typewriter
listFiles()
\family default
, 
\family typewriter

\begin_inset Newline newline
\end_inset

createDir()
\family default
, and 
\family typewriter
isDir()
\family default
 methods to be called without requiring the file to be open for reading
 or writing.
 
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Files created with mode 
\family typewriter
DONT_OPEN
\family default
 don't need to be closed since there are no resources to be released, but
 you can call the 
\family typewriter
close()
\family default
 method anyway.
 However, calling the 
\family typewriter
close()
\family default
 method twice for the same 
\family typewriter
File
\family default
 object (i.e.
 trying to close a file that was already closed) throws an 
\family typewriter
IOException
\family default
 regardless of the file open mode used.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
CREATE
\family default
 The given path denotes an archive that may not exist.
 If the archive does not exist, it is created and opened with read and write
 access, otherwise, it justs opens the existing file with read and write
 access.
\end_layout

\begin_layout Itemize

\family typewriter
READ_WRITE
\family default
 The given path denotes an archive to be opened with read and write access.
 The archive must exist, otherwise a 
\family typewriter
FileNotFoundException
\family default
 is thrown.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Use this mode when you want to manipulate an archive only if it already
 exists - don't forget to catch and handle the 
\family typewriter
FileNotFoundException
\family default
.
 This is more efficient than creating a file object in 
\family typewriter
DONT_OPEN
\family default
 mode to check if the file exists and is not a directory.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
CREATE_EMPTY
\family default
 The given path denotes an archive that may not exist.
 If the archive exists, it is replaced by an empty one, otherwise, a new
 one is created.
 Either way, the archive is opened with read and write access.
\end_layout

\begin_layout Itemize

\family typewriter
READ_ONLY
\family default
 Works only for files, must not be used for folders.
 With this mode it is possible to access an already opened file in any mode
 on all platforms.
 All the other modes are exclusive with each other except on Android, iOS,
 and Linux.
 Obvioulsy it is not possible to write in the file using this mode.
 
\end_layout

\begin_layout Standard
There is a constant called 
\family typewriter
INVALID
\family default
, whose value is 0, which means an invalid file open mode.
 This should not be used to open a file.
 This is used by TotalCross to indicate that a file is invalid after closing
 it.
\end_layout

\begin_layout Standard
File constructors:
\end_layout

\begin_layout Itemize

\family typewriter
File(String
\begin_inset space ~
\end_inset

path,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

mode,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

slot)
\family default
 Creates a 
\family typewriter
File
\family default
 object with the given path, using the given mode (which should be one of
 the above constants) and the specified slot which was used only on Palm
 OS, not supported anymore.
\end_layout

\begin_layout Itemize

\family typewriter
File(String
\begin_inset space ~
\end_inset

path,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

mode)
\family default
 Creates a 
\family typewriter
File
\family default
 object with the given path, using the given mode (which should be one of
 the above constants) and the last available slot, which was used only on
 Palm OS, not supported anymore.
\end_layout

\begin_layout Itemize

\family typewriter
File(String
\begin_inset space ~
\end_inset

path)
\family default
 Creates a 
\family typewriter
File
\family default
 object with the given path, using the 
\family typewriter
DONT_OPEN
\family default
 mode and the last available slot, which was used only on Palm OS, not supported
 anymore.
\end_layout

\begin_layout Standard
When creating a new file, you may start the path using the alias 
\family typewriter
device/
\family default
, which evaluates to the platform's base user directory: 
\end_layout

\begin_layout Itemize
Java - 
\family typewriter
/
\family default
 (current directory) 
\end_layout

\begin_layout Itemize
Windows 32 - 
\family typewriter
/
\family default
 (root of the current drive) 
\end_layout

\begin_layout Itemize
iOS - in the documents folder of the current application
\end_layout

\begin_layout Itemize
Android - 
\family typewriter
/data/data/totalcross.app.<main class name> 
\family default
or
\family typewriter
 /data/data/
\begin_inset Newline newline
\end_inset

totalcross.app<application id>
\family default
 if using single package 
\end_layout

\begin_layout Itemize
WP8 - 
\end_layout

\begin_layout Standard
On iOS, Android, and WP8, if you don't specify a path, the file will be
 open in 
\family typewriter
device/
\family default
.
 
\end_layout

\begin_layout Standard
The method 
\family typewriter
isCardInserted(int slot)
\family default
works on Android and WP8, but its parameter is ignored.
\end_layout

\begin_layout Standard
To access the card on Android devices, prefix the path with 
\family typewriter
/sdcard
\family default
.
 Be sure that the card is NOT MOUNTED (being used by the desktop), otherwise
 your application will not have access to it.
 Some android devices have more than one sdcard, an internal and an external
 ones.
 On such devices, 
\family typewriter
/sdcard
\family default
 is the internal one; to find the external path, you must get into the device
 because there's no API to get it.
 For example, on Galaxy devices, it is 
\family typewriter
/mnt/extSdCard
\family default
.
\end_layout

\begin_layout Standard
The card on WP8 isn't supported yet.
 Anyway, when it becomes possible, it will be only possible to read from
 it, since it's read-only.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Always use 
\family typewriter
/
\family default
 (slash) as the file separator, and never the 
\family typewriter

\backslash

\family default
 (backslash), regardless of the target platform.
 Although the 
\family typewriter
File
\family default
 constructor should be able to handle both slashes and backslashes right
 now, the backslash support may be removed in the future to increase performance.
 Besides, the slash is TotalCross' official file separator, so you'd better
 get used to it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also, avoid using accentuated characters in the file name because it may
 not work on some devices.
\end_layout

\begin_layout Standard
Depending on the target file type (directory or archive) and the used open
 mode, some methods may not be used, or have a different behavior.
 Using a method under the wrong circumstances may result in an 
\family typewriter
IOException
\family default
.
\end_layout

\begin_layout Standard
To clarify, we'll split the 
\family typewriter
File
\family default
 methods into the four categories below (some methods from its superclass
 are omitted):
\end_layout

\begin_layout Itemize
Archive and directory methods – May be used with any file, regardless of
 the type and the open mode.
\end_layout

\begin_layout Itemize
Directory only methods – Can only be used with directories.
\end_layout

\begin_layout Itemize
Archive only methods – Can only be used with open archives (cannot be used
 with 
\family typewriter
File
\family default
 objects created with the 
\family typewriter
DONT_OPEN
\family default
 mode).
\end_layout

\begin_layout Itemize
Behavior depends on the file type – May be used with any file, but the method
 implementation and result depends on the file type.
\end_layout

\begin_layout Standard
Archive and directory methods:
\end_layout

\begin_layout Itemize

\family typewriter
exists()
\family default
 Returns 
\family typewriter
true
\family default
 if the file exists and 
\family typewriter
false
\family default
, otherwise.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (new File("dummy.txt").exists())
\end_layout

\begin_layout Plain Layout

   ...
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
isDir()
\family default
 Returns 
\family typewriter
true
\family default
 if and only if the file exists and is a directory, returning 
\family typewriter
false
\family default
, otherwise.
 To check if a file is an archive, you must test if the file is not a directory
 and if the file exists.
 Obviously this method should only be used in mode 
\family typewriter
DONT_OPEN
\family default
, since it will always return 
\family typewriter
false
\family default
 in any other mode.
\end_layout

\begin_layout Itemize

\family typewriter
getPath()
\family default
 Returns the file's path passed in the constructor.
 
\end_layout

\begin_layout Itemize

\family typewriter
getParent()
\family default
 Returns a new 
\family typewriter
File
\family default
 object that references this file's parent directory, or 
\family typewriter
null
\family default
 if this file does not have a parent directory (it's the root directory).
 The new file object is created in 
\family typewriter
DONT_OPEN
\family default
 mode.
\end_layout

\begin_layout Itemize

\family typewriter
rename(String
\begin_inset space ~
\end_inset

path)
\family default
 Renames the file with the given path.
\begin_inset Newline newline
\end_inset

This operation closes the 
\family typewriter
File
\family default
 object, so you should not perform any operations after a rename.
 You must give the full directory specification for the file to keep compatibili
ty between all platforms.
 The file is automatically closed prior to renaming.
 After this operation, the 
\family typewriter
File
\family default
 object is invalid.
 It cannot be used in 
\family typewriter
READ_ONLY
\family default
 mode.
 
\end_layout

\begin_layout Itemize

\family typewriter
delete()
\family default
 Removes the file from the file system.
 If the file is a directory, it must be empty, otherwise an 
\family typewriter
IOException
\family default
 will be thrown.
 If the file does not exist, a
\begin_inset Newline newline
\end_inset


\family typewriter
FileNotFoundException
\family default
 is thrown.
\begin_inset Newline newline
\end_inset

This operation closes the file object, so you should not perform any operations
 after a delete.
 The file could have been opened in any of the available modes, except for
 
\family typewriter
READ_ONLY
\family default
.
 Example: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

new File("/my/file.c").delete(); 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
close()
\family default
 Closes the 
\family typewriter
File
\family default
 object, releasing any resources held by this object.
 Trying to close a 
\family typewriter
File
\family default
 object twice (e.g.
 calling 
\family typewriter
close()
\family default
 twice, or 
\family typewriter
rename()
\family default
 and 
\family typewriter
close()
\family default
) results in an 
\family typewriter
IOException
\family default
.
\begin_inset Newline newline
\end_inset

This operation closes the 
\family typewriter
File
\family default
 object, so you should not perform any operations after a close.
\end_layout

\begin_layout Itemize

\family typewriter
isEmpty()
\family default
 If the object is a file, returns 
\family typewriter
true
\family default
 if the file has 0 bytes.
 If it is a folder, returns 
\family typewriter
true
\family default
 if there are no files nor folders inside of it.
 
\end_layout

\begin_layout Standard
Directory only methods:
\end_layout

\begin_layout Itemize

\family typewriter
createDir()
\family default
 Creates the directory named by this path, including any necessary but nonexiste
nt parent directories.
 It throws an 
\family typewriter
IOException
\family default
 if the file was closed, if it was open in anything else than 
\family typewriter
DONT_OPEN
\family default
, if the directory already exists, or if the directories could not be created.
 
\end_layout

\begin_layout Itemize

\family typewriter
deleteDir()
\family default
 Deletes a directory and all its subdirectories and files.
 If you have problems trying to recreate the directory, be sure to call
 
\family typewriter
Vm.gc()
\family default
 after calling this method.
 
\end_layout

\begin_layout Itemize

\family typewriter
listFiles()
\family default
 Returns an array of strings denoting the files in this directory.
 The strings returned are the names of the files and directories contained
 within this directory.
 Paths are suffixed by a slash.
 If the folder is empty, the method returns an empty array whereas if the
 
\family typewriter
File
\family default
 object is not a directory, 
\family typewriter
null
\family default
 is returned.
\end_layout

\begin_layout Itemize

\family typewriter
listFiles(String
\begin_inset space ~
\end_inset

dir)
\family default
 Static method that returns a recursive list of all files inside the given
 directory (including it).
 The array is sorted upon return.
 If the folder is empty, the method returns an empty array whereas if the
 
\family typewriter
File
\family default
 object is not a directory, 
\family typewriter
null
\family default
 is returned.
\end_layout

\begin_layout Itemize

\family typewriter
listFiles(String
\begin_inset space ~
\end_inset

dir,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

recursive)
\family default
 Same as above but also lists the files in the subdirectories if 
\family typewriter
recursive
\family default
 is 
\family typewriter
true
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
listRoots()
\family default
 Lists the root drives.
 If there are no roots, returns 
\family typewriter
null
\family default
.
 Works on Windows 32 and Java platforms.
 
\end_layout

\begin_layout Standard
Archive only methods:
\end_layout

\begin_layout Itemize

\family typewriter
readBytes(byte[]
\begin_inset space ~
\end_inset

b,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

off,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len)
\family default
 Attempts to read 
\family typewriter
len
\family default
 bytes from the file into the given byte array, starting at the array's
 position 
\family typewriter
off
\family default
.
 Returns the number of bytes actually read.
\end_layout

\begin_layout Itemize

\family typewriter
writeBytes(byte[]
\begin_inset space ~
\end_inset

b,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

off,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

len)
\family default
 Attempts to write 
\family typewriter
len
\family default
 bytes to the file from the given byte array, starting at the array's position
 
\family typewriter
off
\family default
.
 Returns the number of bytes actually written.
\end_layout

\begin_layout Itemize

\family typewriter
flush()
\family default
 Flushes the stream, forcing any buffered bytes to be written on the file.
 This causes any pending data to be written to disk.
 Calling this method too much may decrease the performance.
 It has no effect on Java.
 
\end_layout

\begin_layout Itemize

\family typewriter
setPos(int
\begin_inset space ~
\end_inset

pos)
\family default
 Moves the file pointer for read and write operations to the given position.
 The position passed is an absolute position, in bytes, from the beginning
 of the file.
 To set the position to just after the end of the file, you can call: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

file.setPos(file.getSize()); 
\end_layout

\end_inset

Note: if you plan to change the file size using 
\family typewriter
setPos()
\family default
, you must write something on the new size to effectively change the size.
 For example, on some devices if you call 
\family typewriter
setPos()
\family default
 and then read (assuming that the new position is past the end of the file,
 the read method will fail.
 Here's a code that will change the size for sure: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

private static byte[] zeros = new byte[4096];
\end_layout

\begin_layout Plain Layout

public void setSize(int newSize)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int size = f.getSize();
\end_layout

\begin_layout Plain Layout

	f.setPos(newSize - 1); // note: setPos(1) makes the file 2 bytes long (0,
 1)
\end_layout

\begin_layout Plain Layout

	f.setPos(size);
\end_layout

\begin_layout Plain Layout

	for (int dif = newSize - size, n = 0; dif > 0; dif -= n)
\end_layout

\begin_layout Plain Layout

		n = f.writeBytes(zeros, 0, dif > zeros.length ? zeros.length : dif);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
getAttributes()
\family default
 Gets the file attributes, returning the attributes constants 
\family typewriter
OR
\family default
ed together (more information below).
 The file must be opened in a mode different from 
\family typewriter
DONT_OPEN
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
setAttributes(int
\begin_inset space ~
\end_inset

attr)
\family default
 Sets the opened file attributes with the given attributes constants 
\family typewriter
OR
\family default
ed together (more information below).
 The file must be opened in a mode different from 
\family typewriter
DONT_OPEN
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
getTime(byte
\begin_inset space ~
\end_inset

whichTime)
\family default
 Gets the time for the given time type constant (more information below).
 The file must be opened in a mode different from 
\family typewriter
DONT_OPEN
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
setTime(byte
\begin_inset space ~
\end_inset

whichTime,
\begin_inset space ~
\end_inset

Time
\begin_inset space ~
\end_inset

time)
\family default
 Sets the time for the given time type constant (more information below).
 The file must be opened in a mode different from 
\family typewriter
DONT_OPEN
\family default
 and 
\family typewriter
READ_ONLY
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
setSize(int
\begin_inset space ~
\end_inset

newSize)
\family default
 Sets the size of this file.
 If 
\family typewriter
newSize
\family default
 is greater than the current size, the file is resized to the given size,
 otherwise the file is truncated, discarding all bytes from the position
 
\family typewriter
newSize
\family default
 to the current end of file.
\end_layout

\begin_layout Itemize

\family typewriter
getSize()
\family default
 If the file is a directory, returns the amount of free space available
 on this file system.
 If the file is an open archive, returns its size.
 If the file is neither a directory nor an open archive, an 
\family typewriter
IOException
\family default
 is thrown.
 If the total amount is greater than 2 GB, 2 GB is returned.
 Examples: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int freeSpace; 
\end_layout

\begin_layout Plain Layout

if (Settings.platform.equals("Win32") || Settings.platform.equals("Java"))
\end_layout

\begin_layout Plain Layout

   freeSpace = new File("c:
\backslash

\backslash
").getSize();
\end_layout

\begin_layout Plain Layout

else
\end_layout

\begin_layout Plain Layout

   freeSpace = new File("
\backslash

\backslash
").getSize(); // Posix 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
copyTo(File
\begin_inset space ~
\end_inset

dest)
\family default
 Copies the current file to the given one.
 You must close both files after calling this method.
 Here's a sample of how to copy a file: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

File src = new File(srcFileName,File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

File dest = new File(destFileName,File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

src.copyTo(dest);
\end_layout

\begin_layout Plain Layout

src.close();
\end_layout

\begin_layout Plain Layout

dest.close(); 
\end_layout

\end_inset

This method is thread-safe.
 
\end_layout

\begin_layout Itemize

\family typewriter
moveTo(File
\begin_inset space ~
\end_inset

dest)
\family default
 Moves the current file to the given one (the original file is deleted).
 You must explicitly close the destination file after this operation is
 done.
 Here's a sample of how to move a file: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

File src = new File(srcFileName,File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

File dest = new File(destFileName,File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

src.moveTo(dest); 
\end_layout

\begin_layout Plain Layout

// src.close(); - not needed! src was deleted
\end_layout

\begin_layout Plain Layout

dest.close();
\end_layout

\end_inset

This method is thread-safe.
 
\end_layout

\begin_layout Itemize

\family typewriter
copy(String
\begin_inset space ~
\end_inset

src,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

dst)
\family default
 A handy method to call 
\family typewriter
copyTo()
\family default
 creating two 
\family typewriter
File
\family default
 instances and closing them.
 This method is thread-safe.
 If you want to have more control, use the 
\family typewriter
copyTo()
\family default
 method.
\end_layout

\begin_layout Itemize

\family typewriter
move(String
\begin_inset space ~
\end_inset

src,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

dst)
\family default
 A handy method to call 
\family typewriter
moveTo()
\family default
 creating two 
\family typewriter
File
\family default
 instances and closing the destination file.
 The source file is erased if it exists.
 This method is thread-safe.
 If you want to have more control, use the other 
\family typewriter
moveTo()
\family default
 method.
 
\end_layout

\begin_layout Itemize

\family typewriter
chmod(int
\begin_inset space ~
\end_inset

mod)
\family default
 Applies the given permissions to this file.
 Works only on Unix-based operating systems: Linux, Android, and iOS.
 On JDK 1.6, the first number (user) is applied to all groups.
 Below you see a table with some chmod values (r = read, w = write, x =
 execute).
 
\begin_inset Tabular
<lyxtabular version="3" rows="21" columns="2">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Permission 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--------- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
400
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
r-------- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
444
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
r--r--r-- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
600
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw------- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
620
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw--w---- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
640
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-r----- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
644
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-r--r-- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
645
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-r--r-x 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
646
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-r--rw- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
650
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-r-x--- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
660
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-rw---- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
661
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-rw---x 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
662
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-rw--w- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
663
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-rw--wx 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
664
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-rw-r-- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
666
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-rw-r-- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
700
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rwx------ 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
750
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rwxr-x--- 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
755
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rwxr-xr-x 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
777
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rwxrwxrwx 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

The numbers represents a group of 3.
 The first number is the permission for user, the second number for group,
 and the third number for others.
 These are the possible permission values for each number: 
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Permission
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Binary
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decimal
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
---
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
--x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-w-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
010
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
-wx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
011
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
r--
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
r-x
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
101
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rw-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
110
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
rwx
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
111
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

Failing to change the permission returns -1.
 Here's a sample: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

try
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	// testing in a folder
\end_layout

\begin_layout Plain Layout

	File f = new File(Settings.appPath);
\end_layout

\begin_layout Plain Layout

	add(new Label("mods of appPath = "+f.chmod(-1)),CENTER,CENTER);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// testing in a file
\end_layout

\begin_layout Plain Layout

	String name = "test";
\end_layout

\begin_layout Plain Layout

	f = new File(Settings.appPath+'/'+name,File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

	int m0 = f.chmod(777); // change it
\end_layout

\begin_layout Plain Layout

	int m1 = f.chmod(-1); // retrieve the changed value
\end_layout

\begin_layout Plain Layout

	add(new Label("mods of "+name+" = "+m0+" -> "+m1+" (777)"),CENTER,AFTER+5);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

catch (Exception ee)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	MessageBox.showException(ee,true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The modifiers you want to set (mod) must be given in DECIMAL, or -1 to just
 return the current ones.
 It returns the modifiers that were set before you called this method (or
 the current modifiers, if -1 is being passed).
 Some platforms may return more than 3 digits, indicating extra attributes
 (for example, if it's a file or a directory).
 
\end_layout

\begin_layout Itemize

\family typewriter
readAndClose()
\family default
 Reads the entire file into a byte array and closes itself.
 A handy method that can be used like this: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

byte[] bytes = new File(...,File.READ_ONLY).readAndClose();
\end_layout

\end_inset

The only drawback is that this method consumes lots of memory if the file
 is big; use it carefully.
 
\end_layout

\begin_layout Section
File attributes
\end_layout

\begin_layout Standard
As shown above, you may use the methods 
\family typewriter
getAttributes()
\family default
 and 
\family typewriter
setAttributes()
\family default
 to retrieve or change the attributes of an archive (these operations are
 not supported for directories) with the following constants:
\end_layout

\begin_layout Itemize

\family typewriter
ATTR_ARCHIVE
\family default
 Often used to mark an archive for backup or removal.
\end_layout

\begin_layout Itemize

\family typewriter
ATTR_HIDDEN 
\family default
Hidden files are usually not listed on the file system.
\end_layout

\begin_layout Itemize

\family typewriter
ATTR_READ_ONLY
\family default
 Archives marked as read only cannot be opened with write access.
\end_layout

\begin_layout Itemize

\family typewriter
ATTR_SYSTEM
\family default
 Archives marked as system are normally used only by the OS, and should
 not be changed by the user.
\end_layout

\begin_layout Standard
These values are platform independent, and can be 
\family typewriter
OR
\family default
ed together.
 However, these attributes are not supported by all platforms, and although
 you are not required to write platform specific code, you must be aware
 that you should not rely on certain attributes when writing cross-platform
 applications.
\end_layout

\begin_layout Standard
Below you can see the archive attributes support for each platform:
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Java The methods have no effect on any file when running on JDK, it only
 checks if the object state and the received argument are valid.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Win32 Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
WP8 Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
iOS Supports only 
\family typewriter
ATTR_READ_ONLY
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Android Supports only 
\family typewriter
ATTR_READ_ONLY
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Linux Supports only 
\family typewriter
ATTR_READ_ONLY
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
The attributes 
\family typewriter
ATTR_HIDDEN
\family default
 and 
\family typewriter
ATTR_ARCHIVE
\family default
 are not supported by Unix based systems.
 Using them will not throw an exception, but it will have no effect on the
 file.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
File times
\end_layout

\begin_layout Standard
Usually a file has three attributes which represents its creation time,
 the last time it was accessed and the last time it was modified.
 TotalCross provides the following constants to be used with the methods
 
\family typewriter
setTime()
\family default
 and 
\family typewriter
getTime()
\family default
 in the 
\family typewriter
whichTime
\family default
 parameter to retrieve and change these attributes:
\end_layout

\begin_layout Itemize

\family typewriter
TIME_CREATED
\family default
 Used to get or set the file's creation time.
\end_layout

\begin_layout Itemize

\family typewriter
TIME_ACCESSED
\family default
 Used to get or set the time the file was last accessed.
\end_layout

\begin_layout Itemize

\family typewriter
TIME_MODIFIED
\family default
 Used to get or set the time the file was last modified.
\end_layout

\begin_layout Itemize

\family typewriter
TIME_ALL
\family default
 Used to set all of the above times with the same value.
\end_layout

\begin_layout Standard
Unfortunately these operations are not fully supported by all platforms,
 so you must be aware that you should not rely on these values when writing
 cross-platform applications.
\end_layout

\begin_layout Standard
Below you can see the times attributes support for each platform:
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Java 
\family typewriter
setTime()
\family default
 has no effect on any file when running on JDK, it only checks if the object
 state and the received argument are valid.
 
\family typewriter
getTime()
\family default
 will always return the time of the last modification if the object state
 and the received argument are valid.
 
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Win32 Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
WP8 Full support.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
iOS Full support with 
\family typewriter
getTime()
\family default
, but you cannot set the attribute 
\family typewriter
TIME_CREATED
\family default
 with 
\family typewriter
setTime()
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Android Full support with 
\family typewriter
getTime()
\family default
, but you cannot set the attribute 
\family typewriter
TIME_CREATED
\family default
 with 
\family typewriter
setTime()
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
Linux Full support with 
\family typewriter
getTime()
\family default
, but you cannot set the attribute 
\family typewriter
TIME_CREATED
\family default
 with 
\family typewriter
setTime()
\family default
.
\end_layout

\begin_layout Labeling
\labelwidthstring BlackBerry0
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Unix based systems do not keep record of the file's creation time.
 Attempting to change it will not thrown an exception, but it will have
 no effect on the file.
 Using the constant 
\family typewriter
TIME_CREATED
\family default
 will return the last time the file was changed, which is updated when changes
 are made to the file's inode (owner, permissions, etc.), and also when the
 contents of the file are modified.
 The constant 
\family typewriter
TIME_MODIFIED
\family default
 returns the last time the contents of the file were modified.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Finally, here is an example showing data being read from a file: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

File file = new File("/temp/tempfile", File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

byte b[] = new byte[10];
\end_layout

\begin_layout Plain Layout

file.readBytes(b, 0, 10);
\end_layout

\begin_layout Plain Layout

file.close();
\end_layout

\begin_layout Plain Layout

file = new File("/temp/tempfile"); // opens in DONT_OPEN mode
\end_layout

\begin_layout Plain Layout

file.delete(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.File
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
LineReader
\end_layout

\begin_layout Standard
Class used to read lines ending with 
\family typewriter

\backslash
r
\backslash
n
\family default
 (enter/linefeed) or 
\family typewriter

\backslash
n
\family default
 (linefeed) from a stream.
 Consecutive newlines are skipped.
 This class does not work well with multi-byte characters when the second
 byte contains the delimiter or enter/linefeed.
 
\end_layout

\begin_layout Standard
Here's a sample: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LineReader reader = new LineReader(new File("text.txt",File.READ_WRITE));
\end_layout

\begin_layout Plain Layout

String line; 
\end_layout

\begin_layout Plain Layout

while ((line = reader.readLine()) != null) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	// ...
 do whatever you want with the line.
 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Note that this class already uses a buffer for faster detection of the newline.
 Don't use 
\family typewriter
LineReader
\family default
 with a 
\family typewriter
BufferedStream
\family default
, it's nonsense and it will throw a warning on the desktop.
 
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.LineReader
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
TokenReader
\end_layout

\begin_layout Standard
This is a 
\family typewriter
LineReader
\family default
 subclass used to read an array of tokens in a line ending with 
\family typewriter

\backslash
r
\backslash
n
\family default
 (enter/linefeed) from a stream.
 Consecutive newlines are skipped.
 This class does not work well with multi-byte characters when the second
 byte contains the delimiter or enter/linefeed.
 
\end_layout

\begin_layout Standard
The usual way to parse a CSV file is: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

LineReader reader = new LineReader(new File("text.txt",File.READ_WRITE));
 
\end_layout

\begin_layout Plain Layout

String line;
\end_layout

\begin_layout Plain Layout

String[] tokens;
\end_layout

\begin_layout Plain Layout

while ((line = reader.readLine()) != null)
\end_layout

\begin_layout Plain Layout

	tokens = Convert.tokenizeString(line, "
\backslash
n,");   
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Using this class takes less memory, because the line is read in tokens.
 For example, suppose a line contains 200 chars, and splitting them contains
 10 tokens of 20 chars each.
 Using the first approach (
\family typewriter
readline()
\family default
/
\family typewriter
tokenizeString()
\family default
), the 
\family typewriter
readline()
\family default
 will create a string with 200 chars, then that string will be tokenized
 into 10 smaller strings of 20 chars each.
\end_layout

\begin_layout Standard
Using this class, it will read the 10 tokens of 20 chars each directly,
 no longer having to create the temporary string of 200 chars.
 
\end_layout

\begin_layout Standard
The delimiter can be any character except for 
\family typewriter

\backslash
r
\family default
 and 
\family typewriter

\backslash
n
\family default
.
 Note that two consecutive delimiters are considered a single token.
 So 
\family typewriter
;a;;
\family default
 is returned as 
\family typewriter
{"","a","",""}
\family default
.
 
\end_layout

\begin_layout Standard
Here's a sample that parses the input from a file: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

TokenReader reader = new TokenReader(new File("text.csv",File.READ_WRITE),
 ',');
\end_layout

\begin_layout Plain Layout

String[] tokens;
\end_layout

\begin_layout Plain Layout

while ((tokens = reader.readTokens()) != null)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

   // ...
 do whatever you want with the tokens.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

 And here's another sample that parses from a String: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String lines = "a;;;a;
\backslash
na;;;a; 
\backslash
nb;;b;b;b 
\backslash
nb;;b;b;b;
\backslash
nb
\backslash
nb;
\backslash
n;b
\backslash
n;
\backslash
n b ;
\backslash
n b 
\backslash
n b 
\backslash
n b 
\backslash
nb 
\backslash
n b";
\end_layout

\begin_layout Plain Layout

String ll[] = Convert.tokenizeString(lines,'
\backslash
n');
\end_layout

\begin_layout Plain Layout

TokenReader tk = new TokenReader(new ByteArrayStream(lines.getBytes()),';');
\end_layout

\begin_layout Plain Layout

tk.doTrim = true;
\end_layout

\begin_layout Plain Layout

String[] line;
\end_layout

\begin_layout Plain Layout

for (int j =0; ((line = tk.readTokens()) != null); j++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Vm.debug('"'+ll[j]+'"');
\end_layout

\begin_layout Plain Layout

	for (int i =0; i < line.length; i++)
\end_layout

\begin_layout Plain Layout

	Vm.debug(i+": '"+line[i]+"'");
\end_layout

\begin_layout Plain Layout

	Vm.debug("");
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output is: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

"a;;;a;"
\end_layout

\begin_layout Plain Layout

0: 'a'
\end_layout

\begin_layout Plain Layout

1: ''
\end_layout

\begin_layout Plain Layout

2: ''
\end_layout

\begin_layout Plain Layout

3: 'a'
\end_layout

\begin_layout Plain Layout

4: ''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"a;;;a; "
\end_layout

\begin_layout Plain Layout

0: 'a'
\end_layout

\begin_layout Plain Layout

1: ''
\end_layout

\begin_layout Plain Layout

2: ''
\end_layout

\begin_layout Plain Layout

3: 'a'
\end_layout

\begin_layout Plain Layout

4: ''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"b;;b;b;b "
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

1: ''
\end_layout

\begin_layout Plain Layout

2: 'b'
\end_layout

\begin_layout Plain Layout

3: 'b'
\end_layout

\begin_layout Plain Layout

4: 'b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"b;;b;b;b;"
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

1: ''
\end_layout

\begin_layout Plain Layout

2: 'b'
\end_layout

\begin_layout Plain Layout

3: 'b'
\end_layout

\begin_layout Plain Layout

4: 'b'
\end_layout

\begin_layout Plain Layout

5: ''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"b"
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"b;"
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

1: ''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

";b"
\end_layout

\begin_layout Plain Layout

0: ''
\end_layout

\begin_layout Plain Layout

1: 'b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

";"
\end_layout

\begin_layout Plain Layout

0: ''
\end_layout

\begin_layout Plain Layout

1: ''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

" b ;"
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

1: ''
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

" b "
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"  b "
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

" b  "
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"b  "
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

"  b"
\end_layout

\begin_layout Plain Layout

0: 'b'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this class already uses a buffer for faster detection of the newline
 and delimiters.
 Don't use 
\family typewriter
TokenReader
\family default
 with a 
\family typewriter
BufferedStream
\family default
, it's nonsense and it will throw a warning on the desktop, such as with
 its superclass 
\family typewriter
LineReader
\family default
.
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.TokenReader
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
GPS
\end_layout

\begin_layout Standard

\family typewriter
GPS
\family default
 is a class that retrieves GPS coordinates read from Android, WP8, and iOS
 native API.
 This class only retrieves data updating the internal fields.
 If you want to display that data, you may use the 
\family typewriter
GPSView
\family default
 class.
 
\end_layout

\begin_layout Standard
If the GPS fails connecting to the satellites, and the phone has signal,
 you can use the cell tower location as a rough location.
 The precision varies between 50m to 3km, depending on the phone location.
 In this case, you can get the latitude and longitude using 
\family typewriter
CellInfo.toCoordinates()
\family default
 on Android and Windows 32.
 This won't work on other platforms.
 Don't forget to turn on the GPS, going to somewhere similar to Settings
 / Security & Location / Enable GPS satellites.
 You won't be able to use if if it's off in the settings.
\end_layout

\begin_layout Section
GPS class
\end_layout

\begin_layout Standard
Here is an example of GPS usage:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

new Thread()   
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public void run()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		gps = new GPS();
\end_layout

\begin_layout Plain Layout

		for (int i = 0; i < 60*2 && gps.location[0] == 0; i++) // wait 60s
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.safeSleep(500);
\end_layout

\begin_layout Plain Layout

			try
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				gps.retrieveGPSData();
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			catch (Exception eee)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				eee.printStackTrace();
\end_layout

\begin_layout Plain Layout

				break;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}.start(); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.device.gps.GPS
\family default
 JavaDoc.
\end_layout

\begin_layout Section
GPSView class
\end_layout

\begin_layout Standard
This control displays the GPS coordinates read, using the 
\family typewriter
GPS
\family default
 class to show the values on labels.
 You can use the 
\family typewriter
GPS
\family default
 class standalone if you wish.
 The field 
\family typewriter
gps
\family default
 is the class used to retrieve the GPS coordinates.
 One way to use this class is:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

add(gps = new GPSView(1000),LEFT,TOP); 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.io.device.gps.GPSView
\family default
 JavaDoc.
\end_layout

\begin_layout Section
GoogleMaps class
\end_layout

\begin_layout Standard
Shows a Google Maps viewer on a separate window.
 Internet connection is required.
 Currently works on Android and iOS only.
 Pressing back returns to the application on Android.
 On iOS you must do a double-click on the home button to open the task manager
 to return to your application.
 
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.map.GoogleMaps
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
RadioDevice
\end_layout

\begin_layout Standard
This class provides access to the device's radios and information about
 their status.
 All methods are static.
 For more details, check out 
\family typewriter
totalcross.io.device.RadioDevice
\family default
 JavaDoc.
\end_layout

\begin_layout Part
COMPRESSION
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
This section covers the usage of classes that handle data compression, inflating
 compressed data or deflating uncompressed data using streams.
\end_layout

\begin_layout Chapter
CompressedStream
\end_layout

\begin_layout Standard
Abstract class used as the basis for compression filters, such as 
\family typewriter
ZLibStream
\family default
 and 
\family typewriter
GZipStream
\family default
.
 It is the base class for stream filters that perform data compression and
 decompression.
\end_layout

\begin_layout Standard
Instances of subclasses of 
\family typewriter
CompressedStream
\family default
 cannot be used for both read and write operations.
 At the object creation, you MUST choose if the new object is going to be
 used either for reading or writing compressed data, by passing one of the
 following constants to the class constructor:
\end_layout

\begin_layout Itemize

\family typewriter
DEFLATE
\family default
 Used to create a stream for data compression.
 In this mode, you may ONLY use write operations, that is, you may NOT use
 the method 
\family typewriter
readBytes()
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
INFLATE
\family default
 Used to create a stream for data decompression.
 In this mode, you may ONLY use read operations, that is, you may NOT use
 the method 
\family typewriter
writeBytes()
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Subclasses of 
\family typewriter
CompressedStream
\family default
 that implements algorithms with different levels of compression, should
 always use a constant default value for data compression.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also notice that closing a compressed stream (using its 
\family typewriter
close()
\family default
 method) DOES NOT affect the underlying stream (the stream passed to the
 constructor).
 To also close the underlying stream, you must call its own 
\family typewriter
close()
\family default
 method after closing the compressed stream.
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.util.zip.CompressedStream
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
ZLibStream
\end_layout

\begin_layout Standard
Subclass of 
\family typewriter
CompressedStream
\family default
 that implements data compression using the zlib algorithm.
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.util.zip.ZLibStream
\family default
 JavaDoc.
\end_layout

\begin_layout Quote
“zlib is designed to be a free, general-purpose, legally unencumbered --
 that is, not covered by any patents - lossless data-compression library
 for use on virtually any computer hardware and operating system.
 The zlib data format is itself portable across platforms.
\begin_inset Quotes erd
\end_inset

 - 
\begin_inset CommandInset href
LatexCommand href
target "http://www.zlib.net/"

\end_inset


\end_layout

\begin_layout Chapter
GZipStream
\end_layout

\begin_layout Standard
Subclass of 
\family typewriter
CompressedStream
\family default
 that implements data compression using the gzip algorithm.
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.util.zip.GZipStream
\family default
 JavaDoc.
\end_layout

\begin_layout Quote
“gzip (GNU zip) is a compression utility designed to be a replacement for
 compress.
 Its main advantages over compress are much better compression and freedom
 from patented algorithms.
 It has been adopted by the GNU project and is now relatively popular on
 the Internet.” - 
\begin_inset CommandInset href
LatexCommand href
target "http://www.gzip.org/"

\end_inset


\end_layout

\begin_layout Chapter
ZipStream 
\end_layout

\begin_layout Standard
This class implements a stream filter for reading and writing files in the
 ZIP file format.
 Currently supports only compressed entries.
 For more details, check out 
\family typewriter
totalcross.util.zip.ZipStream
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
ZipEntry
\end_layout

\begin_layout Standard
The 
\family typewriter
ZipEntry
\family default
 class is used to represent a ZIP file entry.
 For more details, check out 
\family typewriter
totalcross.util.
\begin_inset Newline newline
\end_inset

zip.ZipEntry
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
ZipFile
\end_layout

\begin_layout Standard
This class represents a ZIP file.
 For more details, check out 
\family typewriter
totalcross.util.zip.ZipFile
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
ZLib
\end_layout

\begin_layout Standard
Utility class that provides static methods to perform full stream compression
 and decompression using the zlib algorithm.
\end_layout

\begin_layout Standard
It has the following methods:
\end_layout

\begin_layout Itemize

\family typewriter
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out)
\family default
 Deflates the given stream 
\family typewriter
in
\family default
 with the specified compression level, writing the result to the given stream
 
\family typewriter
out
\family default
.
 Compressed data will be generated in zlib format using the default strategy
 and the default compression level.
 
\end_layout

\begin_layout Itemize

\family typewriter
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

compressionLevel)
\family default
 Deflates the given stream 
\family typewriter
in
\family default
 with the specified compression level, writing the result to the given stream
 
\family typewriter
out
\family default
.
 Compressed data will be generated in zlib format using the default strategy.
 
\end_layout

\begin_layout Itemize

\family typewriter
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

compressionLevel,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

strategy,
\begin_inset Newline newline
\end_inset

boolean
\begin_inset space ~
\end_inset

noWrap)
\family default
 Deflates the given stream 
\family typewriter
in
\family default
 using the specified strategy and compression level, writing the result
 to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
nowrap == true
\family default
 then the zlib header and checksum fields will not be used in order to support
 the compression format used in both gzip and pkzip.
 
\end_layout

\begin_deeper
\begin_layout Standard
The compression level value must be between -1 and 9, where:
\end_layout

\begin_layout Itemize
-1: Default compression level.
\end_layout

\begin_layout Itemize
0: Storage only, no compression.
\end_layout

\begin_layout Itemize
1 – 9: Defines nine levels of compression, being 1 the less efficient (also
 the fastest) and 9 the most efficient (also the slowest).
 
\end_layout

\begin_layout Standard
You may also use one of the constants below:
\end_layout

\begin_layout Itemize

\family typewriter
NO_COMPRESSION
\family default
 Constant for compression level 0.
\end_layout

\begin_layout Itemize

\family typewriter
BEST_SPEED
\family default
 Constant for compression level 1.
\end_layout

\begin_layout Itemize

\family typewriter
BEST_COMPRESSION
\family default
 Constant for compression level 9.
\end_layout

\begin_layout Itemize

\family typewriter
DEFAULT_COMPRESSION
\family default
 Constant for the platform's default compression level (usually 5 or 6),
 same as -1.
\end_layout

\begin_layout Standard
The compression strategy value must be one of the following:
\end_layout

\begin_layout Itemize

\family typewriter
DEFAULT_STRATEGY
\family default
 Default compression strategy.
\end_layout

\begin_layout Itemize

\family typewriter
FILTERED
\family default
 Compression strategy best used for data consisting mostly of small values
 with a somewhat random distribution.
 
\end_layout

\begin_layout Itemize

\family typewriter
HUFFMAN_ONLY
\family default
 Compression strategy for Huffman coding only.
 
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sizeIn)
\family default
 Attempts to read the number of bytes specified by 
\family typewriter
sizeIn
\family default
 from the the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
sizeIn
\family default
 is -1, it will attempt to fully read the stream.
\end_layout

\begin_layout Itemize

\family typewriter
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out)
\family default
 Attempts to fully read the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 It's equivalent to the calling of the above method passing the value -1
 for 
\family typewriter
sizeIn
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sizeIn,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

noWrap)
\family default
 Attempts
\begin_inset Newline newline
\end_inset

to read the number of bytes specified by 
\family typewriter
sizeIn
\family default
 from the the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
sizeIn
\family default
 is -1, it will attempt to fully read the stream.
 If the parameter 
\family typewriter
noWrap == true
\family default
 then the zlib header and checksum fields will not be used.
 This provides compatibility with the compression format used by both gzip
 and pkzip.
 
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note: When using the 
\family typewriter
noWrap
\family default
 option it is also necessary to provide an extra "dummy" byte as input.
 This is required by the zlib native library in order to support certain
 optimizations.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.util.zip.ZLib
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
GZip
\end_layout

\begin_layout Standard
Utility class that provides static methods to perform full stream compression
 and decompression using the gzip algorithm.
 The GZip algorithm is provided with the ZLib library.
 
\end_layout

\begin_layout Standard
It has the following methods:
\end_layout

\begin_layout Itemize

\family typewriter
deflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out)
\family default
 Deflates the given stream 
\family typewriter
in
\family default
 writing the result to the given stream 
\family typewriter
out
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

sizeIn)
\family default
 Attempts to read the number of bytes specified by 
\family typewriter
sizeIn
\family default
 from the the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 If 
\family typewriter
sizeIn
\family default
 is -1, it will attempt to fully read the stream.
\end_layout

\begin_layout Itemize

\family typewriter
inflate(Stream
\begin_inset space ~
\end_inset

in,
\begin_inset space ~
\end_inset

Stream
\begin_inset space ~
\end_inset

out)
\family default
 Attempts to fully read the given stream 
\family typewriter
in
\family default
, inflating and writing to the given stream 
\family typewriter
out
\family default
.
 It's equivalent to the calling the above method passing the value -1 for
 
\family typewriter
sizeIn
\family default
.
\end_layout

\begin_layout Standard
The classes ZLib and GZip interfaces are almost identical, the only difference
 is that you may specify the desired compression level when deflating with
 ZLib.
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.util.zip.GZip
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
Checksum 
\end_layout

\begin_layout Standard
Abstract class to compute a data checksum used by checked input/output streams.
 A data checksum can be updated by one byte or with a byte array.
 After each update the value of the current checksum can be returned by
 calling 
\family typewriter
getValue()
\family default
.
 The complete checksum object can also be reset so it can be used again
 with new data.
 
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.util.zip.Checksum
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
Adler32 
\end_layout

\begin_layout Standard
Computes an Adler-32 checksum for a stream of data.
 An Adler-32 checksum is not as reliable as a CRC32 checksum, but a lot
 faster to compute.
 
\end_layout

\begin_layout Standard
The specification for Adler-32 may be found in RFC 1950 (ZLIB Compressed
 Data Format Specification version 3.3).
 
\end_layout

\begin_layout Standard
From that document: 
\end_layout

\begin_layout Standard
"ADLER32 (Adler-32 checksum) This contains a checksum value of the uncompressed
 data (excluding any dictionary data) computed according to Adler-32 algorithm.
 This algorithm is a 32-bit extension and improvement of the Fletcher algorithm,
 used in the ITU-T X.224 / ISO 8073 standard.
 
\end_layout

\begin_layout Standard
Adler-32 is composed of two sums accumulated per byte: 
\family typewriter
s1
\family default
 is the sum of all bytes, 
\family typewriter
s2
\family default
 is the sum of all 
\family typewriter
s1
\family default
 values.
 Both sums are done modulo 65521.
 
\family typewriter
s1
\family default
 is initialized to 1, 
\family typewriter
s2
\family default
 to zero.
 The Adler-32 checksum is stored as 
\family typewriter
s2*65536 + s1
\family default
 in most-significant-byte first (network) order." 
\end_layout

\begin_layout Standard
"8.2.
 The Adler-32 algorithm 
\end_layout

\begin_layout Standard
The Adler-32 algorithm is much faster than the CRC32 algorithm yet still
 provides an extremely low probability of undetected errors.
 
\end_layout

\begin_layout Standard
The modulo on unsigned long accumulators can be delayed for 5552 bytes,
 so the modulo operation time is negligible.
 If the bytes are 
\family typewriter
a
\family default
, 
\family typewriter
b
\family default
, 
\family typewriter
c
\family default
, the second sum is 
\family typewriter
3a + 2b + c + 3
\family default
, and so is position and order sensitive, unlike the first sum, which is
 just a checksum.
 That 65521 is prime is important to avoid a possible large class of two-byte
 errors that leave the check unchanged (the Fletcher checksum uses 255,
 which is not prime and which also makes the Fletcher check insensitive
 to single byte changes 
\family typewriter
0 <-> 255
\family default
) .
\end_layout

\begin_layout Standard
The sum 
\family typewriter
s1
\family default
 is initialized to 1 instead of zero to make the length of the sequence
 part of 
\family typewriter
s2
\family default
, so that the length does not have to be checked separately (any sequence
 of zeroes has a Fletcher checksum of zero)."
\end_layout

\begin_layout Standard
This class extends the class 
\family typewriter
Checksum
\family default
.
 For more details, check out 
\family typewriter
totalcross.util.zip.
\begin_inset Newline newline
\end_inset

Adler32
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
CRC32
\end_layout

\begin_layout Standard
Computes CRC32 data checksum of a data stream.
 The actual CRC32 algorithm is described in RFC 1952 (GZIP file format specifica
tion version 4.3).
 It can be used to get the CRC32 over a stream if used with checked input/output
 streams.
 It extends the abstract class 
\family typewriter
Checksum
\family default
.
 All the methods of 
\family typewriter
Adler32
\family default
 are avaiable for this class, except that they are used for a CRC32.
 For more details, check out 
\family typewriter
totalcross.util.zip.CRC32
\family default
 JavaDoc.
\end_layout

\begin_layout Part
NET
\end_layout

\begin_layout Chapter
Socket
\end_layout

\begin_layout Standard
The 
\family typewriter
Socket
\family default
 class allows you to open TCP/IP connections from your device.
 To be able to establish a connection with a particular server, both the
 server and the device must be connected to a common network (e.g.
 a local network that connects your computers and devices, or the Internet).
\end_layout

\begin_layout Standard
A 
\family typewriter
Socket
\family default
 object denotes a client-server connection over a network using the TCP/IP
 protocol, where the device acts as a client, which connects to a specific
 server port.
\end_layout

\begin_layout Standard
The 
\family typewriter
Socket
\family default
 class does not provide many methods besides the ones inherited from 
\family typewriter
Stream
\family default
.
 After creating a socket, you'll usually just perform read and write operations,
 closing the socket after you're done.
\end_layout

\begin_layout Standard
However, streams that handle remote connections are more likely to fail
 due to hardware and communication problems, so we shouldn't handle socket
 operations the same way we do with file operations.
\end_layout

\begin_layout Standard
In TotalCross, socket's read and write operations are blocking with a timeout
 – that means that socket methods will block the thread until the operation
 is completed, or the timeout for the operation is reached.
 If the operation is completed, the method returns immediately, regardless
 of the amount of time left.
 Otherwise, the method will just return the amount of data processed.
\end_layout

\begin_layout Standard
It's important to notice that no exception is thrown if the method times
 out.
 This is just a way to prevent your thread from being blocked indefinitely
 because of communication problems.
 You may just keep executing the same method until it finishes processing
 all the data.
\end_layout

\begin_layout Standard

\family typewriter
Socket
\family default
 constructors:
\end_layout

\begin_layout Itemize

\family typewriter
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

boolean
\begin_inset space ~
\end_inset

noLinger)
\family default

\begin_inset Newline newline
\end_inset

Creates a new socket that attempts to establish a connection by looking
 up the given host and performing the 3 way TCP/IP handshake.
 The argument 
\family typewriter
port
\family default
 specifies the server port to connect to, while 
\family typewriter
timeout
\family default
 specifies the timeout for this operation in milliseconds.
 The argument 
\family typewriter
noLinger
\family default
 indicates if a socket upon close should shutdown the connection immediately
 or check for any server response before closing.
\end_layout

\begin_layout Itemize

\family typewriter
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout)
\family default
 Same as the above, but uses the default value 
\family typewriter
false
\family default
 for the argument 
\family typewriter
noLinger
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port)
\family default
 Same as the above, but uses the default value 1500 (milliseconds) for the
 argument 
\family typewriter
timeout
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
Socket(String
\begin_inset space ~
\end_inset

host,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

params)
\family default
 Opens a 
\begin_inset Newline newline
\end_inset

socket with additional parameters.
 Each parameter is specified in a 
\family typewriter
key=value
\family default
 form and separated by a 
\family typewriter
;
\family default
 from the next parameter.
 For example: 
\family typewriter
p1=v1;p2=v2
\family default
.
 If 
\family typewriter
true
\family default
, the socket is closed immediately, and no ack is waited from the server.
 Note that this must be done for the very first socket creation per application.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You cannot open a socket before the main event loop.
 In other words, you cannot open a socket in the app's constructor, but
 you can in the 
\family typewriter
initUI()
\family default
 method.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The socket general behavior, including the timeout for read and write operations
, are stored in the following public fields:
\end_layout

\begin_layout Itemize

\family typewriter
readTimeout
\family default
 The timeout value for read operations.
 Its default value is 
\family typewriter
Socket.
\begin_inset Newline newline
\end_inset

DEFAULT_READ_TIMEOUT
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeTimeout
\family default
 The timeout value for write operations.
 Its default value is 
\family typewriter
Socket.
\begin_inset Newline newline
\end_inset

DEFAULT_WRITE_TIMEOUT
\family default
.
\end_layout

\begin_layout Standard
Usually you should not worry about the read and write timeouts.
 The default values will be fine in most cases.
 However, you may increase the timeout value if you experience problems
 with slow connections.
\end_layout

\begin_layout Standard
Reducing the timeout value is usually a bad idea.
 If your device has a high speed connection, the read and write methods
 should also be fast and return before the timeout is reached.
 However, reducing the timeout value won't give you any benefit, and may
 even decrease your program performance.
\end_layout

\begin_layout Standard
Methods for read and write operations:
\end_layout

\begin_layout Itemize

\family typewriter
readBytes(byte[]
\begin_inset space ~
\end_inset

buf)
\family default
 Attempts to read enough bytes from this socket to fill the given buffer.
\end_layout

\begin_layout Itemize

\family typewriter
readLine()
\family default
 Attempts to read a line of text from this socket.
 A line is a sequence of characters delimited by any character lower than
 blank.
 This method correctly handles newlines with 
\family typewriter

\backslash
n
\family default
 or 
\family typewriter

\backslash
r
\backslash
n
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
writeBytes(byte[]
\begin_inset space ~
\end_inset

buf)
\family default
 Attempts to write the contents of the given buffer to this socket.
\end_layout

\begin_layout Itemize

\family typewriter
writeBytes(String
\begin_inset space ~
\end_inset

s)
\family default
 Attempts to write the given string to this socket.
\end_layout

\begin_layout Standard
Except for the method 
\family typewriter
readLine()
\family default
, the methods above are just available for convenience and may be replaced
 by read/write calls inherited from 
\family typewriter
Stream
\family default
.
 This has a cost however - using these methods increases the number of method
 calls for each read/write operation by one (they actually just call the
 
\family typewriter
Stream
\family default
 methods).
 If your application makes heavy use of sockets, you may avoid using these
 methods to improve its performance.
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.net.Socket
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
ServerSocket
\end_layout

\begin_layout Standard
This class implements server sockets.
 A server socket waits for requests to come in over the network.
 It may then accept the incoming TCP/IP connection and perform some operation
 based on that request, possibly returning a result to the requester.
\end_layout

\begin_layout Standard

\family typewriter
ServerSocket
\family default
 constructors:
\end_layout

\begin_layout Itemize

\family typewriter
ServerSocket(int
\begin_inset space ~
\end_inset

port)
\family default
 Attempts to open a server socket at the specified port number.
 By default, the maximum number of simultaneous connections allowed is 
\family typewriter
DEFAULT_BACKLOG
\family default
 and the default timeout for accept is 
\family typewriter
DEFAULT_SOTIMEOUT
\family default
, and the server is not bound to any specific local address.
 The port number must be between 0 and 65535.
\end_layout

\begin_layout Itemize

\family typewriter
ServerSocket(int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout)
\family default
 Same as the above, but you may also specify the timeout value, in milliseconds,
 for the accept operation.
 This value must be a positive value, or 0 to wait forever.
\end_layout

\begin_layout Itemize

\family typewriter
ServerSocket(int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

addr)
\family default
 Same as the above, but you may also specify a local address, which the
 server should bind to.
 If the argument 
\family typewriter
addr
\family default
 has a 
\family typewriter
null
\family default
 value, it is ignored and the server is not bind to any address.
\end_layout

\begin_layout Itemize

\family typewriter
ServerSocket(int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

timeout,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

backlog,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

addr)
\family default

\begin_inset Newline newline
\end_inset

Same as the above, but you may also specify the maximum number of simultaneous
 connections allowed with the argument backlog, which must have a positive
 value.
\end_layout

\begin_layout Standard
You may retrieve the address and port values of this 
\family typewriter
ServerSocket
\family default
 with 
\family typewriter
getHost()
\family default
 and 
\family typewriter

\begin_inset Newline newline
\end_inset

getLocalPort()
\family default
.
\end_layout

\begin_layout Standard
After creating a server socket, you may use the method 
\family typewriter
accept()
\family default
 to wait for incoming connections.
 This method blocks the thread for the amount of time specified by the timeout
 value passed to the constructor, returning a 
\family typewriter
null
\family default
 value when the timeout is over, or until a connection request is received
 and accepted, returning a socket instance representing the new connection.
\end_layout

\begin_layout Standard
The returned object is always a valid 
\family typewriter
Socket
\family default
 instance, that may be used to transfer data between this server and the
 client that requested the connection, and that should be closed when no
 longer needed.
\end_layout

\begin_layout Standard
You should never use blocking operations on threads handling events and/or
 the graphical interface, otherwise the user won't be able to interact with
 the application.
 Take a look at the source code of the sample ServerSocketTest.
\end_layout

\begin_layout Standard
Finally, you may use the method 
\family typewriter
close()
\family default
 to close this server socket, releasing any associated resources.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Remember to close any sockets associated to this server socket before closing
 it.
 Otherwise all open sockets will throw an 
\family typewriter
IOException
\family default
.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.net.ServerSocket
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
SOAP Webservices
\end_layout

\begin_layout Quote
“SOAP Version 1.2 (SOAP) is a lightweight protocol intended for exchanging
 structured information in a decentralized, distributed environment.
 It uses XML technologies to define an extensible messaging framework providing
 a message construct that can be exchanged over a variety of underlying
 protocols.
 The framework has been designed to be independent of any particular programming
 model and other implementation specific semantics.” - Definition from SOAP
 Version 1.2 Part 1: Messaging Framework (Second Edition) - 
\begin_inset CommandInset href
LatexCommand href
name "W3C Recommendation 27 April 2007"
target "http://www.w3.org/TR/2007/REC-soap12-part1-20070427/#intro"

\end_inset


\end_layout

\begin_layout Standard
Because of its implementation independence, the SOAP protocol is widely
 used on the implementation of Web Services.
\end_layout

\begin_layout Standard
For more details, check out the 
\family typewriter
totalcross.xml.soap
\family default
 package JavaDocs.
\end_layout

\begin_layout Section
The SOAP class
\end_layout

\begin_layout Standard
This class represents a SOAP message that, when executed, is sent to the
 server in a HTTP request.
 The server response is then received, processed, and the answer made available.
\end_layout

\begin_layout Standard
Before creating a instance of 
\family typewriter
SOAP
\family default
, you may set the following class fields:
\end_layout

\begin_layout Itemize

\family typewriter
prefix
\family default
 The prefix string used to start the request.
 Note that it uses UTF-8, so unicode characters are not supported.
 Its default value is:
\begin_inset Newline newline
\end_inset


\family typewriter

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

\family typewriter
<soapenv:Envelope xmlns:soapenv="
\end_layout

\begin_layout Plain Layout

\family typewriter
http://schemas.xmlsoap.org/soap/envelope/"
\begin_inset Newline newline
\end_inset

 xmlns:xsd="http://www.w3.org/2001/XMLSchema"
\begin_inset Newline newline
\end_inset

 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
\end_layout

\begin_layout Plain Layout

\family typewriter
<soapenv:Body>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
suffix
\family default
 The suffix string used to finish the request.
 Its default value is:
\begin_inset Newline newline
\end_inset


\family typewriter

\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
</soapenv:Body>
\end_layout

\begin_layout Plain Layout

\family typewriter
</soapenv:Envelope>
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
debug
\family default
 Changing this value to 
\family typewriter
true
\family default
 enables debug mode, which writes XML parsing information on the debug console
 (or the default error output when running on JDK).
 You may also set 
\family typewriter
HttpStream.debugHeader = true
\family default
.
\begin_inset Newline newline
\end_inset

 
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Caution: don't use this on device because it increases a lot the memory
 usage.
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize

\family typewriter
disableEncoding
\family default
 The SOAP request will ask the server for GZip or ZLib encoded response
 by default.
 To disable encoding, set this field to 
\family typewriter
true
\family default
.
\end_layout

\begin_layout Standard
To create a new 
\family typewriter
SOAP
\family default
 instance, you must use the following constructor:
\end_layout

\begin_layout Itemize

\family typewriter
SOAP(String
\begin_inset space ~
\end_inset

mtd,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

uri)
\family default
 Creates a new SOAP request where 
\family typewriter
mtd
\family default
 specifies the remote method to be executed, and 
\family typewriter
uri
\family default
, the address of the Web Service.
 The default namespace will be used, along with an open timeout of 25 seconds,
 and a read and write timeout of 60 seconds.
 
\end_layout

\begin_layout Standard
After creating a new 
\family typewriter
SOAP
\family default
 object, you may set some of its following instance fields:
\end_layout

\begin_layout Itemize

\family typewriter
wasCompressionUsed
\family default
 A flag that indicates if the SOAP connection was using either GZip or ZLib.
 This is a ready-only flag, set during the 
\family typewriter
execute()
\family default
 method, and changing its value has no effect.
 
\end_layout

\begin_layout Itemize

\family typewriter
alternativeReturnTag
\family default
 By default, the XML parser used by SOAP will recognize as an answer tag
 any tags whose name ends with “result” or “return” (ignoring the case).
 This field, if set, specifies an alternative answer tag name, recognizing
 any XML element that ends with the specified value as an answer tag.
\begin_inset Newline newline
\end_inset


\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
alternativeReturnTag
\family default
 IS CASE SENSITIVE, unlike the SOAP default tag names.
 Also, 
\family typewriter
alternativeReturnTag
\family default
 does not replace the default values.
 It's just a new value with higher priority over the default ones.
\end_layout

\end_inset


\end_layout

\begin_layout Itemize

\family typewriter
namespace
\family default
 String that identifies the service's namespace.
 Its default value is:
\family typewriter

\begin_inset Newline newline
\end_inset

http://schemas.xmlsoap.org/soap/
\family default
.
\end_layout

\begin_layout Itemize

\family typewriter
openTimeout
\family default
 Specifies the connection open timeout value in milliseconds.
 Its default value is defined by the constant 
\family typewriter
DEFAULT_OPEN_TIMEOUT
\family default
 (25 s).
\end_layout

\begin_layout Itemize

\family typewriter
readTimeout
\family default
 Specifies the connection read timeout value in milliseconds.
 Its default value is defined by the constant 
\family typewriter
DEFAULT_READ_TIMEOUT
\family default
 (60 s).
\end_layout

\begin_layout Itemize

\family typewriter
writeTimeout
\family default
 Specifies the connection write timeout value in milliseconds.
 Its default value is defined by the constant 
\family typewriter
DEFAULT_WRITE_TIMEOUT
\family default
 (60 s).
\end_layout

\begin_layout Itemize

\family typewriter
mtd
\family default
 Stores the name of the remote method.
\end_layout

\begin_layout Itemize

\family typewriter
uri
\family default
 Stores the address to the Web Service.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100line%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
You may change both the 
\family typewriter
mtd
\family default
 and the 
\family typewriter
uri
\family default
 values before executing the request.
 Although this seems to be pointless, because these values are passed to
 the constructor.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the remote method expects any arguments, you must set them using the
 
\family typewriter
setParam()
\family default
 method.
 However, there are several versions of this method to cover different argument
 types.
 Listing all of them would be pointless, so we'll define a generic type
 that we'll refer as 
\family typewriter
<type>
\family default
, and may be one of the of the following:
\end_layout

\begin_layout Itemize

\family typewriter
int
\end_layout

\begin_layout Itemize

\family typewriter
boolean
\end_layout

\begin_layout Itemize

\family typewriter
double
\end_layout

\begin_layout Itemize

\family typewriter
String
\end_layout

\begin_layout Standard
So, whenever a SOAP method is described like 
\family typewriter
setParam(<type> param)
\family default
, you can safely assume there are four versions of this method, one for
 each type listed above.
 Other type of parameters can be passed using similar methods.
 Unicode characters are not accepted because the default header uses UTF-8.
 
\end_layout

\begin_layout Standard
SOAP methods for parameters setting:
\end_layout

\begin_layout Itemize

\family typewriter
setParam(<type>
\begin_inset space ~
\end_inset

param)
\family default
 Sets the given value in the method's argument order.
\end_layout

\begin_layout Itemize

\family typewriter
setParam(<type>[]
\begin_inset space ~
\end_inset

param)
\family default
 Sets the given array in the method's argument order.
\end_layout

\begin_layout Itemize

\family typewriter
setParam(<type>
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName)
\family default
 Sets the given value, identifying it with the given parameter name.
\end_layout

\begin_layout Itemize

\family typewriter
setParam(<type>[]
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName)
\family default
 Sets the given array value, identifying it with the given parameter name.
\end_layout

\begin_layout Itemize

\family typewriter
setParam(byte[]
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName)
\family default
 Sets a byte array value, identifying it with the given parameter name.
 
\end_layout

\begin_layout Itemize

\family typewriter
setParam(String
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramType)
\family default
 Sets a 
\family typewriter

\begin_inset Newline newline
\end_inset

String
\family default
 parameter in the method, identifying it with the given name and specifying
 its type as the given one.
 
\end_layout

\begin_layout Itemize

\family typewriter
setParam(String[]
\begin_inset space ~
\end_inset

param,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramName,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

paramType)
\family default
 Sets a 
\family typewriter
String
\family default
 array value, identifying it with the given parameter name and specifying
 its type as the given one.
\end_layout

\begin_layout Itemize

\family typewriter
setObjectParam(String
\begin_inset space ~
\end_inset

paramName,String[]
\begin_inset space ~
\end_inset

fieldNames,
\begin_inset Newline newline
\end_inset

String[]
\begin_inset space ~
\end_inset

fieldValues)
\family default
 Sets an 
\family typewriter
Object
\family default
 parameter value, by specifying its parameter name, field names and field
 values.
\end_layout

\begin_layout Itemize

\family typewriter
setObjectArrayParam(String
\begin_inset space ~
\end_inset

paramName,String[]
\begin_inset space ~
\end_inset

fieldNames,
\begin_inset Newline newline
\end_inset

Vector
\begin_inset space ~
\end_inset

fieldValues)
\family default
 Sets an 
\family typewriter
Object
\family default
 array parameter value, by specifying its parameter name, field names and
 field values.
\end_layout

\begin_layout Standard
The only thing left to do now is to execute the request and check the service's
 answer:
\end_layout

\begin_layout Itemize

\family typewriter
execute()
\family default
 This method simply executes the prepared SOAP request.
\end_layout

\begin_layout Itemize

\family typewriter
getAnswer()
\family default
 To retrieve the method's answer, you must call this method after 
\family typewriter
execute()
\family default
.
 The return type of this method is 
\family typewriter
Object
\family default
, but it may return only three different values (the values may be escaped;
 use 
\family typewriter
totalcross.ui.html.EscapeHtml.unescape()
\family default
 to convert it back).
 The remote method return type is known, so you may just typecast the 
\family typewriter
Object
\family default
 returned by 
\family typewriter
getAnswer()
\family default
 to 
\family typewriter
String
\family default
 or 
\family typewriter
String array
\family default
, converting its values if necessary.
 The possible returns are:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
null
\family default
 When the remote method has no return value or the execution failed for
 any reason.
\end_layout

\begin_layout Itemize

\family typewriter
String
\family default
 When the remote method returns a single value.
 If the expected value is not 
\family typewriter
String
\family default
, you must convert the received 
\family typewriter
String
\family default
 to the right type (e.g.
 if you're expecting an int value, you can use 
\family typewriter
Convert.toInt()
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
String[]
\family default
 When the remote method returns an array or an 
\family typewriter
Object
\family default
.
 If the expected value is not a 
\family typewriter
String
\family default
 array, you must convert each value of the array to the right type.
 If it's an object, the array contains its field values.
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
useProxy(String
\begin_inset space ~
\end_inset

address,
\begin_inset space ~
\end_inset

int
\begin_inset space ~
\end_inset

port,
\begin_inset space ~
\end_inset

String
\begin_inset space ~
\end_inset

username,
\begin_inset Newline newline
\end_inset

String
\begin_inset space ~
\end_inset

password)
\family default
 Sets the proxy settings to be used by the SOAP connection.
 You may optionally set the username and password for basic proxy authorization.
 Proxy authorization is disabled if either username or password is 
\family typewriter
null
\family default
.
 In this method, 
\family typewriter
address
\family default
 is the proxy address port and 
\family typewriter
port
\family default
 is the proxy port.
\end_layout

\begin_layout Chapter
HTTPS / SSL
\end_layout

\begin_layout Section
Overview
\end_layout

\begin_layout Standard
The TotalCross SSL native library is a wrapper library of the great axTLS
 package.
 The axTLS embedded SSL project written by Cameron Rich is a highly configurable
 client/server TLSv1 library designed for platforms with small memory requiremen
ts (see 
\begin_inset CommandInset href
LatexCommand href
target "http://axtls.cerocclub.com.au/index.htm"

\end_inset

 for more details).
\end_layout

\begin_layout Standard
The original package supports Linux, Win32, Solaris & Cygwin.
 
\end_layout

\begin_layout Standard
This native library adds support for SSL (Secured Sockets Layer) communications
 to secure data transfers between authenticated devices and/or servers.
\end_layout

\begin_layout Standard
For more details, check out the 
\family typewriter
totalcross.net.ssl
\family default
 package JavaDocs.
\end_layout

\begin_layout Section
Security background
\end_layout

\begin_layout Standard
For general information about the features of TLS (Transport Layer Security)
 and its usage, you may read the Wiki page available at 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/Transport_Layer_Security"

\end_inset

.
 If you are lucky, you may even read a good translation in your personal
 language.
\end_layout

\begin_layout Standard
The english version provides a basic protocol description for everyone.
 For those who want to go further, the reference is the TLS protocol version
 1.0 
\begin_inset CommandInset href
LatexCommand href
name "RFC 2246 (http://tools.ietf.org/html/rfc2246)"
target "http://tools.ietf.org/html/rfc2246"

\end_inset

.
\end_layout

\begin_layout Standard
Basically, TLS allows secured and authenticated communication between two
 components generally so-called client & server.
 It relies on X509 certificates, their associated private keys to encrypt
 and associated public keys to decrypt exchanged data.
 The certificates could be self signed or signed by an Authority known as
 CA (Certification Authority) that have to be trusted.
\end_layout

\begin_layout Standard
Insofar the subject of SSL based security is well documented on the web,
 we won't go further in the TLS description and invite people interrested
 in diving more deeply in secured communications to read the plenty of articles,
 books and HOWTOs available on the Internet.
\end_layout

\begin_layout Section
Generating security material
\end_layout

\begin_layout Standard
We will concentrate on the more general deployment of X509 client or server
 certificates signed by a Certification Authority (CA) (see 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/X.509"

\end_inset

 for more details).
 First we will have to create our own CA, that could be replaced by any
 "well known" commercial CA such as Verisign, Thawte, etc, if you have the
 need for a public authority.
\end_layout

\begin_layout Standard
We will use openssl (
\begin_inset CommandInset href
LatexCommand href
target "www.openssl.org"

\end_inset

) as security engine to generate the security material involved in certificate
 based authentication/encryption.
 It's a well spread SSL implementation providing powerfull tools to create
 and manage all kinds of security materials available on many platforms.
\end_layout

\begin_layout Section
Create a private CA
\end_layout

\begin_layout Standard
Generate a self signed certificate that will be used as Certification Authority
 (CA).
 The authority will be valid for 10 years (approx 3650 days).
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family typewriter
bash$ openssl req -new -x509 -days 3650 -keyout cakey.pem -out cacert.pem
\end_layout

\begin_layout Plain Layout

\family typewriter
Generating a 1024 bit RSA private key
\end_layout

\begin_layout Plain Layout

\family typewriter
.++++++
\end_layout

\begin_layout Plain Layout

\family typewriter
.....++++++
\end_layout

\begin_layout Plain Layout

\family typewriter
writing new private key to 'cakey.pem'
\end_layout

\begin_layout Plain Layout

\family typewriter
Enter PEM pass phrase: xxxxx
\end_layout

\begin_layout Plain Layout

\family typewriter
Verifying - Enter PEM pass phrase: xxxxx
\end_layout

\begin_layout Plain Layout

\family typewriter
-----
\end_layout

\begin_layout Plain Layout

\family typewriter
You are about to be asked to enter information that will be incorporated
 into your certificate request.
\end_layout

\begin_layout Plain Layout

\family typewriter
What you are about to enter is what is called a Distinguished Name or a
 DN.
\end_layout

\begin_layout Plain Layout

\family typewriter
There are quite a few fields but you can leave some blank
\end_layout

\begin_layout Plain Layout

\family typewriter
For some fields there will be a default value,
\end_layout

\begin_layout Plain Layout

\family typewriter
If you enter '.', the field will be left blank.
\end_layout

\begin_layout Plain Layout

\family typewriter
-----
\end_layout

\begin_layout Plain Layout

\family typewriter
Country Name (2 letter code) [AU]:BR
\end_layout

\begin_layout Plain Layout

\family typewriter
State or Province Name (full name) [Some-State]:Rio de Janeiro state
\end_layout

\begin_layout Plain Layout

\family typewriter
Locality Name (eg, city) []:Rio de Janeiro
\end_layout

\begin_layout Plain Layout

\family typewriter
Organization Name (eg, company) [Internet Widgits Pty Ltd]:TotalCross MGP Ltda
\end_layout

\begin_layout Plain Layout

\family typewriter
Organizational Unit Name (eg, section) []:TotalCross dev.
 department
\end_layout

\begin_layout Plain Layout

\family typewriter
Common Name (eg, YOUR name) []:TotalCross Sample CA
\end_layout

\begin_layout Plain Layout

\family typewriter
Email Address []:guich@totalcross.com
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The first entry is the private key password.
 The private key is used to sign other certificates to assert they are authentic.
 The private key is protected by a password as a further security because
 the CA private key is a main secret that have to be protected.
\end_layout

\begin_layout Standard
Next you will have to fill in X500 attributes describing the certificate
 subject.
 In our case, we enter information describing the TotalCross CA (Certification
 Authority).
 Any agent trusting this CA, will authenticate certificates that have been
 signed by it through the CA embedded public key.
\end_layout

\begin_layout Standard
We now have two files, 
\family typewriter
cakey.pem
\family default
 containing an encrypted version of the CA private key protected by a password
 and 
\family typewriter
cacert.pem
\family default
 containing an X509 certificate embedding the CA public key that could be
 redistributed.
\end_layout

\begin_layout Standard
Finally, you have to create a text file named 
\family typewriter
ca.srl
\family default
 with the content "00" for certicate signing counting, just execute the
 following command :
\end_layout

\begin_layout Standard

\family typewriter
bash$ echo “00” > ca.srl
\end_layout

\begin_layout Section
Create a client or server X509 certificate
\end_layout

\begin_layout Standard
First, you have to generate a new private key.
 SSL supports unencrypted and aes128/256 encrypted private keys.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl genrsa -aes128 -out mykey.pem 512
\end_layout

\begin_layout Standard
You may replace 
\family typewriter
-aes128
\family default
 by 
\family typewriter
-aes256
\family default
 for a stronger cipher, or remove 
\family typewriter
-aes128
\family default
 at all to generate a private key that is not encrypted.
 When you ask for an encrypted key, you have to enter a password used in
 the ciphering.
 The last option represents the key size in bits, values between 512 and
 4096 bits for a higher security are accepted, but always keep in mind that
 higher security implies longer processing times especially critical on
 embedded devices.
\end_layout

\begin_layout Standard
Next you have to generate a certificate request.
 This file could be transmitted to one of the commercial CA companies for
 signing or could be signed by our previously created private CA.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl req -new -out my.req -key mykey.pem
\end_layout

\begin_layout Standard
Add 
\family typewriter
-x509
\family default
 if you want to generate a self signed certificate if you don't want to
 use a CA at all (in this case, you may name the file 
\family typewriter
mycert.pem
\family default
 rather than 
\family typewriter
my.req
\family default
).
 Insofar, the 
\family typewriter
out
\family default
 file will contain a finalized self-signed certificate rather than a certificate
 request.
\end_layout

\begin_layout Standard
Enter all information describing your client or your server component.
 The certificate request will be stored in the file 
\family typewriter
my.req
\family default
.
\end_layout

\begin_layout Standard
Finally, we will sign the certificate with the CA.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl x509 -CA cacert.pem -CAkey cakey.pem -CAserial ca.srl -req -in
 my.req -out mycert.pem -days 1460
\end_layout

\begin_layout Standard
The 
\family typewriter
cacert.pem
\family default
 is the CA certificate, 
\family typewriter
cakey.pem
\family default
 its above created PEM encrypted private key, 
\family typewriter
my.req
\family default
 is the certificate request file generated previously and 
\family typewriter
mycert.pem
\family default
 is the resulting signed certificate that can be used for authentication
 and encryption during 1460 days (4 years).
\end_layout

\begin_layout Section
Principle of an X509 authentication/encryption
\end_layout

\begin_layout Standard
X509 authentication/encryption is based on public/private key encryption
 that have a great characteristic.
 Indeed, the data ciphered by either key could only be deciphered by the
 other one.
\end_layout

\begin_layout Standard
A software component that has to be authenticated, such as a secured server,
 may now be configured to deliver to any client the previously generated
 certificate (contained in 
\family typewriter
mycert.pem
\family default
).
 It also has to load the associated certificate private key.
 That private key is used to cipher data transmited to the client.
 On the other side, the client uses the public key embedded in the accepted
 server certificate to decipher the data from the server and cipher the
 data to be sent back to the server so that the server can decipher with
 its private key.
 If the client is configured to trust any certificate that have been signed
 by the signing CA, it will be able to authenticate any certificate using
 the CA public key.
\end_layout

\begin_layout Section
SSL features
\end_layout

\begin_layout Standard
The SSL package supports both PEM and DER encrypted materials.
 
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "DER (http://en.wikipedia.org/wiki/Distinguished_Encoding_Rules)"
target "http://en.wikipedia.org/wiki/Distinguished_Encoding_Rules"

\end_inset

 is an ASN.1 encoding of information, PEM (
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/Privacy_Enhanced_Mail"

\end_inset

) is a base64 encoding of a DER encoded data with a header "-----BEGIN "
 and a trailer "-----END " followed by a material type name.
 A PEM file may be de-encrypted or encrypted with AES128 or AES256 ciphers
 only.
\end_layout

\begin_layout Standard
LiteSSL also supports the pkcs8 encoding that is a private key encryption
 format.
 But it supports only one ciphering algorithm that is PBE-SHA1-RC4-128.
 Here is the command line to convert a PEM encoded private key into a pkcs8
 encoded format.
 Always use the 
\family typewriter
.p8
\family default
 file suffix to identify the pkcs8 format.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl pkcs8 -topk8 -in mykey.pem -inform PEM -out mykey.p8 
\begin_inset Newline newline
\end_inset

-outform DER -v1 PBE-SHA1-RC4-128
\end_layout

\begin_layout Standard
You will have to enter a password, that will be required to use the private
 key.
\end_layout

\begin_layout Standard
LiteSSL also supports pkcs12 that is a certificate/private key encryption
 format.
 But it supports only one ciphering algorithm that is PBE-SHA1-RC4-128.
 Here is the command line to convert certificate and its associate encoded
 private key into a pkcs12 encoded format.
 Always use the 
\family typewriter
.p12
\family default
 file suffix to identify the pkcs12 format.
\end_layout

\begin_layout Standard

\family typewriter
bash$ openssl pkcs12 -export -in server.pem -out server.p12 -name 
\begin_inset Newline newline
\end_inset

"myserver" -inkey server.key -certpbe PBE-SHA1-RC4-128 -keypbe 
\begin_inset Newline newline
\end_inset

PBE-SHA1-RC4-128
\end_layout

\begin_layout Standard
You will have to enter a password, that will be required to use the private
 key embedded in the pkcs12 encoded file.
\end_layout

\begin_layout Section
Restrictions
\end_layout

\begin_layout Standard
The Applet version is implemented on top of SUN's JSSE.
 This TLS implementation has some limitations that prevent the use of some
 security material formats supported by SSL on devices.
 Thus, private keys have to be in pkcs8 format only.
 Moreover, they can't be password protected.
 You have to add the 
\family typewriter
-nocrypt
\family default
 option to the command line provided above to convert a PEM encoded private
 key to pkcs8 encoding.
\end_layout

\begin_layout Section
SSL usage
\end_layout

\begin_layout Standard
The 
\family typewriter
SSLUtil
\family default
 class provides functions to get information about the TLS stack layer.
\end_layout

\begin_layout Standard
The first class to instantiate is 
\family typewriter
SSLClient
\family default
 or 
\family typewriter
SSLServer
\family default
 (not currently supported).
 This class represents an SSL client or server context both inheriting from
 the 
\family typewriter
SSLCTX
\family default
 class that provides many SSL context common services.
 The main feature concerns the security material loading.
 Use 
\family typewriter
objLoad()
\family default
 to load material from files or memory.
 The arguments of this function are the material type (CA, X509 certificate,
 private keys, etc), the filename or the memory containing the material,
 and finally a password for private keys loading if they are password based
 encrypted.
\end_layout

\begin_layout Standard
To succeed the handshake with a server, you have to trust its self-signed
 certificate or trust the CA certificate who signed the server's certificate.
 Use 
\family typewriter
objLoad(SSL_OBJ_X509_CACERT, “cacert.pem”, null)
\family default
 to trust the server's signing CA.
 If the server requires client authentication, you will have to send your
 own client certificate.
 Use 
\family typewriter
objLoad(SSL_OBJ_X509_CERT, “mycert.pem”, null)
\family default
 to load your client certificate and 
\family typewriter
objLoad(SSL_OBJ_RSA_KEY, 
\begin_inset Newline newline
\end_inset

“mykey.pem”, “pass”)
\family default
 to load the client certificate associated private key protected by the
 
\family typewriter
pass
\family default
 password.
\end_layout

\begin_layout Standard
Next, you have to call 
\family typewriter
connect()
\family default
 on the context instance to create an SSL instance linked with a previously
 created socket.
 The SSL handshake starts immediatly to try to establish an authenticated/cipher
ed communication.
\end_layout

\begin_layout Standard
The SSL handshake succeeded if the 
\family typewriter
connect()
\family default
 call returns an SSL instance and the
\family typewriter

\begin_inset Newline newline
\end_inset

handshakeStatus()
\family default
 function call on that instance returns 
\family typewriter
SSL_OK
\family default
.
 Consequently, you may check the subject of the peer certificate with the
 
\family typewriter
getCertificateDN()
\family default
 call to identify it and the context could be used to write and read ciphered
 data until the “dispose” call terminates the SSL communication.
 The peer receives a protocol alert to signal a link shutdown.
\end_layout

\begin_layout Standard
The SSL write of data returns the amount of bytes written or an error if
 the writing failed.
 The SSL read of data may return 
\family typewriter
SSL_OK
\family default
 that indicates that the read is not yet terminated and may be called again
 to achieve the reading of a block of decipherable data.
\end_layout

\begin_layout Chapter
e-mail
\end_layout

\begin_layout Standard
This chapter describes all classes in the 
\family typewriter
totalcross.net.mail
\family default
 package, which provides support for sending and receiving e-mails.
 
\end_layout

\begin_layout Standard
First you need to configure the SMTP properties: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MailSession session = MailSession.getDefaultInstance();
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_HOST, new Properties.Str("smtp.sample.com")); //
 SMTP host address
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_PORT, new Properties.Int(25)); // unless noticed
 otherwise by the server, SMTP uses port 25
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_USER, new Properties.Str("foo@bar.com")); // usually
 the full e-mail address
\end_layout

\begin_layout Plain Layout

session.put(MailSession.SMTP_PASS, new Properties.Str("VerySecurePassword"));
 // e-mail account password 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sending a simple e-mail message:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Message myMessage = new Message(); // our new message
\end_layout

\begin_layout Plain Layout

myMessage.from = new Address("foo@bar.com", "Mr.
 Foo"); // the e-mail address I want to be visible to the recipient and
 a personal name.
\end_layout

\begin_layout Plain Layout

myMessage.addRecipient(RecipientType.TO, new Address("someone@somewhere.com",
 null)); // the recipient of the e-mail 
\end_layout

\begin_layout Plain Layout

myMessage.subject = "Testing SMTP with authentication"; // e-mail subject
\end_layout

\begin_layout Plain Layout

myMessage.setText("This is just a test message"); // simple e-mail with plain
 text
\end_layout

\begin_layout Plain Layout

Transport.send(myMessage); // sends our message using the property Transport
 for this Message, and the properties defined on the default MailSession.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sending an e-mail with attachments: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// text part 
\end_layout

\begin_layout Plain Layout

Part textPart = new Part();
\end_layout

\begin_layout Plain Layout

textPart.setText("Plain text"); // image part
\end_layout

\begin_layout Plain Layout

Part imagePart = new Part();
\end_layout

\begin_layout Plain Layout

File image = new File("/myImage.png", File.READ_WRITE); // keep file open!
\end_layout

\begin_layout Plain Layout

imagePart.setContent(image, "image/png");
\end_layout

\begin_layout Plain Layout

imagePart.fileName = "myImage.png"; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// create the multiparts
\end_layout

\begin_layout Plain Layout

Multipart multipart = new Multipart();
\end_layout

\begin_layout Plain Layout

multipart.addPart(textPart);
\end_layout

\begin_layout Plain Layout

multipart.addPart(imagePart); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

// create the message
\end_layout

\begin_layout Plain Layout

Message myMessage = new Message();
\end_layout

\begin_layout Plain Layout

myMessage.setContent(multipart);
\end_layout

\begin_layout Plain Layout

myMessage.subject = "E-mail with attachment";
\end_layout

\begin_layout Plain Layout

myMessage.from = new Address("from@someone.com", "Someone name");
\end_layout

\begin_layout Plain Layout

myMessage.addRecipient(Message.RecipientType.TO, new Address("to@url.com", "ToMe"));
 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Transport.send(myMessage); // send the message
\end_layout

\begin_layout Plain Layout

image.close(); // close the image file AFTER the message is sent
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Receive a message, and open the first one available:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

MailSession session = MailSession.getDefaultInstance();
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_HOST, new Properties.Str("pop3.sample.com"));
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_PORT, new Properties.Int(110));
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_USER, new Properties.Str("foo@bar.com"));
\end_layout

\begin_layout Plain Layout

session.put(MailSession.POP3_PASS, new Properties.Str("VerySecurePassword"));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Store store = MailSession.getDefaultInstance().getStore("pop3");
\end_layout

\begin_layout Plain Layout

store.connect();
\end_layout

\begin_layout Plain Layout

Folder folder = store.getFolder("INBOX");
\end_layout

\begin_layout Plain Layout

folder.open();
\end_layout

\begin_layout Plain Layout

int messageCount = folder.getMessageCount();
\end_layout

\begin_layout Plain Layout

if (messageCount > 0)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	Message msg = folder.getMessage(1);
\end_layout

\begin_layout Plain Layout

	String msgContent = (String) msg.getContent();
\end_layout

\begin_layout Plain Layout

	if (msgContent != null) 
\end_layout

\begin_layout Plain Layout

		new MessageBox(msg.from.address, msgContent).popup();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\begin_layout Plain Layout

folder.close(true);
\end_layout

\begin_layout Plain Layout

store.close();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This package has the following classes, whose JavaDocs in 
\family typewriter
totalcross.net.mail
\family default
 should be read:
\end_layout

\begin_layout Section
Address 
\end_layout

\begin_layout Standard
This class represents an Internet e-mail address using the syntax of RFC822.
 Typical address syntax is of the form 
\family typewriter
user@host.domain
\family default
 or 
\family typewriter
Personal Name
\family default
 
\family typewriter
<user@host.domain>
\family default
.
 
\end_layout

\begin_layout Section
DataContentHandler 
\end_layout

\begin_layout Standard
This is an abstract class that defines the basic interface for implementations
 of 
\family typewriter

\begin_inset Newline newline
\end_inset

DataContentHandler
\family default
.
 
\end_layout

\begin_layout Section
BinaryContentHandler 
\end_layout

\begin_layout Standard
This class is an implementation of 
\family typewriter
DataContentHandler
\family default
 that handles MIME types handled as base64 encoded byte arrays.
 It also handle streams, reading from the input stream on demand to avoid
 excessive memory load.
 This will usually be slower than reading the whole content of the stream
 to a byte array and using it as the 
\family typewriter
Part
\family default
 content.
 
\end_layout

\begin_layout Section
TextContentHandler
\end_layout

\begin_layout Standard
This class is an implementation of 
\family typewriter
DataContentHandler
\family default
 that handles textual (not encoded) MIME types.
 This class is similar to the previous one, except for the fact that if
 
\family typewriter
obj
\family default
 is not a 
\family typewriter
Part
\family default
 in the 
\family typewriter
writeTo()
\family default
 method, it will be transformed into a 
\family typewriter
String
\family default
.
\end_layout

\begin_layout Section
DataHandler 
\end_layout

\begin_layout Standard
This class maps a MIME type into an instance of a 
\family typewriter
DataContentHandler
\family default
.
\end_layout

\begin_layout Section
MailSession
\end_layout

\begin_layout Standard
This class is used to store properties used by the messaging API.
 
\end_layout

\begin_layout Standard
The SMTP protocol provider supports the following properties, which may
 be set in the MailSession object.
 The properties are always set as strings; the Type column describes how
 the string is interpreted.
 For example, use 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

props.put("mail.smtp.port", "888"); 
\end_layout

\end_inset

to set the 
\family typewriter
mail.smtp.port
\family default
 property, which is of type 
\family typewriter
int
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="30text%">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.user
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default user name for SMTP.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.password
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SMTP Password for the default user name.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.host
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The SMTP server to connect to.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The SMTP server port to connect to, if the 
\family typewriter
connect()
\family default
 method doesn't explicitly specify one.
 Defaults to 25.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp .connectiontimeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket connection timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.timeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket I/O timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.from
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Email address to use for SMTP MAIL command.
 This sets the envelope return address.
 Defaults to 
\family typewriter
msg.getFrom()[0]
\family default
 or 
\family typewriter
ConnectionManager.getLocalHost()
\family default
.
 NOTE: 
\family typewriter
mail.smtp.user
\family default
 was previously used for this.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.auth
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\family typewriter
true
\family default
, attempt to authenticate the user using the AUTH command.
 Defaults to 
\family typewriter
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.starttls .enable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\family typewriter
true
\family default
, enables the use of the STARTTLS command (if supported by the server) to
 switch the connection to a TLS-protected connection before issuing any
 login commands.
 Note that an appropriate trust store must be configured so that the client
 will trust the server's certificate.
 Defaults to 
\family typewriter
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.starttls .required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
boolean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If 
\family typewriter
true
\family default
, requires the use of the STARTTLS command.
 If the server doesn't support the STARTTLS command, or the command fails,
 the connect method will fail.
 Defaults to 
\family typewriter
false
\family default
.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.ssl.port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The SMTP server port to connect to when STARTTLS is enabled, if the 
\family typewriter
connect()
\family default
 method doesn't explicitly specify one.
 Defaults to 587.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.smtp.ssl .socketFactory.class
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
If set, specifies the name of a class that extends the 
\family typewriter
totalcross.net.ssl.SSLSocketFactory
\family default
 class.
 This class will be used to create SMTP SSL sockets.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The POP3 protocol provider supports the following properties, which may
 be set in the 
\family typewriter

\begin_inset Newline newline
\end_inset

MailSession
\family default
 object.
 The properties are always set as strings; the Type column describes how
 the string is interpreted.
 For example, use 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

props.put("mail.pop3.port", "888");
\end_layout

\end_inset

to set the 
\family typewriter
mail.pop3.port
\family default
 property, which is of type 
\family typewriter
int
\family default
.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="30text%">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="50text%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.user
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Default user name for POP3.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.host
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The POP3 server to connect to.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The POP3 server port to connect to, if the 
\family typewriter
connect()
\family default
 method doesn't explicitly specify one.
 Defaults to 110.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3 .connectiontimeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket connection timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
mail.pop3.timeout
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Socket I/O timeout value in milliseconds.
 Default is infinite timeout.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Message 
\end_layout

\begin_layout Standard
This class represents a MIME style e-mail message.
 
\end_layout

\begin_layout Section
Multipart
\end_layout

\begin_layout Standard

\family typewriter
Multipart
\family default
 is a container that holds multiple body parts.
 
\end_layout

\begin_layout Section
Part
\end_layout

\begin_layout Standard
This class represents a MIME body part, which are contained by 
\family typewriter
Multipart
\family default
 objects.
 
\end_layout

\begin_layout Section
Folder
\end_layout

\begin_layout Standard

\family typewriter
Folder
\family default
 is an abstract class that represents a folder for mail messages.
 Subclasses implement protocol specific 
\family typewriter
Folder
\family default
s.
\end_layout

\begin_layout Section
Pop3Folder
\end_layout

\begin_layout Standard
A POP3 
\family typewriter
Folder
\family default
 (can only be "INBOX").
 
\end_layout

\begin_layout Section
Store
\end_layout

\begin_layout Standard
An abstract class that models a message store and its access protocol, for
 storing and retrieving messages.
 Subclasses provide actual implementations.
\end_layout

\begin_layout Section
POP3Store
\end_layout

\begin_layout Standard
A POP3 
\family typewriter
Message
\family default
 
\family typewriter
Store
\family default
.
 Contains only one folder, "INBOX".
 This class extends 
\family typewriter
Store
\family default
 with the given difference, where in 
\family typewriter
getFolder(String
\begin_inset space ~
\end_inset

name)
\family default
, only the name "INBOX" is supported.
 If another name is passed, it will return 
\family typewriter
null
\family default
.
\end_layout

\begin_layout Section
Service
\end_layout

\begin_layout Standard
An abstract class that models a messaging service and its access protocol,
 for accessing a mail session.
 Subclasses provide actual implementations.
\end_layout

\begin_layout Section
Transport
\end_layout

\begin_layout Standard
An abstract class that models a message transport which extends 
\family typewriter
Service
\family default
.
 Subclasses provide actual implementations.
\end_layout

\begin_layout Section
SMTPTransport 
\end_layout

\begin_layout Standard
This class implements the 
\family typewriter
Transport
\family default
 abstract class using SMTP for message submission and transport.
 It also doesn't have a public constructor.
 
\end_layout

\begin_layout Section
SMTPSSLTransport
\end_layout

\begin_layout Standard
This class implements the 
\family typewriter
Transport
\family default
 abstract class using SMTP for message submission and transport over secure
 sockets.
 It extends 
\family typewriter
SMTPTransport
\family default
.
 
\end_layout

\begin_layout Part
PHONE
\end_layout

\begin_layout Chapter
Dial
\end_layout

\begin_layout Standard
Used to dial a number in a smartphone.
 A single listener can receive messages from the system informing the current
 status.
 Currently works on Windows Phone 8, Android, and iOS.
 It is not possible to complete a call if there is no chip.
 The application goes to background and another window is opened.
 
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.phone.Dial
\family default
 JavaDoc.
\end_layout

\begin_layout Chapter
SMS
\end_layout

\begin_layout Standard
Class used to send and receive SMS messages.
 Currently supports Windows Phone 8 only.
 
\end_layout

\begin_layout Standard
For more details, check out 
\family typewriter
totalcross.phone.SMS
\family default
 JavaDoc.
\end_layout

\begin_layout Part
CRYPTOGRAPHY
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
TotalCross has support to cryptography in the 
\family typewriter
crypto
\family default
 package.
 For more details, take a look at the 
\family typewriter
totalcross.crypto
\family default
 package JavaDocs.
 It has three subpackages:
\end_layout

\begin_layout Itemize

\family typewriter
cipher
\family default
 Contains the cipher classes that will actually encrypt and decrypt data
 using AES and RSA.
 It has the classes: 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
AESCipher
\end_layout

\begin_layout Itemize

\family typewriter
AESKey 
\end_layout

\begin_layout Itemize

\family typewriter
Cipher 
\end_layout

\begin_layout Itemize

\family typewriter
Key 
\end_layout

\begin_layout Itemize

\family typewriter
RSACipher 
\end_layout

\begin_layout Itemize

\family typewriter
RSAPrivateKey 
\end_layout

\begin_layout Itemize

\family typewriter
RSAPublicKey
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
digest
\family default
 Implements MD5 and SHA digest algorithms.
 It has the classes: 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
Digest 
\end_layout

\begin_layout Itemize

\family typewriter
MD5Digest 
\end_layout

\begin_layout Itemize

\family typewriter
SHA1Digest 
\end_layout

\begin_layout Itemize

\family typewriter
SHA256Digest
\end_layout

\end_deeper
\begin_layout Itemize

\family typewriter
signature
\family default
 Implements PKCS1 signature algorithm.
 It has the classes: 
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
PKCS1Signature 
\end_layout

\begin_layout Itemize

\family typewriter
Signature 
\end_layout

\end_deeper
\begin_layout Chapter
Cipher
\end_layout

\begin_layout Section
Cipher 
\end_layout

\begin_layout Standard
This class provides the functionality of a cryptographic cipher for encryption
 and decryption.
 
\end_layout

\begin_layout Standard
If you get a 
\family typewriter
CryptoException: Illegal key size
\family default
, you must download strong cryptography files AFTER understanding that you
 are elligible to do so as stated in 
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
target "http://java.sun.com/j2se/1.4.2/jre/README"

\end_inset

 (search for 'Unlimited Strength Java Cryptography Extension' - installation
 instructions are inside that topic).
 
\end_layout

\begin_layout Standard
There is a sample for the class 
\family typewriter
Cipher
\family default
, its subclasses and auxiliar classes in 
\family typewriter
tc.samples.
 crypto.cipher.CipherTest
\family default
.
 
\end_layout

\begin_layout Section
AESCipher 
\end_layout

\begin_layout Standard
This class implements the AES cryptographic cipher.
 
\end_layout

\begin_layout Standard
The Advanced Encryption Standard (AES) is a specification for the encryption
 of electronic data established by the U.S.
 National Institute of Standards and Technology (NIST) in 2002.
 The algorithm described by AES is a symmetric-key algorithm, meaning the
 same key is used for both encrypting and decrypting the data.
 AES is based on a design principle known as a substitution-permutation
 network, and is fast in both software and hardware.
 More information can be found in 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/Advanced_Encryption_Standard"

\end_inset

.
\end_layout

\begin_layout Section
RSACipher 
\end_layout

\begin_layout Standard
This class implements the RSA cryptographic cipher.
 It is similar to 
\family typewriter
AESCipher
\family default
.
\end_layout

\begin_layout Standard
RSA is an algorithm for public-key cryptography that is based on the presumed
 difficulty of factoring large integers, the factoring problem.
 RSA stands for Ron Rivest, Adi Shamir and Leonard Adleman, who first publicly
 described it in 1977.
 A user of RSA creates and then publishes the product of two large prime
 numbers, along with an auxiliary value, as their public key.
 The prime factors must be kept secret.
 Anyone can use the public key to encrypt a message, but with currently
 published methods, if the public key is large enough, only someone with
 knowledge of the prime factors can feasibly decode the message.
 Whether breaking RSA encryption is as hard as factoring is an open question
 known as the RSA problem.
 More information can be found in 
\begin_inset CommandInset href
LatexCommand href
target "http://en.wikipedia.org/wiki/RSA"

\end_inset

.
\end_layout

\begin_layout Section
Key
\end_layout

\begin_layout Standard
This class defines a cryptographic cipher key for type safety.
 
\end_layout

\begin_layout Section
AESKey 
\end_layout

\begin_layout Standard
This class implements the AES cryptographic cipher key.
 It extends 
\family typewriter
Key
\family default
.
\end_layout

\begin_layout Section
RSAPrivateKey 
\end_layout

\begin_layout Standard
This class implements the RSA cryptographic cipher private key.
 It extends 
\family typewriter
Key
\family default
.
\end_layout

\begin_layout Section
RSAPublicKey
\end_layout

\begin_layout Standard
This class implements the RSA cryptographic cipher public key.
 It extends 
\family typewriter
Key
\family default
.
\end_layout

\begin_layout Chapter
Digest
\end_layout

\begin_layout Section
Digest
\end_layout

\begin_layout Standard
This class provides the functionality of a message digest algorithm.
 
\end_layout

\begin_layout Standard
There is a sample for its classes in 
\family typewriter
tc.samples.crypto.digest.DigestTest
\family default
.
\end_layout

\begin_layout Section
MD5Digest 
\end_layout

\begin_layout Standard
This class implements the MD5 message digest algorithm.
 
\end_layout

\begin_layout Standard
It extends 
\family typewriter
Digest
\family default
.
\end_layout

\begin_layout Standard
The MD5 Message-Digest Algorithm is a widely used cryptographic hash function
 that produces a 128-bit (16-byte) hash value.
 MD5 has been employed in a wide variety of security applications, and is
 also commonly used to check data integrity.
 
\end_layout

\begin_layout Section
SHA1Digest 
\end_layout

\begin_layout Standard
This class implements the SHA-1 message digest algorithm.
 It is similar to 
\family typewriter
MD5Digest
\family default
.
\end_layout

\begin_layout Standard
In cryptography, SHA-1 is a cryptographic hash function.
 SHA stands for "secure hash algorithm".
 The three SHA algorithms are structured differently and are distinguished
 as SHA-0, SHA-1, and SHA-2.
 SHA-1 is very similar to SHA-0, but corrects an error in the original SHA
 hash specification that led to significant weaknesses.
 The SHA-0 algorithm was not adopted by many applications.
 SHA-2 on the other hand significantly differs from the SHA-1 hash function.
\end_layout

\begin_layout Standard
SHA-1 is the most widely used of the existing SHA hash functions, and is
 employed in several widely used applications and protocols, including TLS
 and SSL, PGP, SSH, S/MIME, and IPsec.
 
\end_layout

\begin_layout Section
SHA256Digest 
\end_layout

\begin_layout Standard
This class implements the SHA-256 message digest algorithm.
 It is similar to 
\family typewriter
MD5Digest
\family default
.
\end_layout

\begin_layout Standard
SHA-256 is part of a family of two similar hash functions with different
 block sizes, known as SHA-256 and SHA-512.
 They differ in the word size; SHA-256 uses 32-bit words where SHA-512 uses
 64-bit words.
 There are also truncated versions of each standardized, known as SHA-224
 and SHA-384.
 All of them are part of the SHA-2.
\end_layout

\begin_layout Chapter
Signature 
\end_layout

\begin_layout Section
Signature
\end_layout

\begin_layout Standard
This class provides the functionality of a signature algorithm for signing
 and verifying.
\end_layout

\begin_layout Section
PKCS1Signature 
\end_layout

\begin_layout Standard
This class implements the PKCS #1 signature algorithm.
 
\end_layout

\begin_layout Standard
It extends 
\family typewriter
Signature
\family default
 and there is a sample for its use in 
\family typewriter
tc.samples.crypto.signature.
\begin_inset Newline newline
\end_inset

SignatureTest
\family default
.
\end_layout

\begin_layout Part
BLUETOOTH
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
This package describes the classes to use Bluetooth.
\end_layout

\begin_layout Standard
In what follows, the classes 
\family typewriter
SerialPortClient
\family default
 and 
\family typewriter
SerialPortServer
\family default
 are not described since they are just simple subclasses of 
\family typewriter
Stream
\family default
 and 
\family typewriter
StreamConnectionNotifier
\family default
, respectively.
 
\end_layout

\begin_layout Standard
For more details, check out the 
\family typewriter
totalcross.io.device.bluetooth
\family default
 package JavaDocs.
\end_layout

\begin_layout Chapter
DataElement
\end_layout

\begin_layout Standard
This class is defined by the JSR-82 specification Java™ APIs for Bluetooth™
 Wireless Technology, Version 1.1.
 
\end_layout

\begin_layout Chapter
DeviceClass
\end_layout

\begin_layout Standard

\family typewriter
DeviceClass
\family default
 represents the class of device (CoD) record as defined by the Bluetooth
 specification.
 This record is defined in the Bluetooth Assigned Numbers document and contains
 information on the type of the device and the type of services available
 on the device.
 
\end_layout

\begin_layout Standard
The Bluetooth Assigned Numbers document 
\begin_inset Newline newline
\end_inset

(
\begin_inset CommandInset href
LatexCommand href
target "http://www.bluetooth.org/assigned-numbers/sdp.htm"

\end_inset

) defines the service class, major device class, and minor device class.
 The table below provides some examples of possible return values and their
 meaning:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="40col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Method
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Return Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Class of Device
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getServiceClasses()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x22000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Networking and Limited Discoverable Major Service Classes
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getServiceClasses()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x100000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Object Transfer Major Service Class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getMajorDeviceClass()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x00
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Miscellaneous Major Device Class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getMajorDeviceClass()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x200
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Phone Major Device Class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getMinorDeviceClass()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
With a Computer Major Device Class, Laptop Minor Device Class
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
getMinorDeviceClass()
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x04
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
With a Phone Major Device Class, Cellular Minor Device Class
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
DiscoveryAgent
\end_layout

\begin_layout Standard
The 
\family typewriter
DiscoveryAgent
\family default
 class provides methods to perform device and service discovery.
 A local device must have only one 
\family typewriter
DiscoveryAgent
\family default
 object.
 This object must be retrieved by a call to 
\family typewriter
getDiscoveryAgent()
\family default
 on the 
\family typewriter
LocalDevice
\family default
 object.
 
\end_layout

\begin_layout Chapter
RemoteDevice 
\end_layout

\begin_layout Standard
The 
\family typewriter
RemoteDevice
\family default
 class represents a remote Bluetooth device.
 It provides basic information about a remote device including the device's
 Bluetooth address and its friendly name.
 
\end_layout

\begin_layout Chapter
ServiceRecord 
\end_layout

\begin_layout Standard
The 
\family typewriter
ServiceRecord
\family default
 class describes characteristics of a Bluetooth service.
 A 
\family typewriter
ServiceRecord
\family default
 object contains a set of service attributes, where each service attribute
 is an (ID, value) pair.
 A Bluetooth attribute ID is a 16-bit unsigned integer, and an attribute
 value is a 
\family typewriter
DataElement
\family default
.
 
\end_layout

\begin_layout Standard
The structure and use of service records is specified by the Bluetooth specifica
tion in the Service Discovery Protocol (SDP) document.
 Most of the Bluetooth Profile specifications also describe the structure
 of the service records used by the Bluetooth services that conform to the
 profile.
 
\end_layout

\begin_layout Standard
An SDP Server maintains a Service Discovery Database (SDDB) of service records
 that describe the services on the local device.
 Remote SDP clients can use the SDP to query an SDP server for any service
 records of interest.
 A service record provides sufficient information to allow an SDP client
 to connect to the Bluetooth service on the SDP server's device.
 
\end_layout

\begin_layout Standard

\family typewriter
ServiceRecord
\family default
s are made available to a client application via an argument of the
\family typewriter

\begin_inset Newline newline
\end_inset

DiscoveryListener.servicesDiscovered(int, ServiceRecord[])
\family default
 method of the 
\family typewriter

\begin_inset Newline newline
\end_inset

DiscoveryListener
\family default
 interface.
 
\family typewriter
ServiceRecord
\family default
s are available to server applications via the method 
\family typewriter
LocalDevice.getRecord(Connection)
\family default
.
 
\end_layout

\begin_layout Standard
There might be many service attributes in a service record, and the SDP
 protocol makes it possible to specify the subset of the service attributes
 that an SDP client wants to retrieve from a remote service record.
 The 
\family typewriter
ServiceRecord
\family default
 interface treats certain service attribute IDs as default IDs, and, if
 present, these service attributes are automatically retrieved during service
 searches.
 
\end_layout

\begin_layout Standard
The Bluetooth Assigned Numbers document 
\begin_inset Newline newline
\end_inset

(
\begin_inset CommandInset href
LatexCommand href
target "http://www.bluetooth.org/assigned-numbers/sdp.htm"

\end_inset

) defines a large number of service attribute IDs.
 Here is a subset of the most common service attribute IDs and their types.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="16" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="35line%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute ID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute Value Type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceRecordHandle
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-bit unsigned integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceClassIDList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATSEQ of UUIDs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceRecordState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0002
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-bit unsigned integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0003
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
UUID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ProtocolDescriptorList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0004
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATSEQ of DATSEQ of 
\end_layout

\begin_layout Plain Layout
UUID and optional parameters
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
BrowseGroupList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATSEQ of UUIDs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LanguageBasedAttributeIDList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0006
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATSEQ of DATSEQ triples
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceInfoTimeToLive
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0007
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-bit unsigned integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceAvailability
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0008
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8-bit unsigned integer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
BluetoothProfileDescriptorList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0009
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATSEQ of DATSEQ pairs
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DocumentationURL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x000A
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
URL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ClientExecutableURL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x000B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
URL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
IconURL
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x000C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
URL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
VersionNumberList
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0200
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DATSEQ of 16-bit unsigned integers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceDatabaseState
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0201
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
32-bit unsigned integer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
The following table lists the common string-valued attribute ID offsets
 used in a 
\family typewriter

\begin_inset Newline newline
\end_inset

ServiceRecord
\family default
.
 These offsets must be added to a base value to obtain the actual service
 ID (for more information, see the Service Discovery Protocol Specification
 located in the Bluetooth Core Specification):
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute ID Offset
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attribute Value Type
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceName
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ServiceDescription
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ProviderName
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0002
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Chapter
UUID
\end_layout

\begin_layout Standard
The 
\family typewriter
UUID
\family default
 class defines universally unique identifiers.
 These 128-bit unsigned integers are guaranteed to be unique across all
 time and space.
 Accordingly, an instance of this class is immutable.
 The Bluetooth specification provides an algorithm describing how a 16-bit
 or 32-bit UUID could be promoted to a 128-bit UUID.
 Accordingly, this class provides an interface that assists applications
 in creating 16-bit, 32-bit, and 128-bit long UUIDs.
 The methods supported by this class allow equality testing of two UUID
 objects.
 
\end_layout

\begin_layout Standard
The Bluetooth Assigned Numbers document 
\begin_inset Newline newline
\end_inset

(
\begin_inset CommandInset href
LatexCommand href
target "http://www.bluetooth.org/assigned-numbers/sdp.htm"

\end_inset

) defines a large number of UUIDs for protocols and service classes.
 The table below provides a short list of the most common UUIDs defined
 in the Bluetooth Assigned Numbers document.
 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="40text%">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0pt">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Size
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Base UUID Value (Used in 
\end_layout

\begin_layout Plain Layout
promoting 16-bit and 32-bit 
\end_layout

\begin_layout Plain Layout
UUIDs to 128-bit UUIDs)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0000000000001000800000805F9B34FB
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
128-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SDP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
RFCOMM
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0003
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OBEX
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0008
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTTP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x000C
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
L2CAP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x0100
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BNEP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x000F
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Serial Port
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1101
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ServiceDiscoveryServerServiceClassID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1000
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
BrowseGroupDescriptorServiceClassID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1001
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PublicBrowseGroup
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1002
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OBEX Object Push Profile
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1105
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
OBEX File Transfer Profile
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1106
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Personal Area Networking User
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1115
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Network Access Point
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1116
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Group Network
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
0x1117
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16-bit
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Part
BLUETOOTH PRINTERS
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
This part describes classes used to send commands to Bluetooth printers.
 For more details, check out the
\family typewriter
 totalcross.io.device.printer
\family default
 package JavaDocs.
\end_layout

\begin_layout Chapter
BluetoothPrinter
\end_layout

\begin_layout Standard
Used as interface to printers that uses Bluetooth as default to communicate
 with the device.
 Altough the class has this name, you can use any port a 
\family typewriter
PortConnector
\family default
 and your device and printer support, such as USB.
 
\end_layout

\begin_layout Standard
Note: during tests, we found that some printers require to fill their buffer
 to start printing.
 So, if you have problems printing, try the following code after you instantiate
 this class: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cp = new BluetoothPrinter(); 
\end_layout

\begin_layout Plain Layout

cp.write(new byte[2048]); // fill the buffer 
\end_layout

\begin_layout Plain Layout

cp.newLine(); 
\end_layout

\begin_layout Plain Layout

...
 
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
CitizenPrinter
\end_layout

\begin_layout Standard
This class extends 
\family typewriter
BluetoothPrinter
\family default
 to send special Citizen-like commands to the printer.
 Tested with Citizen CMP-10 thermal printer.
 Similar to its superclass, the connection with the printer may use any
 supported port, not necessarily Bluetooth.
\end_layout

\begin_layout Standard
Instructions of how to setup the devices to work with the printer.
 
\end_layout

\begin_layout Enumerate
First, run the self-test: turning the printer off, and pressing the LF +
 ON button at the same time and then releasing the LF button.
 
\end_layout

\begin_layout Enumerate
Write down the last 2 bytes (4 letters) of the ADDRESS (e.g.: A4 08) 
\end_layout

\begin_layout Enumerate
Discover the "Citizen Systems" printer with the device.
 
\end_layout

\begin_layout Enumerate
When asked for the PIN (password), write the last 4 letters of the address
 in UPPER CASE (e.g.: A408); if it fails, write it in lower case (e.g.: a408).
 
\end_layout

\begin_layout Enumerate
That's it.
 On some devices, you can choose to always use this printer as default bluetooth
 device.
 
\end_layout

\begin_layout Chapter
MonoImage
\end_layout

\begin_layout Standard

\family typewriter
Image
\family default
 class that can be used to save 1-bpp images and print on monochromatic
 printers.
 Only black pixels are printed, non-black are ignored.
 
\end_layout

\begin_layout Part
XML
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
The following chapters describes the 
\family typewriter
totalcross.xml
\family default
 and 
\family typewriter
totalcross.xml.rpc
\family default
 packages.
 For more details, check out their classes JavaDocs.
\end_layout

\begin_layout Chapter
totalcross.xml
\end_layout

\begin_layout Standard
The root of the package 
\family typewriter
totalcross.xml
\family default
 has classes for tokenizing a XML file.
 It has the following classes:
\end_layout

\begin_layout Section
XmlTokenizer 
\end_layout

\begin_layout Standard
A Tokenizer for XML input.
 In non-strict mode (default), it recognizes HTML constructs as well, e.g.:
 unquoted attributes value, unterminated references, etc.
 
\end_layout

\begin_layout Standard
Four 
\family typewriter
tokenize()
\family default
 methods are provided: one takes a 
\family typewriter
byte[]
\family default
 array; another takes a 
\family typewriter
byte[]
\family default
 array with offset and count; another one for an HTML document which is
 embedded within an HTTP stream; and the last takes a (byte) 
\family typewriter
Stream
\family default
.
 
\end_layout

\begin_layout Standard
Tokenization events are reported via overridable methods: 
\end_layout

\begin_layout Itemize

\family typewriter
foundStartOfInput() 
\end_layout

\begin_layout Itemize

\family typewriter
foundStartTagName() 
\end_layout

\begin_layout Itemize

\family typewriter
foundEndTagName() 
\end_layout

\begin_layout Itemize

\family typewriter
foundEndEmptyTag() 
\end_layout

\begin_layout Itemize

\family typewriter
foundCharacterData() 
\end_layout

\begin_layout Itemize

\family typewriter
foundCharacter() 
\end_layout

\begin_layout Itemize

\family typewriter
foundAttributeName() 
\end_layout

\begin_layout Itemize

\family typewriter
foundAttributeValue() 
\end_layout

\begin_layout Itemize

\family typewriter
foundComment() 
\end_layout

\begin_layout Itemize

\family typewriter
foundProcessingInstruction() 
\end_layout

\begin_layout Itemize

\family typewriter
foundDeclaration() 
\end_layout

\begin_layout Itemize

\family typewriter
foundReference() 
\end_layout

\begin_layout Itemize

\family typewriter
foundEndOfInput() 
\end_layout

\begin_layout Standard
Some of these methods pass the parameters pertinent to the kind of tokenized
 events: tag name, attribute name and value...
 These values are only valid for the time the event is reported.
 Never assume that, after returning from a 
\family typewriter
foundXxx()
\family default
 method, the information that was reported is still available! Persistent
 values are however provided through the 
\family typewriter
getAbsoluteOffset()
\family default
 method, which returns the absolute offset of the current parameters of
 the 
\family typewriter
foundXxx()
\family default
 method.
 
\end_layout

\begin_layout Standard
Typical invocation taken from its dumb subclass 
\family typewriter
DumpXml
\family default
, ommited from this manual for obvious reasons:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class XmlTokenizerTest
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	static class MyXmlTokenizer extends XmlTokenizer
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		public void foundStartOfInput(byte buffer[], int offset, int count)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("Start: " + new String(buffer, offset, count));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public void foundStartTagName(byte buffer[], int offset, int count)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("StartTagName: " + new String(buffer, offset, count));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public void foundEndTagName(byte buffer[], int offset, int count)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("EndTagName: " + new String(buffer, offset, count));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public void foundEndEmptyTag()
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("EndEmptyTag");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public void foundCharacterData(byte buffer[], int offset, int count)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("Content: " + new String(buffer, offset, count));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public void foundCharacter(char charFound)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("Content Ref  |" + charFound + '|');
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

		public void foundAttributeName(byte buffer[], int offset, int count)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("AttributeName: " + new String(buffer, offset, count));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public void foundAttributeValue(byte buffer[], int offset, int count,
 byte dlm)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("AttributeValue: " + new String(buffer, offset, count));
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		public void foundEndOfInput(int count)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug("Ended: " + count + " bytes parsed.");
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void testMe()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		String input = "<p>Hello<i>World!</i></p>";
\end_layout

\begin_layout Plain Layout

		MyXmlTokenizer xtk = new MyXmlTokenizer();
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			xtk.tokenize(input.getBytes());
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (SyntaxException ex)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			Vm.debug(ex.getMessage());
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}  
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note: A Tokenizer is not a Parser.
 The correctness of the tag structure (stack) is not examined.
 Ex: the dangling markup 
\family typewriter
<foo><bar>opop</foo>
\family default
 is syntactically valid.
 As a result, a Tokenizer can work on document fragments.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
XmlReader
\end_layout

\begin_layout Standard
This class extends 
\family typewriter
XmlTokenizer
\family default
 and is used to read HTML or XML documents, reporting events to handlers
 (for example, the class 
\family typewriter
ContentHandler
\family default
 described below).
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note: While in the SAX 2.0 spirit, this implementation is not fully compliant.
 Speed and footprint took precedence over what the author judged being details.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Unlike SAX, reporting tag names, like in 
\family typewriter
ContentHandler.startElement()
\family default
, passes an integral tag code rather than the name itself.
 This is, again, for performance reasons.
 Comparing integers vs.
 string is notably more efficient and tag name comparison is heavily used
 for XML applications.
 
\end_layout

\begin_layout Standard
The tag code must uniquely identify the name of the tag.
 The default implementation — see 
\family typewriter
getTagCode()
\family default
 — simply consists to hash the tag name.
 It can be overriden to suit specific needs.
 
\end_layout

\begin_layout Standard
Tag names should be translated to tag codes as soon are they are known,
 when reading the DTD for instance, or computed in advance and saved into
 a static correspondence table.
\end_layout

\begin_layout Section
XmlReadable
\end_layout

\begin_layout Standard

\family typewriter
XmlReadable
\family default
 is an interface that abstracts any sequential resource that can be passed
 to an 
\family typewriter
XmlReader
\family default
.
 A class that implements this interface must have the following methods:
\end_layout

\begin_layout Itemize

\family typewriter
readXml(XmlReader
\begin_inset space ~
\end_inset

rdr) 
\family default
Reads the 
\family typewriter
XmlReadable
\family default
 through an 
\family typewriter
XmlReader
\family default
 parser, where 
\family typewriter
rdr
\family default
 is the 
\family typewriter
XmlReader
\family default
 that will report the SAX events.
 
\end_layout

\begin_layout Itemize

\family typewriter
getBaseURI()
\family default
 Gets the base URI attached to the 
\family typewriter
XmlReadable
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
setCaseInsensitive(boolean
\begin_inset space ~
\end_inset

caseInsensitive)
\family default
 Pass 
\family typewriter
true
\family default
 if you want the
\family typewriter

\begin_inset Newline newline
\end_inset

XmlReader
\family default
 attached object to be case insensitive.
\end_layout

\begin_layout Section
XmlReadableSocket
\end_layout

\begin_layout Standard
An 
\family typewriter
XmlReadableSocket
\family default
 implements 
\family typewriter
XmlReadable
\family default
 and has a 
\family typewriter
Socket
\family default
 stream that takes care of the HTTP headers and starts reading at the message
 body.
\end_layout

\begin_layout Section
XmlReadableByteArray 
\end_layout

\begin_layout Standard
This class makes an 
\family typewriter
XmlReadable
\family default
 from a byte array.
\end_layout

\begin_layout Section
XmlReadableFile 
\end_layout

\begin_layout Standard
This class makes an 
\family typewriter
XmlReadable
\family default
 from a 
\family typewriter
File
\family default
 extending 
\family typewriter
XmlReadableByteArray
\family default
.
 
\end_layout

\begin_layout Standard
Example: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

XmlReader rdr = new XmlReader();
\end_layout

\begin_layout Plain Layout

rdr.setContentHandler(...);
\end_layout

\begin_layout Plain Layout

File f = new File(...);
\end_layout

\begin_layout Plain Layout

rdr.parse(new XmlReadableFile(f)); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
XmlReadablePort 
\end_layout

\begin_layout Standard
This class makes an 
\family typewriter
XmlReadable
\family default
 from a 
\family typewriter
PortConnector
\family default
 extending 
\family typewriter
XmlReadableByteArray
\family default
.
 It can only be used on Windows 32 and Java SE.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

XmlReader rdr = new XmlReader();
\end_layout

\begin_layout Plain Layout

rdr.setContentHandler(...);
\end_layout

\begin_layout Plain Layout

rdr.parse(new XmlReadablePort(PortConnector.DEFAULT, 19200)); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
XmlReadableString 
\end_layout

\begin_layout Standard
This class makes an 
\family typewriter
XmlReadable
\family default
 from a 
\family typewriter
String
\family default
 extending 
\family typewriter
XmlReadableByteArray
\family default
.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

XmlReader rdr = new XmlReader();
\end_layout

\begin_layout Plain Layout

rdr.setContentHandler(...);
\end_layout

\begin_layout Plain Layout

rdr.parse(new XmlReadableString("Hello World!")); 
\end_layout

\end_inset


\end_layout

\begin_layout Section
AttributeList
\end_layout

\begin_layout Standard
This class describes the attributes attached to a start-tag.
 Tags are case-insensitive.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
AttributeListIterator
\family default
 class provides an iterator over the components of each attribute in an
 
\family typewriter
AttributeList
\family default
 instance: 
\end_layout

\begin_layout Itemize
the attribute name 
\end_layout

\begin_layout Itemize
the unquoted value 
\end_layout

\begin_layout Itemize
the quote, if one exist 
\end_layout

\begin_layout Section
ContentHandler
\end_layout

\begin_layout Standard
This class receives notification of the logical content of a document.
 
\end_layout

\begin_layout Standard
This is the main interface that most SAX applications implement: if the
 application needs to be informed of basic parsing events, it implements
 this interface and registers an instance with the XML reader using the
 
\family typewriter
XmlReader.setContentHandler(ContentHandler)
\family default
 method.
 The XML reader uses the instance to report basic document-related events
 like the start and end of elements and character data.
\end_layout

\begin_layout Standard
The order of events in this interface is very important, and mirrors the
 order of information in the document itself.
 For example, all of an element's content (character data, processing instructio
ns, and/or subelements) will appear, in order, between the 
\family typewriter
startElement()
\family default
 event and the corresponding 
\family typewriter
endElement()
\family default
 event.
\end_layout

\begin_layout Chapter
totalcross.xml.rpc
\end_layout

\begin_layout Standard
This chapter describes classes for a remote procedure call (RPC) client
 that uses XML.
 
\end_layout

\begin_layout Section
StandardHttpClient 
\end_layout

\begin_layout Standard
This class provides client-side HTTP communication.
 
\end_layout

\begin_layout Section
CompressedHttpClient 
\end_layout

\begin_layout Standard
This is a subclass of the above class and has a similar behavior, except
 that it uses compression.
 
\end_layout

\begin_layout Section
XmlRpcClient
\end_layout

\begin_layout Standard
This class is an 
\family typewriter
XmlReader
\family default
 and handles XML-RPCs to a server.
 Its objects cannot be reused.
 
\end_layout

\begin_layout Section
XmlRpcContentHandler 
\end_layout

\begin_layout Standard
This class extends 
\family typewriter
ContentHandler
\family default
 and its methods are called by the XML parser used in 
\family typewriter
XmlRpcClient
\family default
.
\end_layout

\begin_layout Section
XmlRpcValue 
\end_layout

\begin_layout Standard
This class is used to represent an XML-RPC value while a request is being
 parsed.
\end_layout

\begin_layout Section
XmlWriter
\end_layout

\begin_layout Standard
This class correctly formats strings in XML syntax.
 Currently only supports ISO-8859-1 encoding of XML.
 
\end_layout

\begin_layout Part
BARCODE SCANNER
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
In this part, two ways of decoding information from a barcode will be seen.
\end_layout

\begin_layout Chapter
Scanner
\end_layout

\begin_layout Standard
The 
\family typewriter
totalcross.io.device.Scanner
\family default
 class allows the usage of the barcode reader of some of the most popular
 scanners.
\end_layout

\begin_layout Standard
For TotalCross 3.0 only Intermec Android scanner is supported.
\end_layout

\begin_layout Standard
Scanner access is only available when running on a native TotalCross VM;
 it is not supported when running on Java.
 It is, though, emulated on Java: a popup dialog will ask you for a barcode
 symbol which will be returned every time the 
\family typewriter
getData()
\family default
 method is called.
 
\end_layout

\begin_layout Standard
Since there is only one scanner per device, the 
\family typewriter
Scanner
\family default
 class is static.
 Activating the scanner causes the physical scanner to be powered, and enables
 the trigger.
 Deactivating the scanner removes the power from the scanner and prevents
 scans from taking place.
 The scanner should always be deactivated at the end of processing to prevent
 excessive battery drain.
 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note that if the scanner is deactivate in the device settings, you won't
 be able to activate it using the application.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
When the scanner is activated, scan events will appear in the 
\family typewriter
MainWindow
\family default
's 
\family typewriter
onEvent()
\family default
 method.
 The scan events will contain a string describing either the item scanned
 or a battery error.
 Deactivating the scanner prevents scan events from being delivered.
 If you want that another class fetches the scanner events, you should pass
 a control as a listener and fetch them in its 
\family typewriter
onEvent()
\family default
 method.
 If it is a window, it should be opened using 
\family typewriter
popupNonBlocking()
\family default
.
\end_layout

\begin_layout Standard
You can change this behaviour on some devices by calling 
\family typewriter
setContinuousScanning(
\begin_inset Newline newline
\end_inset

false)
\family default
, which will cause each call to 
\family typewriter
activate()
\family default
 to only allow a single scan.
 
\end_layout

\begin_layout Standard
Since barcodes can have many formats, this class includes a method to register
 the barcode types with the scanner.
 These types must each be individually set as parameters to the scanner.
 After all the parameter types have been set, the 
\family typewriter
commitBarcodeParams()
\family default
 method must be called to register the parameters with the scanner (this
 is not necessary on Intermec Android).
 Once this is done the scanner is able to decode the specified barcode types.
 
\end_layout

\begin_layout Standard
A typical processing sequence is given below: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (!Scanner.activate() 
\end_layout

\begin_layout Plain Layout

 || !Scanner.setBarcodeParam(Scanner...., true)
\end_layout

\begin_layout Plain Layout

 || !Scanner.setBarcodeParam(Scanner...., true)
\end_layout

\begin_layout Plain Layout

 || !Scanner.commitBarcodeParams()) 
\end_layout

\begin_layout Plain Layout

	return; 
\end_layout

\begin_layout Plain Layout

...
 
\end_layout

\begin_layout Plain Layout

if (!Scanner.deactivate()) 
\end_layout

\begin_layout Plain Layout

	return;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
Note: the Java emulation works the same as on device.
 On Java activating the scanner only schedules a single scan.
 
\begin_inset Newline newline
\end_inset

We obviously need this class to behave in the same way on both platforms.
 Rather than forcing one choice on the user, the 
\family typewriter
continuousScanning
\family default
 flag allows the user to choose which mode they want.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For more details, take a look at 
\family typewriter
totalcross.io.device.scanner.Scanner
\family default
 and 
\family typewriter
totalcross.
\begin_inset Newline newline
\end_inset

io.device.scanner.ScanEvent
\family default
 JavaDocs.
\end_layout

\begin_layout Chapter
ZXing
\end_layout

\begin_layout Standard
The classes in the package 
\family typewriter
totalcross.zxing
\family default
 can be used to decode an image of a barcode in some format into the string
 it encodes.
 The sample 
\family typewriter
tc.samples.io.device.zxing.
\begin_inset Newline newline
\end_inset

ZXingScanner
\family default
 shows how to use it.
\end_layout

\begin_layout Part
OPTIMIZATION TRICKS
\end_layout

\begin_layout Chapter*
Overview
\end_layout

\begin_layout Standard
The purpose of this small, but highly important chapter, is to teach you
 how to improve your Java application's speed.
\end_layout

\begin_layout Standard
The TotalCross VM has an interpreter, which makes it a little slow for certain
 types of applications.
 It is not feasible to program in the same way for 1 GHz (a typical mobile
 device processor) and 3 GHz processors (a typical desktop processor).
 Moreover, a desktop has much more RAM.
 By following the tricks presented in this tutorial, you'll be able to improve
 your application's performance.
 
\end_layout

\begin_layout Standard
These tips and tricks can make a very big difference in speed not only when
 running your program on mobile devices, but also on desktop systems.
 Most of them can be used in any Java environment, and are actually referenced
 in other books and tutorials, but others are explicitly TotalCross optimization
 tricks.
\end_layout

\begin_layout Standard
There are some proof timings (measured in microseconds – µ = 1 second /
 1,000,000) near a clock bullet.
 They are always shown per iteration, ie, taken the total time and divided
 by the number or iterations.
 All tests were performed on the following devices:
\end_layout

\begin_layout Itemize
Windows 8.1, iCore 5, 2 x 2.80 GHz, 5 Gb RAM, 192 Gb disk size - named Win
\end_layout

\begin_layout Itemize
Android 4.4.2, Motorola Moto G, 4 x 1.2 GHz, 1 Gb RAM, 16 Gb disk size - named
 Android
\end_layout

\begin_layout Itemize
iPhone 7.0.6, iPhone 4 S, 2 x 800 MHz, 512 Mb RAM, 8 Gb disk size - named
 iPhone
\end_layout

\begin_layout Chapter
The Tricks
\end_layout

\begin_layout Enumerate
Avoid method calls.
 Method calls in TotalCross (and, actually, in any platform or virtual machine)
 are extremely expensive when comparing to in-lined code.
 This is the most important optimization trick and several other tricks
 inherit from this one.
 Lets see some common mistakes that people make:
\end_layout

\begin_deeper
\begin_layout Enumerate
Don't use method calls as the stop condition in for loops (assume 
\family typewriter
v
\family default
 is a 
\family typewriter
Vector
\family default
):
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i =0; i < v.size(); i++)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.00, Android: 00.67, iPhone: 00.47
\end_layout

\begin_layout Standard
You can change it in a couple of ways:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int n = v.size();
\end_layout

\begin_layout Plain Layout

for (int i=0; i < n; i++)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.00, Android: 00.27, iPhone: 00.20
\end_layout

\begin_layout Standard
...
 if the order of the loop matters, or
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i=v.size()-1; i >= 0; i--)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.40, Android: 00.20, iPhone: 00.13
\end_layout

\begin_layout Standard
...
 if the order of the loop doesn't matter.
\end_layout

\begin_layout Standard
The same care can be taken with an array's 
\family typewriter
length
\family default
 property.
 It always takes extra time to get the field, so it's better to assign it
 to a temporary variable and use it in the loop, or use the previous suggestions.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i =0; i < items.length; i++)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.00, Android: 00.20, iPhone: 00.20
\end_layout

\end_deeper
\begin_layout Enumerate
Avoid using get and set methods.
 This may go against standard object oriented practices, but in small devices
 it is necessary that you avoid this.
 If you have a simple member that is protected or private, and is set and
 get by using something like: 
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

protected String s;
\end_layout

\begin_layout Plain Layout

public void setS(String newS) {s = newS;}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.11, Android: 00.51, iPhone: 00.44
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public String getS() {return s;}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.08, Android: 00.46, iPhone: 00.38
\end_layout

\begin_layout Standard
It will be better to make the member public and access it directly:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public String s;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
direct set (
\family typewriter
s = ...
\family default
): Win: 00.02, Android: 00.14, iPhone: 00.13
\end_layout

\begin_layout Standard
direct get (
\family typewriter
...
 = s
\family default
): Win: 00.02, Android: 00.19, iPhone: 00.15
\end_layout

\begin_layout Standard
Note about final classes: in the first JDK versions (up to 1.1.x), making
 the get/set methods final or making the whole class final would make the
 compiler inline the methods when using the 
\family typewriter
-O
\family default
 compiler option.
 From JDK 1.2.x and beyond this no longer holds true.
 We plan, however, to make the TotalCross' deployer inline methods, thus
 re-allowing the programmer to use get/set methods.
\end_layout

\end_deeper
\begin_layout Enumerate
Any other methods that are used in a loop are good candidates to be inlined
 directly.
 But please have good sense when doing this.
 There's no need to inline all your program in one big block.
 Just make sure you optimize the very inner loop and that's it.
\end_layout

\end_deeper
\begin_layout Enumerate
Avoid using Interfaces.
 If you have an interface that is frequently used (maybe in a loop) in your
 application, change it to an abstract class, if possible.
 This is necessary because interface methods cannot be dynamically bound
 by the VM, thus each method call must be looked up in the methods table
 each time it is called.
 In normal and in abstract classes, the method is looked up only once and
 then its address is bound and used in all subsequent calls.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring abstract classes0
interfaces Win: 00.20, Android: 01.16, iPhone: 01.76
\end_layout

\begin_layout Labeling
\labelwidthstring abstract classes0
abstract
\begin_inset space ~
\end_inset

classes Win: 00.05, Android: 00.49, iPhone: 00.40
\end_layout

\begin_layout Labeling
\labelwidthstring abstract classes0
normal
\begin_inset space ~
\end_inset

classes Win: 00.06, Android: 00.48, iPhone: 00.40
\end_layout

\end_deeper
\begin_layout Enumerate
Use arithmetic shifts instead of power of 2 multiplications.
 For example, 
\family typewriter
x*2
\family default
 can be changed to 
\family typewriter
x<<1
\family default
, 
\family typewriter
x*4 = x<<2
\family default
, etc.
 The same is valid for divisions: 
\family typewriter
x/2 = x>>1
\family default
, 
\family typewriter
x/4 = x>>2
\family default
, etc.
 But be careful: this only works for positive numbers.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
*/
\family default
 Win: 00.03, Android: 00.20, iPhone: 00.33
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
<<>>
\family default
 Win: 00.02, Android: 00.19, iPhone: 00.17
\end_layout

\end_deeper
\begin_layout Enumerate
Use 
\family typewriter
&
\family default
 instead of 
\family typewriter
%
\family default
 (modulus) when possible.
 The situations where this is possible is when you have 
\family typewriter
x%2
\family default
, 
\family typewriter
x%4
\family default
, 
\family typewriter
x%8
\family default
, 
\family typewriter
x%16
\family default
, ..., 
\family typewriter
x%(2
\begin_inset script superscript

\begin_layout Plain Layout

\family typewriter
n
\end_layout

\end_inset

)
\family default
.
 You can replace it by 
\family typewriter
x&1
\family default
, 
\family typewriter
x&3
\family default
, 
\family typewriter
x&7
\family default
, 
\family typewriter
x&15
\family default
, ..., 
\family typewriter
x&(2
\begin_inset script superscript

\begin_layout Plain Layout

\family typewriter
n
\end_layout

\end_inset

-1)
\family default
.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
%
\family default
 Win: 00.02, Android: 00.17, iPhone: 00.21
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
&
\family default
 Win: 00.02, Android: 00.14, iPhone: 00.11
\end_layout

\end_deeper
\begin_layout Enumerate
Use aliases when dealing with an array that stores classes.
 Instead of
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

centerX = pos[i].x;
\end_layout

\begin_layout Plain Layout

centerY = pos[i].y;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.06, Android: 00.33, iPhone: 00.29
\end_layout

\begin_layout Standard
use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Coord c = pos[i];
\end_layout

\begin_layout Plain Layout

centerX = c.x;
\end_layout

\begin_layout Plain Layout

centerY = c.y;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.03, Android: 00.30, iPhone: 00.26
\end_layout

\begin_layout Standard
Because each time you access an array position, the VM checks for 
\family typewriter

\begin_inset Newline newline
\end_inset

NullPointerException
\family default
s, 
\family typewriter
ArrayIndexOutOfBoundsException
\family default
s, and does a multiply to access the memory address, which expends time.
\end_layout

\end_deeper
\begin_layout Enumerate
Use an array (e.
 g.: 
\family typewriter
String[]
\family default
, 
\family typewriter
int[]
\family default
, etc) instead of 
\family typewriter
Vector
\family default
 (or 
\family typewriter
IntVector
\family default
) when you know in advance the size and it will not grow or shrink.
 Adding elements to 
\family typewriter
Vector
\family default
 require the call of 
\family typewriter
addElement()
\family default
 hundreds of times, which affects performance.
\end_layout

\begin_layout Enumerate
If you need to do lots of 
\family typewriter
String
\family default
 concatenations, use a 
\family typewriter
StringBuffer
\family default
 instead of direct 
\family typewriter
String
\family default
 additions (+).
 This saves time and, especially, memory! It can avoid out of memory errors
 in some situations, specially when parsing text and/or xml.
 When in loop, remember to reuse 
\family typewriter
StringBuffer
\family default
 objects, using 
\family typewriter
StringBuffer.setLength(0)
\family default
.
 But note that when using 
\family typewriter
StringBuffer
\family default
 to concatenate only a few 
\family typewriter
String
\family default
s, there's no performance gain at all.
 In other words, optimize your program to use 
\family typewriter
StringBuffer
\family default
 only when doing things in loops.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String s = "";
\end_layout

\begin_layout Plain Layout

for (int i=0; i < LOOP3; i++) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	s += i;
\end_layout

\begin_layout Plain Layout

	if (n-- == 0)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		n = 100;
\end_layout

\begin_layout Plain Layout

		s = "";
\end_layout

\begin_layout Plain Layout

	} 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 03.00, Android: 16.80, iPhone: 23.80
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i=0; i < LOOP3; i++)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sb.append(i);
\end_layout

\begin_layout Plain Layout

	if (n-- == 0)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		n = 100;
\end_layout

\begin_layout Plain Layout

		sb.setLength(0);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.00, Android: 01.00, iPhone: 00.60
\end_layout

\end_deeper
\begin_layout Enumerate
When using 
\family typewriter
ListBox
\family default
 and 
\family typewriter
ComboBox
\family default
, don't initialize them by calling 
\family typewriter
add()
\family default
 repeatedly.
 Instead, create a new array with the data and assign it directly to the
 
\family typewriter
ListBox
\family default
/
\family typewriter
ComboBox
\family default
 using the constructor that receives an array of 
\family typewriter
Object
\family default
s.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (int i=0; i < 10000; i++)
\end_layout

\begin_layout Plain Layout

	lb.add(Convert.toString(i));
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 01.60, Android: 06.80, iPhone: 08.80
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String []s = new String[10000];
\end_layout

\begin_layout Plain Layout

for (int i=0; i < 10000; i++)
\end_layout

\begin_layout Plain Layout

	s[i] = Convert.toString(i);
\end_layout

\begin_layout Plain Layout

lb.add(s);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 00.00, Android: 02.90, iPhone: 05.20
\end_layout

\end_deeper
\begin_layout Enumerate
Use 
\family typewriter
int
\family default
 instead of 
\family typewriter
long
\family default
 and 
\family typewriter
double
\family default
 whenever possible.
 The 
\family typewriter
long
\family default
 type has to be emulated on 32-bit processors.
 Currently, almost all device processors have a math co-processor and thus
 
\family typewriter
double
\family default
 is a quite fast operation, although still slower than 
\family typewriter
int
\family default
.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
long
\family default
 Win: 00.06, Android: 00.51, iPhone: 00.33
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
double
\family default
 Win: 00.25, Android: 00.27, iPhone: 00.26
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
int
\family default
 Win: 00.03, Android: 00.19, iPhone: 00.37
\end_layout

\end_deeper
\begin_layout Enumerate
It is always better to use a 
\family typewriter
switch
\family default
/
\family typewriter
case
\family default
 instead of lots of 
\family typewriter
if
\family default
s/
\family typewriter
else
\family default
s.
 Even if the code isn't called much, a 
\family typewriter
switch
\family default
/
\family typewriter
case
\family default
 makes the code cleaner (like the suggested approach for the 
\family typewriter
onEvent()
\family default
 method – see 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Event-Handling"

\end_inset

).
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000
if/else Win: 00.05, Android: 00.25, iPhone: 00.26
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
switch Win: 00.03, Android: 00.21, iPhone: 00.21
\end_layout

\end_deeper
\begin_layout Enumerate
When using (
\family typewriter
Int
\family default
)
\family typewriter
Vector
\family default
 and (
\family typewriter
Int
\family default
)
\family typewriter
Hashtable
\family default
 and you have an estimate of the final size, construct it with that estimated
 size and not with the default constructor, to avoid buffer reallocation.
 Each time you add an element and the vector is filled, it allocates a new
 buffer 20% larger than the current one and copies all the contents to it,
 thus spending time and memory.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring starting from 10000000 
starting
\begin_inset space ~
\end_inset

from
\begin_inset space ~
\end_inset

10 Win: 00.00, Android: 01.10, iPhone: 00.90
\end_layout

\begin_layout Labeling
\labelwidthstring starting from 10000000 
starting
\begin_inset space ~
\end_inset

from
\begin_inset space ~
\end_inset

10000 Win: 00.00, Android: 01.00, iPhone: 00.80
\end_layout

\end_deeper
\begin_layout Enumerate
When using 
\family typewriter
String.indexOf()
\family default
, use the method that receives an 
\family typewriter
int
\family default
 value instead of the one that receives a 
\family typewriter
String
\family default
 value if the 
\family typewriter
String
\family default
 being searched has a length of one 
\family typewriter
char
\family default
.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
int
\family default
 Win: 00.09, Android: 00.69, iPhone: 00.67
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
String
\family default
 Win: 00.13, Android: 00.91, iPhone: 00.90
\end_layout

\end_deeper
\begin_layout Enumerate
Use aliases when accessing objects that are accessible by methods.
 For example, instead of:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

db.getResizeRecord().restartRecord(index);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

db.getResizeRecord().endRecord();
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ResizeRecord rs = db.getResizeRecord();
\end_layout

\begin_layout Plain Layout

rs.restartRecord(index);
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

rs.endRecord();
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Use the arithmetic shortcuts like 
\family typewriter
x+=y
\family default
, 
\family typewriter
x-=y
\family default
, 
\family typewriter
x*=y
\family default
, 
\family typewriter
x/=y
\family default
, 
\family typewriter
x&=y
\family default
, etc, instead of 
\family typewriter
x=x+y
\family default
, 
\family typewriter
x=x-y
\family default
, 
\family typewriter
x=x*y
\family default
, etc.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
x
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

x+y
\family default
 Win: 00.02, Android: 00.15, iPhone: 00.13
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
x
\begin_inset space ~
\end_inset

+=
\begin_inset space ~
\end_inset

y
\family default
 Win: 00.02, Android: 00.13, iPhone: 00.13
\end_layout

\end_deeper
\begin_layout Enumerate
Use local variables whenever possible, instead of instance variables, specially
 when they are used in loops.
 For example:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Test
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int loopVar;
\end_layout

\begin_layout Plain Layout

	public void testLoop()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		for (loopVar = 0; loopVar < 1000; loopVar++)
\end_layout

\begin_layout Plain Layout

			...
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Instead, make 
\family typewriter
loopVar
\family default
 a local variable inside the 
\family typewriter
testLoop()
\family default
 method, moving it to inside the method.
\end_layout

\begin_layout Labeling
\labelwidthstring instance variable0
instance
\begin_inset space ~
\end_inset

variable Win: 00.02, Android: 00.27, iPhone: 00.25
\end_layout

\begin_layout Labeling
\labelwidthstring instance variable0
local
\begin_inset space ~
\end_inset

variable Win: 00.02, Android: 00.12, iPhone: 00.13
\end_layout

\begin_layout Standard
Another trick is to create a local copy of a class variable in the method
 when it is used in a loop.
 For instance:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

StringBuffer sb = new StringBuffer(1024);
\end_layout

\begin_layout Plain Layout

public void processSomething()
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	StringBuffer sb = this.sb;
\end_layout

\begin_layout Plain Layout

	sb.setLength(0);
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
When iterating over a 
\family typewriter
String
\family default
, be careful to choose the correct approach for the target platform.
 Not always the best approach for one platform is also the best for the
 others.
 In this case, you have three choices: iterate using 
\family typewriter
charAt()
\family default
, iterate over the 
\family typewriter
char
\family default
 array provided by 
\family typewriter
toCharArray()
\family default
, or iterate over the byte array provided by 
\family typewriter
getBytes()
\family default
.
 The last two approaches increase the memory usage because they create arrays
 (the 
\family typewriter
char
\family default
 array takes twice the memory of a byte array).
\end_layout

\begin_deeper
\begin_layout Standard
Using 
\family typewriter
toCharArray()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String s = "a string";
\end_layout

\begin_layout Plain Layout

char []c = s.toCharArray(); 
\end_layout

\begin_layout Plain Layout

int n = c.length;
\end_layout

\begin_layout Plain Layout

for (int i =0; i < n; i++)
\end_layout

\begin_layout Plain Layout

	...
 c[i] ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 03.15, Android: 25.75, iPhone: 26.60
\end_layout

\begin_layout Standard
Using 
\family typewriter
getBytes()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

byte []b = s.getBytes();
\end_layout

\begin_layout Plain Layout

int n = b.length;
\end_layout

\begin_layout Plain Layout

for (int j =0; j < n; j++)
\end_layout

\begin_layout Plain Layout

	if (b[j] == (byte)'g')
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 03.90, Android: 26.35, iPhone: 28.25
\end_layout

\begin_layout Standard
Now, using 
\family typewriter
charAt()
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

int n = s.length();
\end_layout

\begin_layout Plain Layout

for (int i =0; i < n; i++)
\end_layout

\begin_layout Plain Layout

	...
 s.charAt(i) ...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Win: 09.35, Android: 78.00, iPhone: 64.40
\end_layout

\begin_layout Standard

\family typewriter
getBytes()
\family default
 convert 
\family typewriter
char
\family default
s to bytes using the 
\family typewriter
totalcross.sys.
\begin_inset Newline newline
\end_inset

CharacterConvertion
\family default
 class.
 It is faster in TotalCross because it detects the standard 
\family typewriter
CharacterConvertion
\family default
 class being used and, in this case, the native implementation of 
\family typewriter
chars2bytes()
\family default
 is used.
\end_layout

\end_deeper
\begin_layout Enumerate
The use of 
\family typewriter
short
\family default
 and 
\family typewriter
byte
\family default
 data types are slower than using 
\family typewriter
int
\family default
 and also saves no memory at all.
 This happens because boolean, 
\family typewriter
short
\family default
, and byte are internally stored as 
\family typewriter
int
\family default
 and they have to be converted to/from 
\family typewriter
int
\family default
 when are operated on.
 They should only be used when creating arrays; in such situation they do
 save memory.
\end_layout

\begin_deeper
\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
int
\family default
 Win: 00.02, Android: 00.16, iPhone: 00.13
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
short
\family default
 Win: 00.03, Android: 00.17, iPhone: 00.15
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\family typewriter
byte
\family default
 Win: 00.02, Android: 00.17, iPhone: 00.15
\end_layout

\end_deeper
\begin_layout Standard
Remember that although the time of each operation is small, in your whole
 program every speed improvement gained using the approaches described above
 will count a lot.
 Notice also that the tricks also improve performance on desktop.
\end_layout

\begin_layout Part
APPENDIXES 
\end_layout

\begin_layout Chapter
\start_of_appendix
Copyright
\begin_inset CommandInset label
LatexCommand label
name "chap:Copyright"

\end_inset


\end_layout

\begin_layout Standard
All contents of this tutorial, including text, programs, applets, source
 code, and images are copyrighted and owned by TotalCross Ltda, all rights
 reserved.
 No material can be reproduced and/or distributed electronically or in print
 without written permission.
\end_layout

\begin_layout Chapter
Platform specific known features/flaws
\end_layout

\begin_layout Section
iOS and Android
\end_layout

\begin_layout Standard
When an application crashes, it is usually closed by the system.
 But on Android the system might reboot.
\end_layout

\begin_layout Standard
On iOS, your application cannot access another application folder.
 On Android is also possible for it to access a memory card.
\end_layout

\begin_layout Chapter
Tutorials for third-party tools
\end_layout

\begin_layout Section
Deploying with Ant
\end_layout

\begin_layout Standard
Apache Ant is a Java-based build tool, similar to Make, that may be executed
 from the shell or from an IDE, like Eclipse.
\end_layout

\begin_layout Standard
The TotalCross SDK comes with a sample Ant build file.
 Just copy the 
\family typewriter
build.xml
\family default
 file located in 
\family typewriter
TotalCrossSDK/docs/companion_resources/ant_build
\family default
 to your application's directory, and change its properties as described
 below:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="40col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Property Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Example Value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
project name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“ACME”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Project's name
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
sdk.root
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“C:/TotalCrossSDK”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TotalCross SDK installation path
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
app.name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset Quotes eld
\end_inset

C:/ACME/main/Live.class”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The path and name of the class that extends 
\family typewriter
MainWindow
\family default
 (must end with 
\family typewriter
.class
\family default
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
app.name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“C:/ACME/Live.jar”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The path to the 
\family typewriter
.jar
\family default
 that contains all classes and resources.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
app.name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“C:/ACME/main”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The path to where the class that extends 
\family typewriter
MainWindow
\family default
 is located.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
platforms
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“-wince -win32”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Platforms to deploy.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
extra.args
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“/k /v”
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Any extra arguments you want to pass to the deployer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
target.dir
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
“.”
\family default
 (single dot - current path)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The target directory where the files will be created.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Section
Configuring Eclipse to Run and Debug TotalCross Programs
\end_layout

\begin_layout Standard
This is a guide to help you to setup the Eclipse IDE (www.eclipse.org) to
 develop TotalCross programs.
\end_layout

\begin_layout Standard
Because this isn't a guide for Eclipse or Java, it assumes the following:
\end_layout

\begin_layout Itemize
Java JDK 8 is installed and configured.
\end_layout

\begin_layout Itemize
The Eclipse IDE with Java Development Tools installed.
 Please notice this guide was created using the Eclipse Luna (version 4.4.x)
 package “Eclipse IDE for Java EE Developers”, and the steps presented here
 may not be valid for other versions.
\end_layout

\begin_layout Itemize
We'll refer to the TotalCross location as TotalCrossSDK.
\end_layout

\begin_layout Standard
We'll use the TotalCrossAPI sample that comes with the SDK to skip the programmi
ng and focus on the project setup:
\end_layout

\begin_layout Enumerate
Create a new Java Project: Open the menu File and click on New > Java Project.
\end_layout

\begin_layout Enumerate
Choose a project name for your project and click on Finish.
 We'll use TotalCrossAPI.
 Then click on 
\begin_inset Quotes eld
\end_inset

Finish
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate
Expand the newly created project and right-click on the folder “src” and
 choose “Import...”.
\end_layout

\begin_layout Enumerate
On the new “Import” dialog shown, expand the folder “General”, select “File
 System” and click “Next >”.
\end_layout

\begin_layout Enumerate
Now write the complete file path to the TotalCrossAPI example, or use “Browse”
 to navigate to the file system.
 Our source is located at 
\family typewriter
TotalCrossSDK/src/tc/samples/api/
\family default
.
\end_layout

\begin_layout Enumerate
On the left box, check the folder 
\family typewriter
api
\family default
.
\end_layout

\begin_layout Enumerate
On the edit 
\begin_inset Quotes eld
\end_inset

Into folder:
\begin_inset Quotes erd
\end_inset

, write 
\family typewriter
TotalCrossAPI/src/tc/samples
\family default
.
\end_layout

\begin_layout Enumerate
Now we can see our project is displaying several build errors.
 To fix this, right-click on the project and choose “Properties”.
\end_layout

\begin_layout Enumerate
On the left panel, select “Java Build Path”; Then, on the right panel, click
 on the “Libraries” tab and on the button “Add External JARs...”; Browse your
 file system to 
\family typewriter
TotalCrossSDK/dist
\family default
 and select the file 
\family typewriter
tc.jar
\family default
.
\end_layout

\begin_layout Enumerate
Now the “Libraries” tab should also show the 
\family typewriter
tc.jar
\family default
.
 Expand it and select “Javadoc location”.
 Now click on the button “Edit...” to open a new dialog, then browse your file
 system and select the 
\family typewriter
TotalCrossSDK/docs/html/
\family default
 directory and press “Ok” to confirm.
\end_layout

\begin_layout Enumerate
Back to the “Libraries” tab, select “Source attachment” and click on the
 button “Edit...” to open a new dialog, then browse your file system and select
 the 
\family typewriter
TotalCrossSDK/src
\family default
 directory and press “Ok” to confirm.
 This finishes the build path configuration.
\end_layout

\begin_layout Enumerate
Look again at the left panel and select “Java Compiler”.
 Check the option “Enable project specific settings” and change the “Compiler
 compliance level” to “1.8”.
\end_layout

\begin_layout Enumerate
Press “Ok” to confirm and close the “Properties” dialog.
\end_layout

\begin_layout Enumerate
Re-build the project and the build errors should all be gone (skip this
 step if your Eclipse is configured to build automatically in Preferences-->Work
space).
\end_layout

\begin_layout Chapter
Logging errors Example
\end_layout

\begin_layout Standard
We have developped a way to automatically generate an error log.
 In our case, the log is sent by email on each data synchronization.
 Thus, it is possible to catch errors that occur when the application is
 in production and the user can't send the device to us.
 The code written here is NOT in the SDK.
 
\end_layout

\begin_layout Standard
Firstly, you need to centralize all exception processing to throw them into
 a file.
 We must also find out if the program aborted for some reason.
 With the class below you can do this for Android.
 You can change it for other devices: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class GerenciamentoDeErros 
\end_layout

\begin_layout Plain Layout

{    
\end_layout

\begin_layout Plain Layout

	public static String retornaRaizTemp()    
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

		if (Settings.onJavaSE)          
\end_layout

\begin_layout Plain Layout

			return Settings.appPath+"/../";              
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		try        
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			if (new File("/sdcard/DCIM").exists())             
\end_layout

\begin_layout Plain Layout

				return "/sdcard";       
\end_layout

\begin_layout Plain Layout

		} 
\end_layout

\begin_layout Plain Layout

		catch (Exception e) {}        		
\end_layout

\begin_layout Plain Layout

		return Settings.appPath;    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public static String NOME_ARQUIVO = retornaRaizTemp()+"/errolm.log";   
     
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	public static void finalizouCorretamente()    
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

		try       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			File fin = new File("device/finalizou",File.CREATE_EMPTY);
\end_layout

\begin_layout Plain Layout

			fin.writeBytes(new byte[]{(byte)1},0,1);          
\end_layout

\begin_layout Plain Layout

			fin.close();       
\end_layout

\begin_layout Plain Layout

		}       
\end_layout

\begin_layout Plain Layout

		catch (Exception e)       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();       
\end_layout

\begin_layout Plain Layout

		}    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void verificaSeFinalizou()    
\end_layout

\begin_layout Plain Layout

	{       
\end_layout

\begin_layout Plain Layout

		try       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			File fin = new File("device/finalizou",File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

			byte[] b = new byte[1];          
\end_layout

\begin_layout Plain Layout

			int leu = fin.readBytes(b,0,1);          
\end_layout

\begin_layout Plain Layout

			if (leu != 1 || b[0] != 1)                       
\end_layout

\begin_layout Plain Layout

				if (Settings.platform.equals(Settings.ANDROID))             
\end_layout

\begin_layout Plain Layout

				{                
\end_layout

\begin_layout Plain Layout

					TelaBase.mensagem("The program has not been finalized properly.
 Synchronize the device as soon as possible so that the error report can
 be sent");     					
\end_layout

\begin_layout Plain Layout

					processaLogCat();             
\end_layout

\begin_layout Plain Layout

				}                    					
\end_layout

\begin_layout Plain Layout

				fin.setPos(0);          
\end_layout

\begin_layout Plain Layout

				fin.writeBytes(new byte[]{(byte)0},0,1);          
\end_layout

\begin_layout Plain Layout

				fin.close();       
\end_layout

\begin_layout Plain Layout

		}       
\end_layout

\begin_layout Plain Layout

		catch (FileNotFoundException fnfe)       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			Vm.debug("finalizou does not exist");       
\end_layout

\begin_layout Plain Layout

		}       
\end_layout

\begin_layout Plain Layout

		catch (Exception e)       
\end_layout

\begin_layout Plain Layout

		{          
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();       
\end_layout

\begin_layout Plain Layout

		}    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void log(Throwable t)    
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (!Settings.onJavaSE)
\end_layout

\begin_layout Plain Layout

			log(t.getClass().getName()+" "+t.getMessage());
\end_layout

\begin_layout Plain Layout

		log(Vm.getStackTrace(t));
\end_layout

\begin_layout Plain Layout

		if (Settings.onJavaSE)
\end_layout

\begin_layout Plain Layout

			t.printStackTrace();
\end_layout

\begin_layout Plain Layout

		TelaBase.mensagem("An error has occurred.
 Synchronize the device to send the error report.");    
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void log(String s)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		byte[] bytes = s.getBytes();
\end_layout

\begin_layout Plain Layout

		log(bytes,0,bytes.length);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	public static void log(byte[] bytes, int ofs, int len)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			File f = new File(NOME_ARQUIVO, File.CREATE);
\end_layout

\begin_layout Plain Layout

			f.setPos(f.getSize());
\end_layout

\begin_layout Plain Layout

			f.writeBytes(("========== "+new Date()+" "+new Time()+" TC: "+Settings.versionS
tr+" LM: "+Settings.appVersion+" ==========").getBytes());
\end_layout

\begin_layout Plain Layout

			f.writeBytes(bytes, ofs, len);
\end_layout

\begin_layout Plain Layout

			f.close();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (Exception e)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	private static void processaLogCat()
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		if (!Settings.platform.equals(Settings.ANDROID))
\end_layout

\begin_layout Plain Layout

			return;
\end_layout

\begin_layout Plain Layout

		String saida1 = "/sdcard/errocheio.log";
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			new File(saida1).delete();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (Exception e) {}
\end_layout

\begin_layout Plain Layout

		Vm.exec("cmd","logcat -d -f "+saida1+" -v time *:I",0,true);
\end_layout

\begin_layout Plain Layout

		try
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			byte[] enter = {'
\backslash
n',' '};
\end_layout

\begin_layout Plain Layout

			File f = new File(saida1);
\end_layout

\begin_layout Plain Layout

			while (!f.exists())
\end_layout

\begin_layout Plain Layout

				Vm.sleep(500);
\end_layout

\begin_layout Plain Layout

			File fi = new File(saida1, File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

			ByteArrayStream bas = new ByteArrayStream(f.getSize()/2);
\end_layout

\begin_layout Plain Layout

			LineReader lr = new LineReader(fi);
\end_layout

\begin_layout Plain Layout

			bas.writeBytes(enter,0,enter.length);
\end_layout

\begin_layout Plain Layout

			String s;
\end_layout

\begin_layout Plain Layout

			while ((s = lr.readLine()) != null)
\end_layout

\begin_layout Plain Layout

			{
\end_layout

\begin_layout Plain Layout

				if (s.indexOf(" W/ResourceType") != -1) // remove useless tags
\end_layout

\begin_layout Plain Layout

					continue;
\end_layout

\begin_layout Plain Layout

				if (s.indexOf(" I/DEBUG") != -1 && s.endsWith("code around pc:"))
\end_layout

\begin_layout Plain Layout

					while ((s = lr.readLine()) != null && s.indexOf(" I/DEBUG")!= -1) {}
 // skips the stack, which is useless (and consumes 20% of log file!)
\end_layout

\begin_layout Plain Layout

				if (s != null)
\end_layout

\begin_layout Plain Layout

				{
\end_layout

\begin_layout Plain Layout

					bas.writeBytes(s);
\end_layout

\begin_layout Plain Layout

					bas.writeBytes(enter,0,enter.length);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

			fi.close();
\end_layout

\begin_layout Plain Layout

			log(bas.getBuffer(),0,bas.getPos());
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		catch (Exception e)
\end_layout

\begin_layout Plain Layout

		{
\end_layout

\begin_layout Plain Layout

			e.printStackTrace();
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
How to use it:
\end_layout

\begin_layout Enumerate
On the application 
\family typewriter
initUI()
\family default
, call:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GerenciamentoDeErros.verificaSeFinalizou(); 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
On the application 
\family typewriter
onExit()
\family default
, call:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

GerenciamentoDeErros.finalizouCorretamente(); 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Whenever treating exceptions, call:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

catch (Exception e)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	GerenciamentoDeErros.log(e);
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
When synchronizing, check if the error file exists, load it, send it, and
 erase it:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

String nomeLog = GerenciamentoDeErros.NOME_ARQUIVO;
\end_layout

\begin_layout Plain Layout

if (new File(nomeLog).exists())
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	sinc.log("Sending error report.");
\end_layout

\begin_layout Plain Layout

	File log = new File(nomeLog,File.READ_WRITE);
\end_layout

\begin_layout Plain Layout

	byte[] lbuf = new byte[2048];
\end_layout

\begin_layout Plain Layout

	int tam = log.getSize();
\end_layout

\begin_layout Plain Layout

	final int TAM_MAX = 100000;
\end_layout

\begin_layout Plain Layout

	if (tam > TAM_MAX) // If the file is too big, only sends the last 100 K
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		log.setPos(tam-TAM_MAX);
\end_layout

\begin_layout Plain Layout

		tam = TAM_MAX;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	ds.writeInt(tam);
\end_layout

\begin_layout Plain Layout

	int nn;
\end_layout

\begin_layout Plain Layout

	while ((nn = log.readBytes(lbuf,0,lbuf.length)) > 0)
\end_layout

\begin_layout Plain Layout

		ds.writeBytes(lbuf,0,nn);
\end_layout

\begin_layout Plain Layout

	log.delete();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

else ds.writeInt(0);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Observations:
\end_layout

\begin_layout Enumerate
The 
\family typewriter
GerenciamentoDeErros
\family default
 class allows logging everything.
 AVOID THAT: only errors should be there.
\end_layout

\begin_layout Enumerate
In our synchronization, we send the log error using a servlet; if you preffer
 using a webservice, you must implement something different.
\end_layout

\begin_layout Enumerate
In the server, we get the report and send it by e-mail directly to the developer
 support service.
 If the report has errors in the VM, you should open a request in our support
 service with the error log and addicional information to help us to reproduce
 the errors.
 
\end_layout

\end_body
\end_document
