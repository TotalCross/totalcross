buildscript {
  repositories {
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'gradle.plugin.me.tatarka:gradle-retrolambda:3.7.1'
  }
}

apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'java'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
version = '7.0.0'
group = 'com.totalcross'
archivesBaseName = 'totalcross-sdk'

// can't be used yet, enconding is a mess
compileJava.options.encoding = 'UTF-8'

javadoc {
	failOnError = false
	options.encoding = 'UTF-8'
}

configurations { 
	obfuscatedArchive
}

retrolambda {
  javaVersion JavaVersion.VERSION_1_7
  defaultMethods true
  incremental true
}

wrapper {
    gradleVersion = '5.0'
    distributionUrl = distributionUrl.replace("bin", "all")
}

sourceSets {
    main {
        java {
        }
    }
    litebase {
        java {
            srcDirs = [new File(project.rootDir, '../LitebaseSDK/src/java')]
            exclude 'samples/**', 'litebase/android/**', '**/*4D.java'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:5.3.3'
    }
}

repositories {
    maven {
        url "http://maven.totalcross.com/artifactory/repo1"
    }
    mavenCentral()
}

dependencies {
    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.5.7'

    // https://mvnrepository.com/artifact/org.vafer/jdeb
    compile(group: 'org.vafer', name: 'jdeb', version: '0.7') {
		exclude group: 'org.bouncycastle'
	}
    // https://mvnrepository.com/artifact/org.bouncycastle/bcpkix-jdk15on
    compile group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.56'
    // https://mvnrepository.com/artifact/com.googlecode.plist/dd-plist
    compile group: 'com.googlecode.plist', name: 'dd-plist', version: '1.19'
    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.7'
    // https://mvnrepository.com/artifact/de.schlichtherle.truezip/truezip-file
    compile group: 'de.schlichtherle.truezip', name: 'truezip-file', version: '7.5.1'
    // https://mvnrepository.com/artifact/de.schlichtherle.truezip/truezip-driver-zip
    compile(group: 'de.schlichtherle.truezip', name: 'truezip-driver-zip', version: '7.5.1') {
		exclude group: 'org.bouncycastle'
	}
    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.2'

    // https://mvnrepository.com/artifact/org.ow2.asm/asm
    compile group: 'org.ow2.asm', name: 'asm', version: '5.2'
    // https://mvnrepository.com/artifact/org.ow2.asm/asm-tree
    compile group: 'org.ow2.asm', name: 'asm-tree', version: '5.2'

    // https://mvnrepository.com/artifact/net.harawata/appdirs
    compile group: 'net.harawata', name: 'appdirs', version: '1.2.0'
	// https://mvnrepository.com/artifact/net.java.dev.jna/jna-platform
	runtime group: 'net.java.dev.jna', name: 'jna-platform', version: '4.2.2'
	
	// https://mvnrepository.com/artifact/net.coobird/thumbnailator
	compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.8'

	// https://mvnrepository.com/artifact/junit/junit
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    compile(group: 'com.totalcross.annotations', name: 'totalcross-annotations', version: '1.0.0')
}

test {
    useJUnitPlatform ()
    testLogging {
        exceptionFormat = 'full'
    }
}

jar {
    exclude 'totalcross/res/mp3/**', 'totalcross/chartypes.bin'
    from(sourceSets.litebase.output)
    from new File(project.rootDir, 'etc/fonts/TCFont.tcz')
    from new File(project.rootDir, 'etc/fonts/Material Icons.tcz')
    into("META-INF/maven/$project.group/$baseName") {
        from {
            generatePomFileForMavenCustomPublication
        }
        rename ".*", "pom.xml"
    }

    // collect all dependencies
    int i = 0;
    String classpathVar = configurations.compile.collect { " libs/" + (i++==0?String.format("%0\$-50s", it.getName()):String.format("%0\$-62s", it.getName()))   }.join(" ");
    manifest {
        attributes('Main-Class': 'totalcross.Launcher')
        manifest {
            attributes(
            "Class-Path": classpathVar)
        }
    }
}
publishing {
    publications {
        mavenCustom(MavenPublication) {
            artifactId 'totalcross-sdk'
			pom.packaging = 'jar'
			
			// workaround - maven-publish lists all dependencies as runtime regardless of the original scope
			pom.withXml {
				// use instead of 'asNode()' - workaround to avoid duplicating the dependencies node by getting index 0
				def dependenciesNode = asNode().getAt("dependencies")[0]
			
				dependenciesNode.dependencies.'*'.findAll() {
					it.scope.text() == 'runtime' && project.configurations.compile.allDependencies.find { dep ->
						dep.name == it.artifactId.text()
					}
				}.each { it.scope*.value = 'compile'}
				
				// manually add test dependencies because they are ignored by maven-publish
		        configurations.testCompile.dependencies.each {
		            def dependencyNode = dependenciesNode.appendNode('dependency')
		            dependencyNode.appendNode('groupId', it.group)
		            dependencyNode.appendNode('artifactId', it.name)
		            dependencyNode.appendNode('version', it.version)
		            dependencyNode.appendNode('scope', 'test')
				}
        	}

			// kept as reference
            /*
            pom.withXml {
                asNode().appendNode('description',
                                    'A demonstration of maven POM customization')
            }
            */

            from components.java
        }
    }
}

// we're not publishing yet
publishing {
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            url "build/repo"
        }
    }
}


task signJar {
    try {
        ant.signjar(
            jar: jar.archivePath,
            signedJar: jar.archivePath,
            alias:'tcandroidkey',
            storetype:"jks",
            keystore: "$System.env.TC_PATH_TO_KEY_STORE",
            storepass: "$System.env.TC_STORE_PASSWORD",
            keypass: "$System.env.TC_STORE_KEY",
            verbose:true,
            preservelastmodified:"true"
        )
    } catch (Exception e) {
        logger.warn("TC_PATH_TO_KEY_STORE or TC_STORE_PASSWORD or TC_STORE_KEY not defined! Jar won't be signed")
    }
    
}

// tcbase.jar
task tcbaseJar(type: Jar) {
    baseName = "tcbase"
    from(sourceSets.main.output) {
        exclude '**/*4A.*', 'totalcross/Launcher*', 'totalcross/TCEventThread*', 'totalcross/TotalCrossApplication.*', 'tc/**', 'totalcross/res/**', 'totalcross/ui/**', 'totalcross/sql/sqlite4j/**', 'totalcross/android/**', 'totalcross/zxing/**', 'tc/tools/InvalidateIPA*'
    }
}

// tcui.jar
task tcuiJar(type: Jar) {
    baseName = "tcui"
    from(sourceSets.main.output) {
        include 'totalcross/ui/**', 'totalcross/res/**'
    }
}

tasks.withType(Jar) {
    includeEmptyDirs = false
}

task deployTcbase(type:JavaExec, dependsOn: [jar, tcbaseJar]) {
	main = 'tc.Deploy'
	args = [
		tcbaseJar.archivePath, 
		'/n', 'TCBase', 
		'/a', 'TCvm'
		]
	classpath = files(
        jar.archivePath, 
        configurations.runtime.collect())
}

task deployTcui(type:JavaExec, dependsOn: [jar, tcuiJar]) {
	main = 'tc.Deploy'
	args = [
		tcuiJar.archivePath, 
		'/n', 'TCUI', 
		'/a', 'TCvm'
		]
	classpath = files(
        jar.archivePath, 
        configurations.runtime.collect())
}

task dist(dependsOn: build) {

	doLast{
		copy { 
			from 'etc/fonts/TCFont.tcz'
			from 'build/libs/TCUI.tcz'
			from 'build/libs/TCBase.tcz'
			into 'dist/vm/'
		}
	
		copy { 
			from jar.archivePath
			into 'dist/'
			rename  { String fileName ->
	    				fileName.replace('-' + project.version, '')
	  		}
		}
	}
}

build.finalizedBy(deployTcbase, deployTcui)

/**
    Sources
*/
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from (sourceSets.main.allSource) { 
    	exclude 'tc/**', '**/*4A.java', '**/*4D.java'
    }
    from (sourceSets.litebase.allSource)
}
javadoc.finalizedBy(sourcesJar)

/** 
    Javadoc
 */
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc {
    	exclude 'jdkcompat*/**', 'tc/**', '**/*4A.java', '**/*4D.java'
    }
}
javadoc.finalizedBy(javadocJar)

artifacts {
    archives sourcesJar, javadocJar, tcbaseJar, tcuiJar
}
